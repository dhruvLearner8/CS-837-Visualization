{"ast":null,"code":"\n\n// import React, { useEffect, useRef } from 'react';\n\n// import * as d3 from 'd3';\n\n// const ScatterPlot = ({ data, selectedYear = 2022, regionColorMap, activeRegions }) => {\n//   const svgRef = useRef();\n\n//   useEffect(() => {\n//     if (!data.length) return;\n\n//    // const filteredData = data.filter(d => d.year === selectedYear);\n//    const filteredData = data.filter(d =>\n//     d.year === selectedYear &&\n//     d.entity !== 'World' &&\n//     !d.entity.toLowerCase().includes('income') &&\n//     d.gdp_per_capita > 0 &&\n//     d.co2_emissions_per_capita > 0 &&\n//     d.population > 0\n//   );\n\n//     const width = 900;\n//     const height = 550;\n//     const margin = { top: 40, right: 40, bottom: 60, left: 80 };\n\n//     const svg = d3.select(svgRef.current);\n//     svg.selectAll('*').remove(); // Clear old content\n\n//     const chart = svg\n//       .attr('width', width)\n//       .attr('height', height)\n//       .append('g')\n//       .attr('transform', `translate(${margin.left},${margin.top})`);\n\n//     const innerWidth = width - margin.left - margin.right;\n//     const innerHeight = height - margin.top - margin.bottom;\n\n//     // Scales\n//     const xScale = d3.scaleLog()\n//       .domain([100, d3.max(filteredData, d => d.gdp_per_capita || 100000)])\n//       .range([0, innerWidth]);\n\n//     const yScale = d3.scaleLog()\n//       .domain([0.1, d3.max(filteredData, d => d.co2_emissions_per_capita || 10)])\n//       .range([innerHeight, 0]);\n\n//     // const regionColors = d3.scaleOrdinal()\n//     //   .domain(['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'])\n//     //   .range(['#8c564b', '#17becf', '#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']);\n\n//     // Axes\n//     chart.append('g')\n//       .attr('transform', `translate(0, ${innerHeight})`)\n//       .call(d3.axisBottom(xScale).ticks(10, \"~s\"))\n//       .append('text')\n//       .attr('x', innerWidth / 2)\n//       .attr('y', 40)\n//       .attr('fill', '#000')\n//       .attr('text-anchor', 'middle')\n//       .text('GDP per capita (log scale)');\n\n//     chart.append('g')\n//       .call(d3.axisLeft(yScale).ticks(10, \"~s\"))\n//       .append('text')\n//       .attr('transform', 'rotate(-90)')\n//       .attr('x', -innerHeight / 2)\n//       .attr('y', -60)\n//       .attr('fill', '#000')\n//       .attr('text-anchor', 'middle')\n//       .text('CO₂ emissions per capita (log scale)');\n\n//     // Tooltip div\n//     const tooltip = d3.select(\"body\")\n//       .append(\"div\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"background\", \"#fff\")\n//       .style(\"padding\", \"6px 10px\")\n//       .style(\"border\", \"1px solid #ccc\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"pointer-events\", \"none\")\n//       .style(\"opacity\", 0)\n//       .on('click', (event) => {\n//         event.stopPropagation(); // Prevent sticky tooltip behavior\n//       });;\n\n//     // Remove previous circles\n// chart.selectAll('circle.bubble').remove();\n// chart.selectAll('circle.ring').remove();\n\n// // RING CIRCLES (outer)\n// chart.selectAll('circle.ring')\n//   .data(filteredData.filter(d => activeRegions.includes(d.region)))\n//   .enter()\n//   .append('circle')\n//   .attr('class', 'ring')\n//   .attr('cx', d => xScale(d.gdp_per_capita || 100))\n//   .attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1))\n//   .attr('r', d => Math.sqrt(d.population) / 1000 + 4) // slightly bigger than main circle\n//   .attr('fill', 'none')\n//   .attr('stroke', d => regionColorMap[d.region] || '#000')\n//   .attr('stroke-width', 2)\n//   .attr('opacity', 1);\n\n// // MAIN CIRCLES (data bubble)\n// chart.selectAll('circle.bubble')\n//   .data(filteredData)\n//   .enter()\n//   .append('circle')\n//   .attr('class', 'bubble')\n//   .attr('cx', d => xScale(d.gdp_per_capita || 100))\n//   .attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1))\n//   .attr('r', d => Math.sqrt(d.population) / 1000)\n//   .attr('fill', d =>\n//     activeRegions.includes(d.region)\n//       ? regionColorMap[d.region] || '#000'\n//       : '#ccc'\n//   )\n//   .attr('opacity', 0.85)\n//   .on('mouseover', function (event, d) {\n//     tooltip.transition().duration(200).style('opacity', 1);\n//     tooltip.html(`\n//       <strong>${d.entity}</strong><br/>\n//       Year: ${d.year}<br/>\n//       GDP per capita: $${Math.round(d.gdp_per_capita)}<br/>\n//       CO₂ per capita: ${d.co2_emissions_per_capita.toFixed(2)} t<br/>\n//       Population: ${d.population.toLocaleString()}\n//     `)\n//       .style(\"left\", (event.pageX + 10) + \"px\")\n//       .style(\"top\", (event.pageY - 28) + \"px\");\n\n//     // Highlight hovered bubble\n//     d3.select(this)\n//       .attr('stroke', regionColorMap[d.region] || '#000')\n//       .attr('stroke-width', 3)\n//       .attr('fill', d3.color(regionColorMap[d.region]).brighter(0.5))\n//       .attr('r', Math.sqrt(d.population) / 1000 + 4); // Slight size increase\n//   })\n\n//   .on('mouseout', function (event, d) {\n//     tooltip.transition().duration(500).style('opacity', 0);\n\n//     // Reset bubble to original state\n//     d3.select(this)\n//       .attr('stroke', 'none')\n//       .attr('r', Math.sqrt(d.population) / 1000)\n//       .attr('fill', d => activeRegions.includes(d.region)\n//   ? regionColorMap[d.region] || '#000'\n//   : '#ccc'\n// );\n\n//   });\n\n//   // .on('mouseover', (event, d) => {\n//   //   tooltip.transition().duration(200).style('opacity', 1);\n//   //   tooltip.html(`\n//   //     <strong>${d.entity}</strong><br/>\n//   //     Year: ${d.year}<br/>\n//   //     GDP per capita: $${Math.round(d.gdp_per_capita)}<br/>\n//   //     CO₂ per capita: ${d.co2_emissions_per_capita.toFixed(2)} t<br/>\n//   //     Population: ${d.population.toLocaleString()}\n//   //   `)\n//   //     .style(\"left\", (event.pageX + 10) + \"px\")\n//   //     .style(\"top\", (event.pageY - 28) + \"px\");\n//   // })\n//   // .on('mouseout', () => {\n//   //   tooltip.transition().duration(500).style('opacity', 0);\n//   // });\n\n//       // --- Country Labels ---\n// // Remove old labels\n// chart.selectAll('text.label').remove();\n\n// // Add country labels\n// chart.selectAll('text.label')\n//   .data(filteredData.filter(d => activeRegions.includes(d.region))) // Only for selected regions\n//   .enter()\n//   .append('text')\n//   .attr('class', 'label')\n//   .attr('x', d => xScale(d.gdp_per_capita || 100))\n//   .attr('y', d => yScale(d.co2_emissions_per_capita || 0.1) - 8) // Above the circle\n//   .text(d => d.entity)\n//   .attr('font-size', '10px')\n//   .attr('fill', d => regionColorMap[d.region] || '#333')\n//   .attr('font-weight', 'bold')\n//   .attr('text-anchor', 'middle');\n\n//   }, [data, selectedYear, activeRegions, regionColorMap]);\n\n//   return <svg ref={svgRef}></svg>;\n// };\n\n// export default ScatterPlot;","map":{"version":3,"names":[],"sources":["C:/Users/dhruv/OneDrive/Desktop/CS 837 Information Vis/gdp-pollution-app/frontend/src/components/ScatterPlot.js"],"sourcesContent":["\r\n\r\n// import React, { useEffect, useRef } from 'react';\r\n\r\n\r\n// import * as d3 from 'd3';\r\n\r\n// const ScatterPlot = ({ data, selectedYear = 2022, regionColorMap, activeRegions }) => {\r\n//   const svgRef = useRef();\r\n\r\n//   useEffect(() => {\r\n//     if (!data.length) return;\r\n\r\n//    // const filteredData = data.filter(d => d.year === selectedYear);\r\n//    const filteredData = data.filter(d =>\r\n//     d.year === selectedYear &&\r\n//     d.entity !== 'World' &&\r\n//     !d.entity.toLowerCase().includes('income') &&\r\n//     d.gdp_per_capita > 0 &&\r\n//     d.co2_emissions_per_capita > 0 &&\r\n//     d.population > 0\r\n//   );\r\n\r\n  \r\n  \r\n//     const width = 900;\r\n//     const height = 550;\r\n//     const margin = { top: 40, right: 40, bottom: 60, left: 80 };\r\n\r\n//     const svg = d3.select(svgRef.current);\r\n//     svg.selectAll('*').remove(); // Clear old content\r\n\r\n//     const chart = svg\r\n//       .attr('width', width)\r\n//       .attr('height', height)\r\n//       .append('g')\r\n//       .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n//     const innerWidth = width - margin.left - margin.right;\r\n//     const innerHeight = height - margin.top - margin.bottom;\r\n\r\n//     // Scales\r\n//     const xScale = d3.scaleLog()\r\n//       .domain([100, d3.max(filteredData, d => d.gdp_per_capita || 100000)])\r\n//       .range([0, innerWidth]);\r\n\r\n//     const yScale = d3.scaleLog()\r\n//       .domain([0.1, d3.max(filteredData, d => d.co2_emissions_per_capita || 10)])\r\n//       .range([innerHeight, 0]);\r\n\r\n//     // const regionColors = d3.scaleOrdinal()\r\n//     //   .domain(['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'])\r\n//     //   .range(['#8c564b', '#17becf', '#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']);\r\n\r\n//     // Axes\r\n//     chart.append('g')\r\n//       .attr('transform', `translate(0, ${innerHeight})`)\r\n//       .call(d3.axisBottom(xScale).ticks(10, \"~s\"))\r\n//       .append('text')\r\n//       .attr('x', innerWidth / 2)\r\n//       .attr('y', 40)\r\n//       .attr('fill', '#000')\r\n//       .attr('text-anchor', 'middle')\r\n//       .text('GDP per capita (log scale)');\r\n\r\n//     chart.append('g')\r\n//       .call(d3.axisLeft(yScale).ticks(10, \"~s\"))\r\n//       .append('text')\r\n//       .attr('transform', 'rotate(-90)')\r\n//       .attr('x', -innerHeight / 2)\r\n//       .attr('y', -60)\r\n//       .attr('fill', '#000')\r\n//       .attr('text-anchor', 'middle')\r\n//       .text('CO₂ emissions per capita (log scale)');\r\n\r\n//     // Tooltip div\r\n//     const tooltip = d3.select(\"body\")\r\n//       .append(\"div\")\r\n//       .style(\"position\", \"absolute\")\r\n//       .style(\"background\", \"#fff\")\r\n//       .style(\"padding\", \"6px 10px\")\r\n//       .style(\"border\", \"1px solid #ccc\")\r\n//       .style(\"border-radius\", \"4px\")\r\n//       .style(\"pointer-events\", \"none\")\r\n//       .style(\"opacity\", 0)\r\n//       .on('click', (event) => {\r\n//         event.stopPropagation(); // Prevent sticky tooltip behavior\r\n//       });;\r\n\r\n \r\n\r\n//     // Remove previous circles\r\n// chart.selectAll('circle.bubble').remove();\r\n// chart.selectAll('circle.ring').remove();\r\n\r\n// // RING CIRCLES (outer)\r\n// chart.selectAll('circle.ring')\r\n//   .data(filteredData.filter(d => activeRegions.includes(d.region)))\r\n//   .enter()\r\n//   .append('circle')\r\n//   .attr('class', 'ring')\r\n//   .attr('cx', d => xScale(d.gdp_per_capita || 100))\r\n//   .attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1))\r\n//   .attr('r', d => Math.sqrt(d.population) / 1000 + 4) // slightly bigger than main circle\r\n//   .attr('fill', 'none')\r\n//   .attr('stroke', d => regionColorMap[d.region] || '#000')\r\n//   .attr('stroke-width', 2)\r\n//   .attr('opacity', 1);\r\n\r\n// // MAIN CIRCLES (data bubble)\r\n// chart.selectAll('circle.bubble')\r\n//   .data(filteredData)\r\n//   .enter()\r\n//   .append('circle')\r\n//   .attr('class', 'bubble')\r\n//   .attr('cx', d => xScale(d.gdp_per_capita || 100))\r\n//   .attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1))\r\n//   .attr('r', d => Math.sqrt(d.population) / 1000)\r\n//   .attr('fill', d =>\r\n//     activeRegions.includes(d.region)\r\n//       ? regionColorMap[d.region] || '#000'\r\n//       : '#ccc'\r\n//   )\r\n//   .attr('opacity', 0.85)\r\n//   .on('mouseover', function (event, d) {\r\n//     tooltip.transition().duration(200).style('opacity', 1);\r\n//     tooltip.html(`\r\n//       <strong>${d.entity}</strong><br/>\r\n//       Year: ${d.year}<br/>\r\n//       GDP per capita: $${Math.round(d.gdp_per_capita)}<br/>\r\n//       CO₂ per capita: ${d.co2_emissions_per_capita.toFixed(2)} t<br/>\r\n//       Population: ${d.population.toLocaleString()}\r\n//     `)\r\n//       .style(\"left\", (event.pageX + 10) + \"px\")\r\n//       .style(\"top\", (event.pageY - 28) + \"px\");\r\n  \r\n//     // Highlight hovered bubble\r\n//     d3.select(this)\r\n//       .attr('stroke', regionColorMap[d.region] || '#000')\r\n//       .attr('stroke-width', 3)\r\n//       .attr('fill', d3.color(regionColorMap[d.region]).brighter(0.5))\r\n//       .attr('r', Math.sqrt(d.population) / 1000 + 4); // Slight size increase\r\n//   })\r\n  \r\n//   .on('mouseout', function (event, d) {\r\n//     tooltip.transition().duration(500).style('opacity', 0);\r\n  \r\n//     // Reset bubble to original state\r\n//     d3.select(this)\r\n//       .attr('stroke', 'none')\r\n//       .attr('r', Math.sqrt(d.population) / 1000)\r\n//       .attr('fill', d => activeRegions.includes(d.region)\r\n//   ? regionColorMap[d.region] || '#000'\r\n//   : '#ccc'\r\n// );\r\n\r\n//   });\r\n  \r\n//   // .on('mouseover', (event, d) => {\r\n//   //   tooltip.transition().duration(200).style('opacity', 1);\r\n//   //   tooltip.html(`\r\n//   //     <strong>${d.entity}</strong><br/>\r\n//   //     Year: ${d.year}<br/>\r\n//   //     GDP per capita: $${Math.round(d.gdp_per_capita)}<br/>\r\n//   //     CO₂ per capita: ${d.co2_emissions_per_capita.toFixed(2)} t<br/>\r\n//   //     Population: ${d.population.toLocaleString()}\r\n//   //   `)\r\n//   //     .style(\"left\", (event.pageX + 10) + \"px\")\r\n//   //     .style(\"top\", (event.pageY - 28) + \"px\");\r\n//   // })\r\n//   // .on('mouseout', () => {\r\n//   //   tooltip.transition().duration(500).style('opacity', 0);\r\n//   // });\r\n\r\n\r\n//       // --- Country Labels ---\r\n// // Remove old labels\r\n// chart.selectAll('text.label').remove();\r\n\r\n// // Add country labels\r\n// chart.selectAll('text.label')\r\n//   .data(filteredData.filter(d => activeRegions.includes(d.region))) // Only for selected regions\r\n//   .enter()\r\n//   .append('text')\r\n//   .attr('class', 'label')\r\n//   .attr('x', d => xScale(d.gdp_per_capita || 100))\r\n//   .attr('y', d => yScale(d.co2_emissions_per_capita || 0.1) - 8) // Above the circle\r\n//   .text(d => d.entity)\r\n//   .attr('font-size', '10px')\r\n//   .attr('fill', d => regionColorMap[d.region] || '#333')\r\n//   .attr('font-weight', 'bold')\r\n//   .attr('text-anchor', 'middle');\r\n\r\n\r\n\r\n//   }, [data, selectedYear, activeRegions, regionColorMap]);\r\n\r\n//   return <svg ref={svgRef}></svg>;\r\n// };\r\n\r\n// export default ScatterPlot;\r\n"],"mappings":";;AAEA;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAEA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}