{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dhruv\\\\OneDrive\\\\Desktop\\\\CS 837 Information Vis\\\\gdp-pollution-app\\\\frontend\\\\src\\\\components\\\\ScatterPlot.js\",\n  _s = $RefreshSig$();\n// // export default ScatterPlot;\n// import React, { useEffect, useRef, useState } from 'react';\n// import * as d3 from 'd3';\n\n// const ScatterPlot = ({\n//   data,\n//   selectedYear = 2022,\n//   regionColorMap,\n//   activeRegions,\n//   selectedCountries,\n//   setSelectedCountries\n// }) => {\n//   const svgRef = useRef();\n//   const [hoveredCountry, setHoveredCountry] = useState(null);\n//   const [hoverPos, setHoverPos] = useState({ x: 0, y: 0 });\n\n//   useEffect(() => {\n//     if (!data.length) return;\n\n//     const filteredData = data.filter(d =>\n//       d.year === selectedYear &&\n//       d.entity !== 'World' &&\n//       !d.entity.toLowerCase().includes('income') &&\n//       d.gdp_per_capita > 0 &&\n//       d.co2_emissions_per_capita > 0 &&\n//       d.population > 0\n//     );\n\n//     const width = 900;\n//     const height = 550;\n//     const margin = { top: 40, right: 40, bottom: 60, left: 80 };\n\n//     const svg = d3.select(svgRef.current);\n//     svg.selectAll('*').remove();\n\n//     const chart = svg\n//       .attr('width', width)\n//       .attr('height', height)\n//       .append('g')\n//       .attr('transform', `translate(${margin.left},${margin.top})`);\n\n//     const innerWidth = width - margin.left - margin.right;\n//     const innerHeight = height - margin.top - margin.bottom;\n\n//     const xScale = d3.scaleLog()\n//       .domain([100, d3.max(filteredData, d => d.gdp_per_capita || 100000)])\n//       .range([0, innerWidth]);\n\n//     const yScale = d3.scaleLog()\n//       .domain([0.1, d3.max(filteredData, d => d.co2_emissions_per_capita || 10)])\n//       .range([innerHeight, 0]);\n\n//     chart.append('g')\n//       .attr('transform', `translate(0, ${innerHeight})`)\n//       .call(d3.axisBottom(xScale).ticks(10, \"~s\"))\n//       .append('text')\n//       .attr('x', innerWidth / 2)\n//       .attr('y', 40)\n//       .attr('fill', '#000')\n//       .attr('text-anchor', 'middle')\n//       .text('GDP per capita (log scale)');\n\n//     chart.append('g')\n//       .call(d3.axisLeft(yScale).ticks(10, \"~s\"))\n//       .append('text')\n//       .attr('transform', 'rotate(-90)')\n//       .attr('x', -innerHeight / 2)\n//       .attr('y', -60)\n//       .attr('fill', '#000')\n//       .attr('text-anchor', 'middle')\n//       .text('CO₂ emissions per capita (log scale)');\n\n//     // RING CIRCLES\n//     chart.selectAll('circle.ring')\n//       .data(filteredData.filter(d => activeRegions.includes(d.region)))\n//       .enter()\n//       .append('circle')\n//       .attr('class', 'ring')\n//       .attr('cx', d => xScale(d.gdp_per_capita || 100))\n//       .attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1))\n//       .attr('r', d => Math.sqrt(d.population) / 1000 + 4)\n//       .attr('fill', 'none')\n//       .attr('stroke', d => regionColorMap[d.region] || '#000')\n//       .attr('stroke-width', 2)\n//       .attr('opacity', 1);\n\n//     // MAIN CIRCLES\n//     chart.selectAll('circle.bubble')\n//       .data(filteredData)\n//       .enter()\n//       .append('circle')\n//       .attr('class', 'bubble')\n//       .attr('cx', d => xScale(d.gdp_per_capita || 100))\n//       .attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1))\n//       .attr('r', d => {\n//         const baseR = Math.sqrt(d.population) / 1000;\n//         return selectedCountries.some(c => c.entity === d.entity) ? baseR + 4 : baseR;\n//       })\n//       .attr('fill', d => {\n//         if (selectedCountries.some(c => c.entity === d.entity)) {\n//           return d3.color(regionColorMap[d.region]).brighter(0.5);\n//         }\n//         return activeRegions.includes(d.region)\n//           ? regionColorMap[d.region] || '#000'\n//           : '#ccc';\n//       })\n//       .attr('stroke', d =>\n//         selectedCountries.some(c => c.entity === d.entity)\n//           ? regionColorMap[d.region]\n//           : 'none'\n//       )\n//       .attr('stroke-width', d =>\n//         selectedCountries.some(c => c.entity === d.entity) ? 3 : 0\n//       )\n//       .attr('opacity', 0.85)\n//       .on('mouseover', function (event, d) {\n//         setHoveredCountry(d);\n//         setHoverPos({ x: event.pageX + 10, y: event.pageY - 28 });\n\n//         d3.select(this)\n//           .attr('stroke', regionColorMap[d.region] || '#000')\n//           .attr('stroke-width', 3)\n//           .attr('fill', d3.color(regionColorMap[d.region]).brighter(0.5))\n//           .attr('r', Math.sqrt(d.population) / 1000 + 4);\n//       })\n//       .on('mouseout', function (event, d) {\n//         setHoveredCountry(null);\n\n//         const baseR = Math.sqrt(d.population) / 1000;\n//         const isSelected = selectedCountries.some(c => c.entity === d.entity);\n\n//         d3.select(this)\n//           .attr('r', isSelected ? baseR + 4 : baseR)\n//           .attr('stroke', isSelected ? regionColorMap[d.region] : 'none')\n//           .attr('stroke-width', isSelected ? 3 : 0)\n//           .attr('fill', () => {\n//             if (isSelected) {\n//               return d3.color(regionColorMap[d.region]).brighter(0.5);\n//             }\n//             return activeRegions.includes(d.region)\n//               ? regionColorMap[d.region] || '#000'\n//               : '#ccc';\n//           });\n//       })\n//       .on('click', function (event, d) {\n//         event.stopPropagation();\n//         const isAlreadySelected = selectedCountries.some(c => c.entity === d.entity);\n//         const updated = isAlreadySelected\n//           ? selectedCountries.filter(c => c.entity !== d.entity)\n//           : [...selectedCountries, d];\n//         setSelectedCountries(updated);\n//       });\n\n//     // Labels for selected countries only\n//     chart.selectAll('text.label').remove();\n\n//     chart.selectAll('text.label')\n//       .data(filteredData.filter(d =>\n//         activeRegions.includes(d.region) || selectedCountries.some(c => c.entity === d.entity)\n//       ))\n//       .enter()\n//       .append('text')\n//       .attr('class', 'label')\n//       .attr('x', d => xScale(d.gdp_per_capita || 100))\n//       .attr('y', d => yScale(d.co2_emissions_per_capita || 0.1) - 8)\n//       .text(d => d.entity)\n//       .attr('font-size', '10px')\n//       .attr('fill', d => regionColorMap[d.region] || '#333')\n//       .attr('font-weight', 'bold')\n//       .attr('text-anchor', 'middle');\n//   }, [data, selectedYear, activeRegions, regionColorMap, selectedCountries]);\n\n//   return (\n//     <>\n//       <svg ref={svgRef}></svg>\n\n//       {/* Hover-only tooltip card */}\n//       {hoveredCountry && (\n//         <div style={{\n//           position: 'absolute',\n//           left: `${hoverPos.x}px`,\n//           top: `${hoverPos.y}px`,\n//           background: '#fff',\n//           padding: '10px',\n//           border: '1px solid #ccc',\n//           borderRadius: '6px',\n//           boxShadow: '0 2px 6px rgba(0,0,0,0.15)',\n//           zIndex: 100,\n//           pointerEvents: 'none'\n//         }}>\n//           <strong>{hoveredCountry.entity}</strong><br />\n//           Year: {hoveredCountry.year}<br />\n//           GDP per capita: ${Math.round(hoveredCountry.gdp_per_capita)}<br />\n//           CO₂ per capita: {hoveredCountry.co2_emissions_per_capita.toFixed(2)} t<br />\n//           Population: {hoveredCountry.population.toLocaleString()}\n//         </div>\n//       )}\n//     </>\n//   );\n// };\n\n// export default ScatterPlot;\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ScatterPlot = ({\n  data,\n  selectedYear = 2022,\n  regionColorMap,\n  activeRegions,\n  selectedCountries,\n  setSelectedCountries\n}) => {\n  _s();\n  const svgRef = useRef();\n  const [zoomExtent, setZoomExtent] = useState(null);\n  useEffect(() => {\n    if (!data.length) return;\n    const filteredData = data.filter(d => d.year === selectedYear && d.entity !== 'World' && !d.entity.toLowerCase().includes('income') && d.gdp_per_capita > 0 && d.co2_emissions_per_capita > 0 && d.population > 0);\n    const width = 900;\n    const height = 550;\n    const margin = {\n      top: 40,\n      right: 40,\n      bottom: 60,\n      left: 80\n    };\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove();\n    const chart = svg.attr('width', width).attr('height', height).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n\n    // Scales (adjust for zoom if applicable)\n    let x = d3.scaleLog().domain([100, d3.max(filteredData, d => d.gdp_per_capita || 100000)]).range([0, innerWidth]);\n    let y = d3.scaleLog().domain([0.1, d3.max(filteredData, d => d.co2_emissions_per_capita || 10)]).range([innerHeight, 0]);\n\n    // Apply zoom extent if set\n    if (zoomExtent) {\n      x = d3.scaleLog().domain([x.invert(zoomExtent[0][0]), x.invert(zoomExtent[1][0])]).range([0, innerWidth]);\n      y = d3.scaleLog().domain([y.invert(zoomExtent[1][1]), y.invert(zoomExtent[0][1])]).range([innerHeight, 0]);\n    }\n\n    // Axes\n    chart.append('g').attr('transform', `translate(0, ${innerHeight})`).call(d3.axisBottom(x).ticks(10, \"~s\")).append('text').attr('x', innerWidth / 2).attr('y', 40).attr('fill', '#000').attr('text-anchor', 'middle').text('GDP per capita (log scale)');\n    chart.append('g').call(d3.axisLeft(y).ticks(10, \"~s\")).append('text').attr('transform', 'rotate(-90)').attr('x', -innerHeight / 2).attr('y', -60).attr('fill', '#000').attr('text-anchor', 'middle').text('CO₂ emissions per capita (log scale)');\n\n    // Circles\n    chart.selectAll('circle.bubble').data(filteredData).enter().append('circle').attr('class', 'bubble').attr('cx', d => x(d.gdp_per_capita)).attr('cy', d => y(d.co2_emissions_per_capita)).attr('r', d => {\n      const baseR = Math.sqrt(d.population) / 1000;\n      return selectedCountries.some(c => c.entity === d.entity) ? baseR + 4 : baseR;\n    }).attr('fill', d => {\n      if (selectedCountries.some(c => c.entity === d.entity)) {\n        return d3.color(regionColorMap[d.region]).brighter(0.5);\n      }\n      return activeRegions.includes(d.region) ? regionColorMap[d.region] || '#000' : '#ccc';\n    }).attr('stroke', d => selectedCountries.some(c => c.entity === d.entity) ? regionColorMap[d.region] : 'none').attr('stroke-width', d => selectedCountries.some(c => c.entity === d.entity) ? 3 : 0).attr('opacity', 0.85).on('click', function (event, d) {\n      event.stopPropagation();\n      const isAlreadySelected = selectedCountries.some(c => c.entity === d.entity);\n      const updated = isAlreadySelected ? selectedCountries.filter(c => c.entity !== d.entity) : [...selectedCountries, d];\n      setSelectedCountries(updated);\n    });\n\n    // Country labels (only active or selected)\n    chart.selectAll('text.label').remove();\n    chart.selectAll('text.label').data(filteredData.filter(d => activeRegions.includes(d.region) || selectedCountries.some(c => c.entity === d.entity))).enter().append('text').attr('class', 'label').attr('x', d => x(d.gdp_per_capita)).attr('y', d => y(d.co2_emissions_per_capita) - 8).text(d => d.entity).attr('font-size', '10px').attr('fill', d => regionColorMap[d.region] || '#333').attr('font-weight', 'bold').attr('text-anchor', 'middle');\n\n    // D3 brush (for zoom box)\n    const brush = d3.brush().extent([[0, 0], [innerWidth, innerHeight]]).on(\"end\", ({\n      selection\n    }) => {\n      if (selection) {\n        setZoomExtent(selection);\n      }\n    });\n    chart.append(\"g\").attr(\"class\", \"brush\").call(brush);\n  }, [data, selectedYear, activeRegions, regionColorMap, selectedCountries, zoomExtent]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }, this), zoomExtent && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setZoomExtent(null),\n        children: \"\\uD83D\\uDD04 Reset Zoom\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(ScatterPlot, \"qt1ha/4WE5Eu0PnMlVRX7M9O8LU=\");\n_c = ScatterPlot;\nexport default ScatterPlot;\nvar _c;\n$RefreshReg$(_c, \"ScatterPlot\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","Fragment","_Fragment","ScatterPlot","data","selectedYear","regionColorMap","activeRegions","selectedCountries","setSelectedCountries","_s","svgRef","zoomExtent","setZoomExtent","length","filteredData","filter","d","year","entity","toLowerCase","includes","gdp_per_capita","co2_emissions_per_capita","population","width","height","margin","top","right","bottom","left","svg","select","current","selectAll","remove","chart","attr","append","innerWidth","innerHeight","x","scaleLog","domain","max","range","y","invert","call","axisBottom","ticks","text","axisLeft","enter","baseR","Math","sqrt","some","c","color","region","brighter","on","event","stopPropagation","isAlreadySelected","updated","brush","extent","selection","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","style","marginTop","onClick","_c","$RefreshReg$"],"sources":["C:/Users/dhruv/OneDrive/Desktop/CS 837 Information Vis/gdp-pollution-app/frontend/src/components/ScatterPlot.js"],"sourcesContent":["\r\n\r\n// // export default ScatterPlot;\r\n// import React, { useEffect, useRef, useState } from 'react';\r\n// import * as d3 from 'd3';\r\n\r\n// const ScatterPlot = ({\r\n//   data,\r\n//   selectedYear = 2022,\r\n//   regionColorMap,\r\n//   activeRegions,\r\n//   selectedCountries,\r\n//   setSelectedCountries\r\n// }) => {\r\n//   const svgRef = useRef();\r\n//   const [hoveredCountry, setHoveredCountry] = useState(null);\r\n//   const [hoverPos, setHoverPos] = useState({ x: 0, y: 0 });\r\n\r\n//   useEffect(() => {\r\n//     if (!data.length) return;\r\n\r\n//     const filteredData = data.filter(d =>\r\n//       d.year === selectedYear &&\r\n//       d.entity !== 'World' &&\r\n//       !d.entity.toLowerCase().includes('income') &&\r\n//       d.gdp_per_capita > 0 &&\r\n//       d.co2_emissions_per_capita > 0 &&\r\n//       d.population > 0\r\n//     );\r\n\r\n//     const width = 900;\r\n//     const height = 550;\r\n//     const margin = { top: 40, right: 40, bottom: 60, left: 80 };\r\n\r\n//     const svg = d3.select(svgRef.current);\r\n//     svg.selectAll('*').remove();\r\n\r\n//     const chart = svg\r\n//       .attr('width', width)\r\n//       .attr('height', height)\r\n//       .append('g')\r\n//       .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n//     const innerWidth = width - margin.left - margin.right;\r\n//     const innerHeight = height - margin.top - margin.bottom;\r\n\r\n//     const xScale = d3.scaleLog()\r\n//       .domain([100, d3.max(filteredData, d => d.gdp_per_capita || 100000)])\r\n//       .range([0, innerWidth]);\r\n\r\n//     const yScale = d3.scaleLog()\r\n//       .domain([0.1, d3.max(filteredData, d => d.co2_emissions_per_capita || 10)])\r\n//       .range([innerHeight, 0]);\r\n\r\n//     chart.append('g')\r\n//       .attr('transform', `translate(0, ${innerHeight})`)\r\n//       .call(d3.axisBottom(xScale).ticks(10, \"~s\"))\r\n//       .append('text')\r\n//       .attr('x', innerWidth / 2)\r\n//       .attr('y', 40)\r\n//       .attr('fill', '#000')\r\n//       .attr('text-anchor', 'middle')\r\n//       .text('GDP per capita (log scale)');\r\n\r\n//     chart.append('g')\r\n//       .call(d3.axisLeft(yScale).ticks(10, \"~s\"))\r\n//       .append('text')\r\n//       .attr('transform', 'rotate(-90)')\r\n//       .attr('x', -innerHeight / 2)\r\n//       .attr('y', -60)\r\n//       .attr('fill', '#000')\r\n//       .attr('text-anchor', 'middle')\r\n//       .text('CO₂ emissions per capita (log scale)');\r\n\r\n//     // RING CIRCLES\r\n//     chart.selectAll('circle.ring')\r\n//       .data(filteredData.filter(d => activeRegions.includes(d.region)))\r\n//       .enter()\r\n//       .append('circle')\r\n//       .attr('class', 'ring')\r\n//       .attr('cx', d => xScale(d.gdp_per_capita || 100))\r\n//       .attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1))\r\n//       .attr('r', d => Math.sqrt(d.population) / 1000 + 4)\r\n//       .attr('fill', 'none')\r\n//       .attr('stroke', d => regionColorMap[d.region] || '#000')\r\n//       .attr('stroke-width', 2)\r\n//       .attr('opacity', 1);\r\n\r\n//     // MAIN CIRCLES\r\n//     chart.selectAll('circle.bubble')\r\n//       .data(filteredData)\r\n//       .enter()\r\n//       .append('circle')\r\n//       .attr('class', 'bubble')\r\n//       .attr('cx', d => xScale(d.gdp_per_capita || 100))\r\n//       .attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1))\r\n//       .attr('r', d => {\r\n//         const baseR = Math.sqrt(d.population) / 1000;\r\n//         return selectedCountries.some(c => c.entity === d.entity) ? baseR + 4 : baseR;\r\n//       })\r\n//       .attr('fill', d => {\r\n//         if (selectedCountries.some(c => c.entity === d.entity)) {\r\n//           return d3.color(regionColorMap[d.region]).brighter(0.5);\r\n//         }\r\n//         return activeRegions.includes(d.region)\r\n//           ? regionColorMap[d.region] || '#000'\r\n//           : '#ccc';\r\n//       })\r\n//       .attr('stroke', d =>\r\n//         selectedCountries.some(c => c.entity === d.entity)\r\n//           ? regionColorMap[d.region]\r\n//           : 'none'\r\n//       )\r\n//       .attr('stroke-width', d =>\r\n//         selectedCountries.some(c => c.entity === d.entity) ? 3 : 0\r\n//       )\r\n//       .attr('opacity', 0.85)\r\n//       .on('mouseover', function (event, d) {\r\n//         setHoveredCountry(d);\r\n//         setHoverPos({ x: event.pageX + 10, y: event.pageY - 28 });\r\n\r\n//         d3.select(this)\r\n//           .attr('stroke', regionColorMap[d.region] || '#000')\r\n//           .attr('stroke-width', 3)\r\n//           .attr('fill', d3.color(regionColorMap[d.region]).brighter(0.5))\r\n//           .attr('r', Math.sqrt(d.population) / 1000 + 4);\r\n//       })\r\n//       .on('mouseout', function (event, d) {\r\n//         setHoveredCountry(null);\r\n\r\n//         const baseR = Math.sqrt(d.population) / 1000;\r\n//         const isSelected = selectedCountries.some(c => c.entity === d.entity);\r\n\r\n//         d3.select(this)\r\n//           .attr('r', isSelected ? baseR + 4 : baseR)\r\n//           .attr('stroke', isSelected ? regionColorMap[d.region] : 'none')\r\n//           .attr('stroke-width', isSelected ? 3 : 0)\r\n//           .attr('fill', () => {\r\n//             if (isSelected) {\r\n//               return d3.color(regionColorMap[d.region]).brighter(0.5);\r\n//             }\r\n//             return activeRegions.includes(d.region)\r\n//               ? regionColorMap[d.region] || '#000'\r\n//               : '#ccc';\r\n//           });\r\n//       })\r\n//       .on('click', function (event, d) {\r\n//         event.stopPropagation();\r\n//         const isAlreadySelected = selectedCountries.some(c => c.entity === d.entity);\r\n//         const updated = isAlreadySelected\r\n//           ? selectedCountries.filter(c => c.entity !== d.entity)\r\n//           : [...selectedCountries, d];\r\n//         setSelectedCountries(updated);\r\n//       });\r\n\r\n//     // Labels for selected countries only\r\n//     chart.selectAll('text.label').remove();\r\n\r\n//     chart.selectAll('text.label')\r\n//       .data(filteredData.filter(d =>\r\n//         activeRegions.includes(d.region) || selectedCountries.some(c => c.entity === d.entity)\r\n//       ))\r\n//       .enter()\r\n//       .append('text')\r\n//       .attr('class', 'label')\r\n//       .attr('x', d => xScale(d.gdp_per_capita || 100))\r\n//       .attr('y', d => yScale(d.co2_emissions_per_capita || 0.1) - 8)\r\n//       .text(d => d.entity)\r\n//       .attr('font-size', '10px')\r\n//       .attr('fill', d => regionColorMap[d.region] || '#333')\r\n//       .attr('font-weight', 'bold')\r\n//       .attr('text-anchor', 'middle');\r\n//   }, [data, selectedYear, activeRegions, regionColorMap, selectedCountries]);\r\n\r\n//   return (\r\n//     <>\r\n//       <svg ref={svgRef}></svg>\r\n\r\n//       {/* Hover-only tooltip card */}\r\n//       {hoveredCountry && (\r\n//         <div style={{\r\n//           position: 'absolute',\r\n//           left: `${hoverPos.x}px`,\r\n//           top: `${hoverPos.y}px`,\r\n//           background: '#fff',\r\n//           padding: '10px',\r\n//           border: '1px solid #ccc',\r\n//           borderRadius: '6px',\r\n//           boxShadow: '0 2px 6px rgba(0,0,0,0.15)',\r\n//           zIndex: 100,\r\n//           pointerEvents: 'none'\r\n//         }}>\r\n//           <strong>{hoveredCountry.entity}</strong><br />\r\n//           Year: {hoveredCountry.year}<br />\r\n//           GDP per capita: ${Math.round(hoveredCountry.gdp_per_capita)}<br />\r\n//           CO₂ per capita: {hoveredCountry.co2_emissions_per_capita.toFixed(2)} t<br />\r\n//           Population: {hoveredCountry.population.toLocaleString()}\r\n//         </div>\r\n//       )}\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default ScatterPlot;\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst ScatterPlot = ({\r\n  data,\r\n  selectedYear = 2022,\r\n  regionColorMap,\r\n  activeRegions,\r\n  selectedCountries,\r\n  setSelectedCountries\r\n}) => {\r\n  const svgRef = useRef();\r\n  const [zoomExtent, setZoomExtent] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!data.length) return;\r\n\r\n    const filteredData = data.filter(d =>\r\n      d.year === selectedYear &&\r\n      d.entity !== 'World' &&\r\n      !d.entity.toLowerCase().includes('income') &&\r\n      d.gdp_per_capita > 0 &&\r\n      d.co2_emissions_per_capita > 0 &&\r\n      d.population > 0\r\n    );\r\n\r\n    const width = 900;\r\n    const height = 550;\r\n    const margin = { top: 40, right: 40, bottom: 60, left: 80 };\r\n\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll('*').remove();\r\n\r\n    const chart = svg\r\n      .attr('width', width)\r\n      .attr('height', height)\r\n      .append('g')\r\n      .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n    const innerWidth = width - margin.left - margin.right;\r\n    const innerHeight = height - margin.top - margin.bottom;\r\n\r\n    // Scales (adjust for zoom if applicable)\r\n    let x = d3.scaleLog()\r\n      .domain([100, d3.max(filteredData, d => d.gdp_per_capita || 100000)])\r\n      .range([0, innerWidth]);\r\n\r\n    let y = d3.scaleLog()\r\n      .domain([0.1, d3.max(filteredData, d => d.co2_emissions_per_capita || 10)])\r\n      .range([innerHeight, 0]);\r\n\r\n    // Apply zoom extent if set\r\n    if (zoomExtent) {\r\n      x = d3.scaleLog()\r\n        .domain([x.invert(zoomExtent[0][0]), x.invert(zoomExtent[1][0])])\r\n        .range([0, innerWidth]);\r\n\r\n      y = d3.scaleLog()\r\n        .domain([y.invert(zoomExtent[1][1]), y.invert(zoomExtent[0][1])])\r\n        .range([innerHeight, 0]);\r\n    }\r\n\r\n    // Axes\r\n    chart.append('g')\r\n      .attr('transform', `translate(0, ${innerHeight})`)\r\n      .call(d3.axisBottom(x).ticks(10, \"~s\"))\r\n      .append('text')\r\n      .attr('x', innerWidth / 2)\r\n      .attr('y', 40)\r\n      .attr('fill', '#000')\r\n      .attr('text-anchor', 'middle')\r\n      .text('GDP per capita (log scale)');\r\n\r\n    chart.append('g')\r\n      .call(d3.axisLeft(y).ticks(10, \"~s\"))\r\n      .append('text')\r\n      .attr('transform', 'rotate(-90)')\r\n      .attr('x', -innerHeight / 2)\r\n      .attr('y', -60)\r\n      .attr('fill', '#000')\r\n      .attr('text-anchor', 'middle')\r\n      .text('CO₂ emissions per capita (log scale)');\r\n\r\n    // Circles\r\n    chart.selectAll('circle.bubble')\r\n      .data(filteredData)\r\n      .enter()\r\n      .append('circle')\r\n      .attr('class', 'bubble')\r\n      .attr('cx', d => x(d.gdp_per_capita))\r\n      .attr('cy', d => y(d.co2_emissions_per_capita))\r\n      .attr('r', d => {\r\n        const baseR = Math.sqrt(d.population) / 1000;\r\n        return selectedCountries.some(c => c.entity === d.entity) ? baseR + 4 : baseR;\r\n      })\r\n      .attr('fill', d => {\r\n        if (selectedCountries.some(c => c.entity === d.entity)) {\r\n          return d3.color(regionColorMap[d.region]).brighter(0.5);\r\n        }\r\n        return activeRegions.includes(d.region)\r\n          ? regionColorMap[d.region] || '#000'\r\n          : '#ccc';\r\n      })\r\n      .attr('stroke', d =>\r\n        selectedCountries.some(c => c.entity === d.entity)\r\n          ? regionColorMap[d.region]\r\n          : 'none'\r\n      )\r\n      .attr('stroke-width', d =>\r\n        selectedCountries.some(c => c.entity === d.entity) ? 3 : 0\r\n      )\r\n      .attr('opacity', 0.85)\r\n      .on('click', function (event, d) {\r\n        event.stopPropagation();\r\n        const isAlreadySelected = selectedCountries.some(c => c.entity === d.entity);\r\n        const updated = isAlreadySelected\r\n          ? selectedCountries.filter(c => c.entity !== d.entity)\r\n          : [...selectedCountries, d];\r\n        setSelectedCountries(updated);\r\n      });\r\n\r\n    // Country labels (only active or selected)\r\n    chart.selectAll('text.label').remove();\r\n    chart.selectAll('text.label')\r\n      .data(filteredData.filter(d =>\r\n        activeRegions.includes(d.region) ||\r\n        selectedCountries.some(c => c.entity === d.entity)\r\n      ))\r\n      .enter()\r\n      .append('text')\r\n      .attr('class', 'label')\r\n      .attr('x', d => x(d.gdp_per_capita))\r\n      .attr('y', d => y(d.co2_emissions_per_capita) - 8)\r\n      .text(d => d.entity)\r\n      .attr('font-size', '10px')\r\n      .attr('fill', d => regionColorMap[d.region] || '#333')\r\n      .attr('font-weight', 'bold')\r\n      .attr('text-anchor', 'middle');\r\n\r\n    // D3 brush (for zoom box)\r\n    const brush = d3.brush()\r\n      .extent([[0, 0], [innerWidth, innerHeight]])\r\n      .on(\"end\", ({ selection }) => {\r\n        if (selection) {\r\n          setZoomExtent(selection);\r\n        }\r\n      });\r\n\r\n    chart.append(\"g\")\r\n      .attr(\"class\", \"brush\")\r\n      .call(brush);\r\n\r\n  }, [data, selectedYear, activeRegions, regionColorMap, selectedCountries, zoomExtent]);\r\n\r\n  return (\r\n    <>\r\n      <svg ref={svgRef}></svg>\r\n      {zoomExtent && (\r\n        <div style={{ marginTop: '10px' }}>\r\n          <button onClick={() => setZoomExtent(null)}>\r\n            🔄 Reset Zoom\r\n          </button>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ScatterPlot;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}