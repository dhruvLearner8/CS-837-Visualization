{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dhruv\\\\OneDrive\\\\Desktop\\\\CS 837 Information Vis\\\\gdp-pollution-app\\\\frontend\\\\src\\\\components\\\\Home.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useMemo } from 'react';\n// import axios from 'axios';\n// import ScatterPlot from './ScatterPlot';\n// import CountrySelector from './CountrySelector';\n// import MiniTrendChart from './MiniTrendChart';\n// import * as d3 from 'd3';\n\n// const regionList = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'];\n\n// const regionColorMap = {};\n// regionList.forEach((region, i) => {\n//   regionColorMap[region] = d3.schemeTableau10[i];\n// });\n\n// const Home = () => {\n//   const [data, setData] = useState([]);\n//   const [selectedYear, setSelectedYear] = useState(2022);\n//   const [yearRange, setYearRange] = useState({ min: 1950, max: 2022 });\n//   const [activeRegions, setActiveRegions] = useState([]);\n//   const [selectedCountries, setSelectedCountries] = useState([]);\n//   const [isPlaying, setIsPlaying] = useState(false);\n//   const [intervalId, setIntervalId] = useState(null);\n//   const [showCountrySelector, setShowCountrySelector] = useState(false);\n//   const [zoomMode, setZoomMode] = useState(false);\n\n//   const [hoveredCountry, setHoveredCountry] = useState(null);\n//   const [hoverTrendData, setHoverTrendData] = useState([]);\n//   const [hoverPos, setHoverPos] = useState({ x: 0, y: 0 });\n\n//   const countryTrendMap = useMemo(() => {\n//     const map = {};\n//     data.forEach(d => {\n//       if (!map[d.entity]) map[d.entity] = [];\n//       map[d.entity].push({ year: d.year, co2: d.co2_emissions_per_capita });\n//     });\n//     return map;\n//   }, [data]);\n\n//   const startAnimation = () => {\n//     if (!isPlaying) {\n//       const id = setInterval(() => {\n//         setSelectedYear(prev => {\n//           const nextYear = prev + 1;\n//           if (nextYear > yearRange.max) {\n//             clearInterval(id);\n//             setIsPlaying(false);\n//             return yearRange.max;\n//           }\n//           return nextYear;\n//         });\n//       }, 100);\n//       setIntervalId(id);\n//       setIsPlaying(true);\n//     }\n//   };\n\n//   const stopAnimation = () => {\n//     clearInterval(intervalId);\n//     setIsPlaying(false);\n//   };\n\n//   const toggleAnimation = () => {\n//     isPlaying ? stopAnimation() : startAnimation();\n//   };\n\n//   useEffect(() => {\n//     axios.get('http://localhost:5000/api/data')\n//       .then(response => {\n//         setData(response.data);\n//         setYearRange({ min: 1800, max: 2022 });\n//       })\n//       .catch(error => console.error('Error fetching data:', error));\n\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   const toggleRegion = (region) => {\n//     setActiveRegions(prev =>\n//       prev.includes(region)\n//         ? prev.filter(r => r !== region)\n//         : [...prev, region]\n//     );\n//   };\n\n//   const toggleCountry = (country) => {\n//     const exists = selectedCountries.find(c => c.entity === country.entity);\n//     if (exists) {\n//       setSelectedCountries(prev => prev.filter(c => c.entity !== country.entity));\n//     } else {\n//       setSelectedCountries(prev => [...prev, country]);\n//     }\n//   };\n\n//   return (\n//     <div style={{ padding: '20px', position: 'relative' }}>\n//       <h1>GDP vs Pollution Visualization</h1>\n\n//       {/* Zoom Toggle */}\n//       <div style={{ marginBottom: '12px', display: 'flex', gap: '10px', alignItems: 'center' }}>\n//         <button\n//           onClick={() => setZoomMode(!zoomMode)}\n//           style={{\n//             padding: '8px 12px',\n//             backgroundColor: zoomMode ? '#007bff' : '#ccc',\n//             color: '#fff',\n//             border: 'none',\n//             borderRadius: '4px',\n//             cursor: 'pointer'\n//           }}\n//         >\n//           {zoomMode ? 'üß≠ Zoom Mode: ON' : 'üîç Enable Zoom Mode'}\n//         </button>\n//       </div>\n\n//       <div style={{ maxWidth: '1100px', margin: '0 auto', display: 'flex', position: 'relative' }}>\n//         {/* Chart */}\n//         <div style={{ flex: 1 }}>\n//           <ScatterPlot\n//             data={data}\n//             selectedYear={selectedYear}\n//             regionColorMap={regionColorMap}\n//             activeRegions={activeRegions}\n//             selectedCountries={selectedCountries}\n//             setSelectedCountries={setSelectedCountries}\n//             zoomMode={zoomMode}\n//             setHoveredCountry={setHoveredCountry}\n//             setHoverTrendData={(entity) => setHoverTrendData(countryTrendMap[entity] || [])}\n//             setHoverPos={setHoverPos}\n//           />\n\n//           {/* Timeline */}\n//           <div style={{\n//             display: 'flex',\n//             alignItems: 'center',\n//             justifyContent: 'center',\n//             width: '800px',\n//             margin: '30px auto 20px auto',\n//             gap: '10px'\n//           }}>\n//             <button\n//               onClick={toggleAnimation}\n//               style={{\n//                 width: '40px',\n//                 padding: '8px',\n//                 fontSize: '14px',\n//                 color: 'grey',\n//                 border: '1px solid #999',\n//                 borderRadius: '4px',\n//                 cursor: 'pointer'\n//               }}\n//             >\n//               {isPlaying ? '‚ùö‚ùö' : '‚ñ∂'}\n//             </button>\n\n//             <input\n//               type=\"range\"\n//               min={yearRange.min}\n//               max={yearRange.max}\n//               value={selectedYear}\n//               onChange={(e) => setSelectedYear(parseInt(e.target.value))}\n//               style={{\n//                 flex: 1,\n//                 height: '6px',\n//                 background: '#ccc',\n//                 borderRadius: '3px',\n//                 appearance: 'none',\n//                 WebkitAppearance: 'none',\n//                 outline: 'none',\n//                 cursor: 'pointer',\n//                 accentColor: 'grey'\n//               }}\n//             />\n//           </div>\n//         </div>\n\n//         {/* Right Panel: Region Legend + Mini Chart */}\n//         <div style={{ marginLeft: '30px', width: '180px' }}>\n//           <h4 style={{ marginBottom: '12px' }}>Regions</h4>\n//           <form>\n//             {regionList.map(region => (\n//               <label key={region} style={{ display: 'flex', alignItems: 'center', marginBottom: '10px', cursor: 'pointer' }}>\n//                 <input\n//                   type=\"checkbox\"\n//                   checked={activeRegions.includes(region)}\n//                   onChange={() => toggleRegion(region)}\n//                   style={{\n//                     appearance: 'none',\n//                     WebkitAppearance: 'none',\n//                     width: '18px',\n//                     height: '18px',\n//                     borderRadius: '4px',\n//                     backgroundColor: activeRegions.includes(region)\n//                       ? regionColorMap[region]\n//                       : '#fff',\n//                     border: `2px solid ${regionColorMap[region]}`,\n//                     marginRight: '8px',\n//                     cursor: 'pointer'\n//                   }}\n//                 />\n//                 <span>{region}</span>\n//               </label>\n//             ))}\n//           </form>\n\n//           {/* Country selector + reset */}\n//           <div style={{ marginTop: '20px', display: 'flex', flexDirection: 'column', gap: '10px' }}>\n//             <button onClick={() => setShowCountrySelector(true)}>+ Select Countries</button>\n//             <button\n//               onClick={() => {\n//                 setSelectedCountries([]);\n//                 setActiveRegions([]);\n//               }}\n//               style={{\n//                 backgroundColor: '#f44336',\n//                 color: 'white',\n//                 border: 'none',\n//                 padding: '8px',\n//                 borderRadius: '4px',\n//                 cursor: 'pointer'\n//               }}\n//             >\n//               Reset Selections\n//             </button>\n//           </div>\n\n//           {/* Mini Chart Below Region Legend */}\n//           {hoveredCountry && hoverTrendData.length > 0 && (\n//             <div style={{ marginTop: '30px' }}>\n//               <MiniTrendChart\n//                 country={hoveredCountry.entity}\n//                 data={hoverTrendData}\n//                 color={regionColorMap[hoveredCountry.region] || '#000'}\n//               />\n//             </div>\n//           )}\n//         </div>\n\n//         {/* Floating Hover Card (Moved from ScatterPlot) */}\n//         {!zoomMode && hoveredCountry && (\n//           <div style={{\n//             position: 'absolute',\n//             left: `${hoverPos.x}px`,\n//             top: `${hoverPos.y}px`,\n//             background: '#fff',\n//             padding: '10px',\n//             border: '1px solid #ccc',\n//             borderRadius: '6px',\n//             boxShadow: '0 2px 6px rgba(0,0,0,0.15)',\n//             zIndex: 100,\n//             pointerEvents: 'none'\n//           }}>\n//             <strong>{hoveredCountry.entity}</strong><br />\n//             Year: {hoveredCountry.year}<br />\n//             GDP per capita: ${Math.round(hoveredCountry.gdp_per_capita)}<br />\n//             CO‚ÇÇ per capita: {hoveredCountry.co2_emissions_per_capita.toFixed(2)} t<br />\n//             Population: {hoveredCountry.population.toLocaleString()}\n//           </div>\n//         )}\n//       </div>\n\n//       <div style={{ textAlign: 'center', fontSize: '16px', marginBottom: '10px', color: '#444' }}>\n//         Year: {selectedYear}\n//       </div>\n\n//       {/* Country Selector Panel */}\n//       {showCountrySelector && (\n//         <CountrySelector\n//           data={data}\n//           selectedCountries={selectedCountries}\n//           toggleCountry={toggleCountry}\n//           close={() => setShowCountrySelector(false)}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Home;\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport ScatterPlot from './ScatterPlot';\nimport CountrySelector from './CountrySelector';\nimport MiniTrendChart from './MiniTrendChart';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst regionList = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'];\nconst regionColorMap = {};\nregionList.forEach((region, i) => {\n  regionColorMap[region] = d3.schemeTableau10[i];\n});\nconst Home = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [selectedYear, setSelectedYear] = useState(2022);\n  const [yearRange, setYearRange] = useState({\n    min: 1950,\n    max: 2022\n  });\n  const [activeRegions, setActiveRegions] = useState([]);\n  const [selectedCountries, setSelectedCountries] = useState([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [intervalId, setIntervalId] = useState(null);\n  const [showCountrySelector, setShowCountrySelector] = useState(false);\n  const [zoomMode, setZoomMode] = useState(false);\n  const [hoveredCountry, setHoveredCountry] = useState(null);\n  const [hoverTrendData, setHoverTrendData] = useState([]);\n  const [hoverPos, setHoverPos] = useState({\n    x: 0,\n    y: 0\n  });\n  const countryTrendMap = useMemo(() => {\n    const map = {};\n    data.forEach(d => {\n      if (!map[d.entity]) map[d.entity] = [];\n      map[d.entity].push({\n        year: d.year,\n        co2: d.co2_emissions_per_capita\n      });\n    });\n    return map;\n  }, [data]);\n  const startAnimation = () => {\n    if (!isPlaying) {\n      const id = setInterval(() => {\n        setSelectedYear(prev => {\n          const nextYear = prev + 1;\n          if (nextYear > yearRange.max) {\n            clearInterval(id);\n            setIsPlaying(false);\n            return yearRange.max;\n          }\n          return nextYear;\n        });\n      }, 100);\n      setIntervalId(id);\n      setIsPlaying(true);\n    }\n  };\n  const stopAnimation = () => {\n    clearInterval(intervalId);\n    setIsPlaying(false);\n  };\n  const toggleAnimation = () => {\n    isPlaying ? stopAnimation() : startAnimation();\n  };\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/data').then(response => {\n      setData(response.data);\n      setYearRange({\n        min: 1800,\n        max: 2022\n      });\n    }).catch(error => console.error('Error fetching data:', error));\n    return () => clearInterval(intervalId);\n  }, []);\n  const toggleRegion = region => {\n    setActiveRegions(prev => prev.includes(region) ? prev.filter(r => r !== region) : [...prev, region]);\n  };\n  const toggleCountry = country => {\n    const exists = selectedCountries.find(c => c.entity === country.entity);\n    if (exists) {\n      setSelectedCountries(prev => prev.filter(c => c.entity !== country.entity));\n    } else {\n      setSelectedCountries(prev => [...prev, country]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"GDP vs Pollution Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        gap: '20px',\n        marginBottom: '20px',\n        justifyContent: 'center'\n      },\n      children: regionList.map(region => /*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          cursor: 'pointer'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: activeRegions.includes(region),\n          onChange: () => toggleRegion(region),\n          style: {\n            appearance: 'none',\n            WebkitAppearance: 'none',\n            width: '18px',\n            height: '18px',\n            borderRadius: '4px',\n            backgroundColor: activeRegions.includes(region) ? regionColorMap[region] : '#fff',\n            border: `2px solid ${regionColorMap[region]}`,\n            marginRight: '8px',\n            cursor: 'pointer'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: region\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 13\n        }, this)]\n      }, region, true, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '12px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setZoomMode(!zoomMode),\n        style: {\n          padding: '8px 12px',\n          backgroundColor: zoomMode ? '#007bff' : '#ccc',\n          color: '#fff',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: zoomMode ? 'üß≠ Zoom Mode: ON' : 'üîç Enable Zoom Mode'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(ScatterPlot, {\n          data: data,\n          selectedYear: selectedYear,\n          regionColorMap: regionColorMap,\n          activeRegions: activeRegions,\n          selectedCountries: selectedCountries,\n          setSelectedCountries: setSelectedCountries,\n          zoomMode: zoomMode,\n          setHoveredCountry: setHoveredCountry,\n          setHoverTrendData: entity => setHoverTrendData(countryTrendMap[entity] || []),\n          setHoverPos: setHoverPos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            width: '800px',\n            margin: '30px auto 20px auto',\n            gap: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleAnimation,\n            style: {\n              width: '40px',\n              padding: '8px',\n              fontSize: '14px',\n              color: 'grey',\n              border: '1px solid #999',\n              borderRadius: '4px',\n              cursor: 'pointer'\n            },\n            children: isPlaying ? '‚ùö‚ùö' : '‚ñ∂'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: yearRange.min,\n            max: yearRange.max,\n            value: selectedYear,\n            onChange: e => setSelectedYear(parseInt(e.target.value)),\n            style: {\n              flex: 1,\n              height: '6px',\n              background: '#ccc',\n              borderRadius: '3px',\n              appearance: 'none',\n              WebkitAppearance: 'none',\n              outline: 'none',\n              cursor: 'pointer',\n              accentColor: 'grey'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: 'center',\n            fontSize: '16px',\n            marginBottom: '10px',\n            color: '#444'\n          },\n          children: [\"Year: \", selectedYear]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '300px',\n          paddingLeft: '30px'\n        },\n        children: hoveredCountry && hoverTrendData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '30px'\n          },\n          children: /*#__PURE__*/_jsxDEV(MiniTrendChart, {\n            country: hoveredCountry.entity,\n            data: hoverTrendData,\n            color: regionColorMap[hoveredCountry.region] || '#000'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 9\n      }, this), !zoomMode && hoveredCountry && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          left: `${hoverPos.x}px`,\n          top: `${hoverPos.y}px`,\n          background: '#fff',\n          padding: '10px',\n          border: '1px solid #ccc',\n          borderRadius: '6px',\n          boxShadow: '0 2px 6px rgba(0,0,0,0.15)',\n          zIndex: 100,\n          pointerEvents: 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: hoveredCountry.entity\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 53\n        }, this), \"Year: \", hoveredCountry.year, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 40\n        }, this), \"GDP per capita: $\", Math.round(hoveredCountry.gdp_per_capita), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 73\n        }, this), \"CO\\u2082 per capita: \", hoveredCountry.co2_emissions_per_capita.toFixed(2), \" t\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 83\n        }, this), \"Population: \", hoveredCountry.population.toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 7\n    }, this), showCountrySelector && /*#__PURE__*/_jsxDEV(CountrySelector, {\n      data: data,\n      selectedCountries: selectedCountries,\n      toggleCountry: toggleCountry,\n      close: () => setShowCountrySelector(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 374,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"wl6WbuEdSDlBDT5/LAkRn9h0Ihs=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","axios","ScatterPlot","CountrySelector","MiniTrendChart","d3","jsxDEV","_jsxDEV","regionList","regionColorMap","forEach","region","i","schemeTableau10","Home","_s","data","setData","selectedYear","setSelectedYear","yearRange","setYearRange","min","max","activeRegions","setActiveRegions","selectedCountries","setSelectedCountries","isPlaying","setIsPlaying","intervalId","setIntervalId","showCountrySelector","setShowCountrySelector","zoomMode","setZoomMode","hoveredCountry","setHoveredCountry","hoverTrendData","setHoverTrendData","hoverPos","setHoverPos","x","y","countryTrendMap","map","d","entity","push","year","co2","co2_emissions_per_capita","startAnimation","id","setInterval","prev","nextYear","clearInterval","stopAnimation","toggleAnimation","get","then","response","catch","error","console","toggleRegion","includes","filter","r","toggleCountry","country","exists","find","c","style","padding","position","children","fileName","_jsxFileName","lineNumber","columnNumber","display","flexWrap","gap","marginBottom","justifyContent","alignItems","cursor","type","checked","onChange","appearance","WebkitAppearance","width","height","borderRadius","backgroundColor","border","marginRight","onClick","color","flex","margin","fontSize","value","e","parseInt","target","background","outline","accentColor","textAlign","paddingLeft","length","marginTop","left","top","boxShadow","zIndex","pointerEvents","Math","round","gdp_per_capita","toFixed","population","toLocaleString","close","_c","$RefreshReg$"],"sources":["C:/Users/dhruv/OneDrive/Desktop/CS 837 Information Vis/gdp-pollution-app/frontend/src/components/Home.js"],"sourcesContent":["\r\n// import React, { useState, useEffect, useMemo } from 'react';\r\n// import axios from 'axios';\r\n// import ScatterPlot from './ScatterPlot';\r\n// import CountrySelector from './CountrySelector';\r\n// import MiniTrendChart from './MiniTrendChart';\r\n// import * as d3 from 'd3';\r\n\r\n// const regionList = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'];\r\n\r\n// const regionColorMap = {};\r\n// regionList.forEach((region, i) => {\r\n//   regionColorMap[region] = d3.schemeTableau10[i];\r\n// });\r\n\r\n// const Home = () => {\r\n//   const [data, setData] = useState([]);\r\n//   const [selectedYear, setSelectedYear] = useState(2022);\r\n//   const [yearRange, setYearRange] = useState({ min: 1950, max: 2022 });\r\n//   const [activeRegions, setActiveRegions] = useState([]);\r\n//   const [selectedCountries, setSelectedCountries] = useState([]);\r\n//   const [isPlaying, setIsPlaying] = useState(false);\r\n//   const [intervalId, setIntervalId] = useState(null);\r\n//   const [showCountrySelector, setShowCountrySelector] = useState(false);\r\n//   const [zoomMode, setZoomMode] = useState(false);\r\n\r\n//   const [hoveredCountry, setHoveredCountry] = useState(null);\r\n//   const [hoverTrendData, setHoverTrendData] = useState([]);\r\n//   const [hoverPos, setHoverPos] = useState({ x: 0, y: 0 });\r\n\r\n//   const countryTrendMap = useMemo(() => {\r\n//     const map = {};\r\n//     data.forEach(d => {\r\n//       if (!map[d.entity]) map[d.entity] = [];\r\n//       map[d.entity].push({ year: d.year, co2: d.co2_emissions_per_capita });\r\n//     });\r\n//     return map;\r\n//   }, [data]);\r\n\r\n//   const startAnimation = () => {\r\n//     if (!isPlaying) {\r\n//       const id = setInterval(() => {\r\n//         setSelectedYear(prev => {\r\n//           const nextYear = prev + 1;\r\n//           if (nextYear > yearRange.max) {\r\n//             clearInterval(id);\r\n//             setIsPlaying(false);\r\n//             return yearRange.max;\r\n//           }\r\n//           return nextYear;\r\n//         });\r\n//       }, 100);\r\n//       setIntervalId(id);\r\n//       setIsPlaying(true);\r\n//     }\r\n//   };\r\n\r\n//   const stopAnimation = () => {\r\n//     clearInterval(intervalId);\r\n//     setIsPlaying(false);\r\n//   };\r\n\r\n//   const toggleAnimation = () => {\r\n//     isPlaying ? stopAnimation() : startAnimation();\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     axios.get('http://localhost:5000/api/data')\r\n//       .then(response => {\r\n//         setData(response.data);\r\n//         setYearRange({ min: 1800, max: 2022 });\r\n//       })\r\n//       .catch(error => console.error('Error fetching data:', error));\r\n\r\n//     return () => clearInterval(intervalId);\r\n//   }, []);\r\n\r\n//   const toggleRegion = (region) => {\r\n//     setActiveRegions(prev =>\r\n//       prev.includes(region)\r\n//         ? prev.filter(r => r !== region)\r\n//         : [...prev, region]\r\n//     );\r\n//   };\r\n\r\n//   const toggleCountry = (country) => {\r\n//     const exists = selectedCountries.find(c => c.entity === country.entity);\r\n//     if (exists) {\r\n//       setSelectedCountries(prev => prev.filter(c => c.entity !== country.entity));\r\n//     } else {\r\n//       setSelectedCountries(prev => [...prev, country]);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ padding: '20px', position: 'relative' }}>\r\n//       <h1>GDP vs Pollution Visualization</h1>\r\n\r\n//       {/* Zoom Toggle */}\r\n//       <div style={{ marginBottom: '12px', display: 'flex', gap: '10px', alignItems: 'center' }}>\r\n//         <button\r\n//           onClick={() => setZoomMode(!zoomMode)}\r\n//           style={{\r\n//             padding: '8px 12px',\r\n//             backgroundColor: zoomMode ? '#007bff' : '#ccc',\r\n//             color: '#fff',\r\n//             border: 'none',\r\n//             borderRadius: '4px',\r\n//             cursor: 'pointer'\r\n//           }}\r\n//         >\r\n//           {zoomMode ? 'üß≠ Zoom Mode: ON' : 'üîç Enable Zoom Mode'}\r\n//         </button>\r\n//       </div>\r\n\r\n//       <div style={{ maxWidth: '1100px', margin: '0 auto', display: 'flex', position: 'relative' }}>\r\n//         {/* Chart */}\r\n//         <div style={{ flex: 1 }}>\r\n//           <ScatterPlot\r\n//             data={data}\r\n//             selectedYear={selectedYear}\r\n//             regionColorMap={regionColorMap}\r\n//             activeRegions={activeRegions}\r\n//             selectedCountries={selectedCountries}\r\n//             setSelectedCountries={setSelectedCountries}\r\n//             zoomMode={zoomMode}\r\n//             setHoveredCountry={setHoveredCountry}\r\n//             setHoverTrendData={(entity) => setHoverTrendData(countryTrendMap[entity] || [])}\r\n//             setHoverPos={setHoverPos}\r\n//           />\r\n\r\n//           {/* Timeline */}\r\n//           <div style={{\r\n//             display: 'flex',\r\n//             alignItems: 'center',\r\n//             justifyContent: 'center',\r\n//             width: '800px',\r\n//             margin: '30px auto 20px auto',\r\n//             gap: '10px'\r\n//           }}>\r\n//             <button\r\n//               onClick={toggleAnimation}\r\n//               style={{\r\n//                 width: '40px',\r\n//                 padding: '8px',\r\n//                 fontSize: '14px',\r\n//                 color: 'grey',\r\n//                 border: '1px solid #999',\r\n//                 borderRadius: '4px',\r\n//                 cursor: 'pointer'\r\n//               }}\r\n//             >\r\n//               {isPlaying ? '‚ùö‚ùö' : '‚ñ∂'}\r\n//             </button>\r\n\r\n//             <input\r\n//               type=\"range\"\r\n//               min={yearRange.min}\r\n//               max={yearRange.max}\r\n//               value={selectedYear}\r\n//               onChange={(e) => setSelectedYear(parseInt(e.target.value))}\r\n//               style={{\r\n//                 flex: 1,\r\n//                 height: '6px',\r\n//                 background: '#ccc',\r\n//                 borderRadius: '3px',\r\n//                 appearance: 'none',\r\n//                 WebkitAppearance: 'none',\r\n//                 outline: 'none',\r\n//                 cursor: 'pointer',\r\n//                 accentColor: 'grey'\r\n//               }}\r\n//             />\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* Right Panel: Region Legend + Mini Chart */}\r\n//         <div style={{ marginLeft: '30px', width: '180px' }}>\r\n//           <h4 style={{ marginBottom: '12px' }}>Regions</h4>\r\n//           <form>\r\n//             {regionList.map(region => (\r\n//               <label key={region} style={{ display: 'flex', alignItems: 'center', marginBottom: '10px', cursor: 'pointer' }}>\r\n//                 <input\r\n//                   type=\"checkbox\"\r\n//                   checked={activeRegions.includes(region)}\r\n//                   onChange={() => toggleRegion(region)}\r\n//                   style={{\r\n//                     appearance: 'none',\r\n//                     WebkitAppearance: 'none',\r\n//                     width: '18px',\r\n//                     height: '18px',\r\n//                     borderRadius: '4px',\r\n//                     backgroundColor: activeRegions.includes(region)\r\n//                       ? regionColorMap[region]\r\n//                       : '#fff',\r\n//                     border: `2px solid ${regionColorMap[region]}`,\r\n//                     marginRight: '8px',\r\n//                     cursor: 'pointer'\r\n//                   }}\r\n//                 />\r\n//                 <span>{region}</span>\r\n//               </label>\r\n//             ))}\r\n//           </form>\r\n\r\n//           {/* Country selector + reset */}\r\n//           <div style={{ marginTop: '20px', display: 'flex', flexDirection: 'column', gap: '10px' }}>\r\n//             <button onClick={() => setShowCountrySelector(true)}>+ Select Countries</button>\r\n//             <button\r\n//               onClick={() => {\r\n//                 setSelectedCountries([]);\r\n//                 setActiveRegions([]);\r\n//               }}\r\n//               style={{\r\n//                 backgroundColor: '#f44336',\r\n//                 color: 'white',\r\n//                 border: 'none',\r\n//                 padding: '8px',\r\n//                 borderRadius: '4px',\r\n//                 cursor: 'pointer'\r\n//               }}\r\n//             >\r\n//               Reset Selections\r\n//             </button>\r\n//           </div>\r\n\r\n//           {/* Mini Chart Below Region Legend */}\r\n//           {hoveredCountry && hoverTrendData.length > 0 && (\r\n//             <div style={{ marginTop: '30px' }}>\r\n//               <MiniTrendChart\r\n//                 country={hoveredCountry.entity}\r\n//                 data={hoverTrendData}\r\n//                 color={regionColorMap[hoveredCountry.region] || '#000'}\r\n//               />\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n\r\n//         {/* Floating Hover Card (Moved from ScatterPlot) */}\r\n//         {!zoomMode && hoveredCountry && (\r\n//           <div style={{\r\n//             position: 'absolute',\r\n//             left: `${hoverPos.x}px`,\r\n//             top: `${hoverPos.y}px`,\r\n//             background: '#fff',\r\n//             padding: '10px',\r\n//             border: '1px solid #ccc',\r\n//             borderRadius: '6px',\r\n//             boxShadow: '0 2px 6px rgba(0,0,0,0.15)',\r\n//             zIndex: 100,\r\n//             pointerEvents: 'none'\r\n//           }}>\r\n//             <strong>{hoveredCountry.entity}</strong><br />\r\n//             Year: {hoveredCountry.year}<br />\r\n//             GDP per capita: ${Math.round(hoveredCountry.gdp_per_capita)}<br />\r\n//             CO‚ÇÇ per capita: {hoveredCountry.co2_emissions_per_capita.toFixed(2)} t<br />\r\n//             Population: {hoveredCountry.population.toLocaleString()}\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n\r\n//       <div style={{ textAlign: 'center', fontSize: '16px', marginBottom: '10px', color: '#444' }}>\r\n//         Year: {selectedYear}\r\n//       </div>\r\n\r\n//       {/* Country Selector Panel */}\r\n//       {showCountrySelector && (\r\n//         <CountrySelector\r\n//           data={data}\r\n//           selectedCountries={selectedCountries}\r\n//           toggleCountry={toggleCountry}\r\n//           close={() => setShowCountrySelector(false)}\r\n//         />\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Home;\r\n\r\nimport React, { useState, useEffect, useMemo } from 'react';\r\nimport axios from 'axios';\r\nimport ScatterPlot from './ScatterPlot';\r\nimport CountrySelector from './CountrySelector';\r\nimport MiniTrendChart from './MiniTrendChart';\r\nimport * as d3 from 'd3';\r\n\r\nconst regionList = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'];\r\n\r\nconst regionColorMap = {};\r\nregionList.forEach((region, i) => {\r\n  regionColorMap[region] = d3.schemeTableau10[i];\r\n});\r\n\r\nconst Home = () => {\r\n  const [data, setData] = useState([]);\r\n  const [selectedYear, setSelectedYear] = useState(2022);\r\n  const [yearRange, setYearRange] = useState({ min: 1950, max: 2022 });\r\n  const [activeRegions, setActiveRegions] = useState([]);\r\n  const [selectedCountries, setSelectedCountries] = useState([]);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [intervalId, setIntervalId] = useState(null);\r\n  const [showCountrySelector, setShowCountrySelector] = useState(false);\r\n  const [zoomMode, setZoomMode] = useState(false);\r\n  const [hoveredCountry, setHoveredCountry] = useState(null);\r\n  const [hoverTrendData, setHoverTrendData] = useState([]);\r\n  const [hoverPos, setHoverPos] = useState({ x: 0, y: 0 });\r\n\r\n  const countryTrendMap = useMemo(() => {\r\n    const map = {};\r\n    data.forEach(d => {\r\n      if (!map[d.entity]) map[d.entity] = [];\r\n      map[d.entity].push({ year: d.year, co2: d.co2_emissions_per_capita });\r\n    });\r\n    return map;\r\n  }, [data]);\r\n\r\n  const startAnimation = () => {\r\n    if (!isPlaying) {\r\n      const id = setInterval(() => {\r\n        setSelectedYear(prev => {\r\n          const nextYear = prev + 1;\r\n          if (nextYear > yearRange.max) {\r\n            clearInterval(id);\r\n            setIsPlaying(false);\r\n            return yearRange.max;\r\n          }\r\n          return nextYear;\r\n        });\r\n      }, 100);\r\n      setIntervalId(id);\r\n      setIsPlaying(true);\r\n    }\r\n  };\r\n\r\n  const stopAnimation = () => {\r\n    clearInterval(intervalId);\r\n    setIsPlaying(false);\r\n  };\r\n\r\n  const toggleAnimation = () => {\r\n    isPlaying ? stopAnimation() : startAnimation();\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios.get('http://localhost:5000/api/data')\r\n      .then(response => {\r\n        setData(response.data);\r\n        setYearRange({ min: 1800, max: 2022 });\r\n      })\r\n      .catch(error => console.error('Error fetching data:', error));\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  const toggleRegion = (region) => {\r\n    setActiveRegions(prev =>\r\n      prev.includes(region)\r\n        ? prev.filter(r => r !== region)\r\n        : [...prev, region]\r\n    );\r\n  };\r\n\r\n  const toggleCountry = (country) => {\r\n    const exists = selectedCountries.find(c => c.entity === country.entity);\r\n    if (exists) {\r\n      setSelectedCountries(prev => prev.filter(c => c.entity !== country.entity));\r\n    } else {\r\n      setSelectedCountries(prev => [...prev, country]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: '20px', position: 'relative' }}>\r\n      <h1>GDP vs Pollution Visualization</h1>\r\n\r\n      {/* Horizontal Legend */}\r\n      <div style={{\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        gap: '20px',\r\n        marginBottom: '20px',\r\n        justifyContent: 'center'\r\n      }}>\r\n        {regionList.map(region => (\r\n          <label key={region} style={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={activeRegions.includes(region)}\r\n              onChange={() => toggleRegion(region)}\r\n              style={{\r\n                appearance: 'none',\r\n                WebkitAppearance: 'none',\r\n                width: '18px',\r\n                height: '18px',\r\n                borderRadius: '4px',\r\n                backgroundColor: activeRegions.includes(region)\r\n                  ? regionColorMap[region]\r\n                  : '#fff',\r\n                border: `2px solid ${regionColorMap[region]}`,\r\n                marginRight: '8px',\r\n                cursor: 'pointer'\r\n              }}\r\n            />\r\n            <span>{region}</span>\r\n          </label>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Zoom Toggle */}\r\n      <div style={{ marginBottom: '12px' }}>\r\n        <button\r\n          onClick={() => setZoomMode(!zoomMode)}\r\n          style={{\r\n            padding: '8px 12px',\r\n            backgroundColor: zoomMode ? '#007bff' : '#ccc',\r\n            color: '#fff',\r\n            border: 'none',\r\n            borderRadius: '4px',\r\n            cursor: 'pointer'\r\n          }}\r\n        >\r\n          {zoomMode ? 'üß≠ Zoom Mode: ON' : 'üîç Enable Zoom Mode'}\r\n        </button>\r\n      </div>\r\n\r\n      {/* Main View */}\r\n      <div style={{ display: 'flex' }}>\r\n        <div style={{ flex: 1 }}>\r\n          <ScatterPlot\r\n            data={data}\r\n            selectedYear={selectedYear}\r\n            regionColorMap={regionColorMap}\r\n            activeRegions={activeRegions}\r\n            selectedCountries={selectedCountries}\r\n            setSelectedCountries={setSelectedCountries}\r\n            zoomMode={zoomMode}\r\n            setHoveredCountry={setHoveredCountry}\r\n            setHoverTrendData={(entity) => setHoverTrendData(countryTrendMap[entity] || [])}\r\n            setHoverPos={setHoverPos}\r\n          />\r\n\r\n          {/* Timeline */}\r\n          <div style={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            width: '800px',\r\n            margin: '30px auto 20px auto',\r\n            gap: '10px'\r\n          }}>\r\n            <button\r\n              onClick={toggleAnimation}\r\n              style={{\r\n                width: '40px',\r\n                padding: '8px',\r\n                fontSize: '14px',\r\n                color: 'grey',\r\n                border: '1px solid #999',\r\n                borderRadius: '4px',\r\n                cursor: 'pointer'\r\n              }}\r\n            >\r\n              {isPlaying ? '‚ùö‚ùö' : '‚ñ∂'}\r\n            </button>\r\n\r\n            <input\r\n              type=\"range\"\r\n              min={yearRange.min}\r\n              max={yearRange.max}\r\n              value={selectedYear}\r\n              onChange={(e) => setSelectedYear(parseInt(e.target.value))}\r\n              style={{\r\n                flex: 1,\r\n                height: '6px',\r\n                background: '#ccc',\r\n                borderRadius: '3px',\r\n                appearance: 'none',\r\n                WebkitAppearance: 'none',\r\n                outline: 'none',\r\n                cursor: 'pointer',\r\n                accentColor: 'grey'\r\n              }}\r\n            />\r\n          </div>\r\n\r\n          <div style={{ textAlign: 'center', fontSize: '16px', marginBottom: '10px', color: '#444' }}>\r\n            Year: {selectedYear}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Right Panel: Mini Chart + Controls */}\r\n        <div style={{ width: '300px', paddingLeft: '30px' }}>\r\n          \r\n\r\n          {/* Mini Chart Below Region Legend */}\r\n          {hoveredCountry && hoverTrendData.length > 0 && (\r\n            <div style={{ marginTop: '30px' }}>\r\n              <MiniTrendChart\r\n                country={hoveredCountry.entity}\r\n                data={hoverTrendData}\r\n                color={regionColorMap[hoveredCountry.region] || '#000'}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Floating Hover Card */}\r\n        {!zoomMode && hoveredCountry && (\r\n          <div style={{\r\n            position: 'absolute',\r\n            left: `${hoverPos.x}px`,\r\n            top: `${hoverPos.y}px`,\r\n            background: '#fff',\r\n            padding: '10px',\r\n            border: '1px solid #ccc',\r\n            borderRadius: '6px',\r\n            boxShadow: '0 2px 6px rgba(0,0,0,0.15)',\r\n            zIndex: 100,\r\n            pointerEvents: 'none'\r\n          }}>\r\n            <strong>{hoveredCountry.entity}</strong><br />\r\n            Year: {hoveredCountry.year}<br />\r\n            GDP per capita: ${Math.round(hoveredCountry.gdp_per_capita)}<br />\r\n            CO‚ÇÇ per capita: {hoveredCountry.co2_emissions_per_capita.toFixed(2)} t<br />\r\n            Population: {hoveredCountry.population.toLocaleString()}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Country Selector Panel */}\r\n      {showCountrySelector && (\r\n        <CountrySelector\r\n          data={data}\r\n          selectedCountries={selectedCountries}\r\n          toggleCountry={toggleCountry}\r\n          close={() => setShowCountrySelector(false)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n\r\n"],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}