{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dhruv\\\\OneDrive\\\\Desktop\\\\CS 837 Information Vis\\\\gdp-pollution-app\\\\frontend\\\\src\\\\components\\\\MultiTrendCharts.js\";\nimport React from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst chartHeight = 100;\nconst chartWidth = 320;\nconst margin = {\n  top: 20,\n  right: 20,\n  bottom: 30,\n  left: 40\n};\nconst metrics = [{\n  key: 'co2',\n  label: 'CO₂ per Capita (t)'\n}, {\n  key: 'gdp',\n  label: 'GDP per Capita ($)'\n}, {\n  key: 'population',\n  label: 'Population'\n}];\nconst MultiTrendCharts = ({\n  selectedCountries,\n  trendMap,\n  regionColorMap\n}) => {\n  if (selectedCountries.length === 0) return null;\n\n  // Determine global x range (years)\n  const allYears = trendMap[selectedCountries[0].entity].map(d => d.year);\n  const xScale = d3.scaleLinear().domain(d3.extent(allYears)).range([margin.left, chartWidth - margin.right]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: metrics.map(metric => {\n      // Determine Y scale for this metric\n      const allValues = selectedCountries.flatMap(country => trendMap[country.entity].map(d => d[metric.key]));\n      const yScale = d3.scaleLinear().domain([0, d3.max(allValues)]).nice().range([chartHeight - margin.bottom, margin.top]);\n      const line = d3.line().x(d => xScale(d.year)).y(d => yScale(d[metric.key]));\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '20px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: chartWidth,\n          height: chartHeight,\n          children: [/*#__PURE__*/_jsxDEV(\"text\", {\n            x: chartWidth / 2,\n            y: 12,\n            textAnchor: \"middle\",\n            fontSize: \"12\",\n            fill: \"#333\",\n            children: metric.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this), yScale.ticks(3).map((tick, i) => /*#__PURE__*/_jsxDEV(\"g\", {\n            children: [/*#__PURE__*/_jsxDEV(\"text\", {\n              x: margin.left - 6,\n              y: yScale(tick),\n              textAnchor: \"end\",\n              fontSize: \"10\",\n              fill: \"#444\",\n              alignmentBaseline: \"middle\",\n              children: tick.toLocaleString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n              x1: margin.left,\n              x2: chartWidth - margin.right,\n              y1: yScale(tick),\n              y2: yScale(tick),\n              stroke: \"#ccc\",\n              strokeDasharray: \"2 2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 19\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this)), selectedCountries.map(country => /*#__PURE__*/_jsxDEV(\"path\", {\n            d: line(trendMap[country.entity]),\n            fill: \"none\",\n            stroke: regionColorMap[country.region] || '#000',\n            strokeWidth: 2\n          }, country.entity, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)\n      }, metric.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_c = MultiTrendCharts;\nexport default MultiTrendCharts;\nvar _c;\n$RefreshReg$(_c, \"MultiTrendCharts\");","map":{"version":3,"names":["React","d3","jsxDEV","_jsxDEV","chartHeight","chartWidth","margin","top","right","bottom","left","metrics","key","label","MultiTrendCharts","selectedCountries","trendMap","regionColorMap","length","allYears","entity","map","d","year","xScale","scaleLinear","domain","extent","range","children","metric","allValues","flatMap","country","yScale","max","nice","line","x","y","style","marginBottom","width","height","textAnchor","fontSize","fill","fileName","_jsxFileName","lineNumber","columnNumber","ticks","tick","i","alignmentBaseline","toLocaleString","x1","x2","y1","y2","stroke","strokeDasharray","region","strokeWidth","_c","$RefreshReg$"],"sources":["C:/Users/dhruv/OneDrive/Desktop/CS 837 Information Vis/gdp-pollution-app/frontend/src/components/MultiTrendCharts.js"],"sourcesContent":["import React from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst chartHeight = 100;\r\nconst chartWidth = 320;\r\nconst margin = { top: 20, right: 20, bottom: 30, left: 40 };\r\n\r\nconst metrics = [\r\n  { key: 'co2', label: 'CO₂ per Capita (t)' },\r\n  { key: 'gdp', label: 'GDP per Capita ($)' },\r\n  { key: 'population', label: 'Population' }\r\n];\r\n\r\nconst MultiTrendCharts = ({ selectedCountries, trendMap, regionColorMap }) => {\r\n  if (selectedCountries.length === 0) return null;\r\n\r\n  // Determine global x range (years)\r\n  const allYears = trendMap[selectedCountries[0].entity].map(d => d.year);\r\n  const xScale = d3.scaleLinear()\r\n    .domain(d3.extent(allYears))\r\n    .range([margin.left, chartWidth - margin.right]);\r\n\r\n  return (\r\n    <div>\r\n      {metrics.map(metric => {\r\n        // Determine Y scale for this metric\r\n        const allValues = selectedCountries.flatMap(country =>\r\n          trendMap[country.entity].map(d => d[metric.key])\r\n        );\r\n        const yScale = d3.scaleLinear()\r\n          .domain([0, d3.max(allValues)])\r\n          .nice()\r\n          .range([chartHeight - margin.bottom, margin.top]);\r\n\r\n        const line = d3.line()\r\n          .x(d => xScale(d.year))\r\n          .y(d => yScale(d[metric.key]));\r\n\r\n        return (\r\n          <div key={metric.key} style={{ marginBottom: '20px' }}>\r\n            <svg width={chartWidth} height={chartHeight}>\r\n              {/* Axis Labels */}\r\n              <text\r\n                x={chartWidth / 2}\r\n                y={12}\r\n                textAnchor=\"middle\"\r\n                fontSize=\"12\"\r\n                fill=\"#333\"\r\n              >\r\n                {metric.label}\r\n              </text>\r\n\r\n              {/* Y-axis ticks (3 ticks only) */}\r\n              {yScale.ticks(3).map((tick, i) => (\r\n                <g key={i}>\r\n                  <text\r\n                    x={margin.left - 6}\r\n                    y={yScale(tick)}\r\n                    textAnchor=\"end\"\r\n                    fontSize=\"10\"\r\n                    fill=\"#444\"\r\n                    alignmentBaseline=\"middle\"\r\n                  >\r\n                    {tick.toLocaleString()}\r\n                  </text>\r\n                  <line\r\n                    x1={margin.left}\r\n                    x2={chartWidth - margin.right}\r\n                    y1={yScale(tick)}\r\n                    y2={yScale(tick)}\r\n                    stroke=\"#ccc\"\r\n                    strokeDasharray=\"2 2\"\r\n                  />\r\n                </g>\r\n              ))}\r\n\r\n              {/* Lines */}\r\n              {selectedCountries.map(country => (\r\n                <path\r\n                  key={country.entity}\r\n                  d={line(trendMap[country.entity])}\r\n                  fill=\"none\"\r\n                  stroke={regionColorMap[country.region] || '#000'}\r\n                  strokeWidth={2}\r\n                />\r\n              ))}\r\n            </svg>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MultiTrendCharts;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}