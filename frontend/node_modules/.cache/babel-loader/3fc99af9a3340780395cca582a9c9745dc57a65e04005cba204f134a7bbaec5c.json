{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dhruv\\\\OneDrive\\\\Desktop\\\\CS 837 Information Vis\\\\gdp-pollution-app\\\\frontend\\\\src\\\\components\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport ScatterPlot from './ScatterPlot';\nimport CountrySelector from './CountrySelector';\nimport MultiTrendCharts from './MultiTrendCharts'; // 👈 NEW\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst regionList = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'];\nconst regionColorMap = {};\nregionList.forEach((region, i) => {\n  regionColorMap[region] = d3.schemeTableau10[i];\n});\nconst Home = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [selectedYear, setSelectedYear] = useState(2022);\n  const [yearRange, setYearRange] = useState({\n    min: 1950,\n    max: 2022\n  });\n  const [activeRegions, setActiveRegions] = useState([]);\n  const [selectedCountries, setSelectedCountries] = useState([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [intervalId, setIntervalId] = useState(null);\n  const [showCountrySelector, setShowCountrySelector] = useState(false);\n  const [zoomMode, setZoomMode] = useState(false);\n  const [hoveredCountry, setHoveredCountry] = useState(null);\n  const [hoverPos, setHoverPos] = useState({\n    x: 0,\n    y: 0\n  });\n\n  // Expanded trend map with all 3 metrics\n  const countryTrendMap = useMemo(() => {\n    const map = {};\n    data.forEach(d => {\n      if (!map[d.entity]) map[d.entity] = [];\n      map[d.entity].push({\n        year: d.year,\n        co2: d.co2_emissions_per_capita,\n        gdp: d.gdp_per_capita,\n        population: d.population\n      });\n    });\n    return map;\n  }, [data]);\n  const startAnimation = () => {\n    if (!isPlaying) {\n      const id = setInterval(() => {\n        setSelectedYear(prev => {\n          const nextYear = prev + 1;\n          if (nextYear > yearRange.max) {\n            clearInterval(id);\n            setIsPlaying(false);\n            return yearRange.max;\n          }\n          return nextYear;\n        });\n      }, 100);\n      setIntervalId(id);\n      setIsPlaying(true);\n    }\n  };\n  const stopAnimation = () => {\n    clearInterval(intervalId);\n    setIsPlaying(false);\n  };\n  const toggleAnimation = () => {\n    isPlaying ? stopAnimation() : startAnimation();\n  };\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/data').then(response => {\n      setData(response.data);\n      setYearRange({\n        min: 1800,\n        max: 2022\n      });\n    }).catch(error => console.error('Error fetching data:', error));\n    return () => clearInterval(intervalId);\n  }, []);\n  const toggleRegion = region => {\n    setActiveRegions(prev => prev.includes(region) ? prev.filter(r => r !== region) : [...prev, region]);\n  };\n  const toggleCountry = country => {\n    setSelectedCountries(prev => {\n      const exists = prev.find(c => c.entity === country.entity);\n      if (exists) {\n        // Deselect country\n        return prev.filter(c => c.entity !== country.entity);\n      } else if (prev.length < 3) {\n        // Select new country (if less than 3)\n        return [...prev, country];\n      } else {\n        // Already 3 selected — block selection\n        alert('You can only compare up to 3 countries.');\n        return prev; // no change\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"GDP vs Pollution Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        gap: '20px',\n        marginBottom: '20px'\n      },\n      children: regionList.map(region => /*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          cursor: 'pointer'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: activeRegions.includes(region),\n          onChange: () => toggleRegion(region),\n          style: {\n            appearance: 'none',\n            WebkitAppearance: 'none',\n            width: '18px',\n            height: '18px',\n            borderRadius: '4px',\n            backgroundColor: activeRegions.includes(region) ? regionColorMap[region] : '#fff',\n            border: `2px solid ${regionColorMap[region]}`,\n            marginRight: '8px',\n            cursor: 'pointer'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: region\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this)]\n      }, region, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px',\n        display: 'flex',\n        flexDirection: 'row',\n        gap: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setZoomMode(!zoomMode),\n        style: {\n          padding: '8px 12px',\n          backgroundColor: zoomMode ? '#007bff' : '#ccc',\n          color: '#fff',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: zoomMode ? '🧭 Zoom Mode: ON' : '🔍 Enable Zoom Mode'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowCountrySelector(true),\n        children: \"+ Select Countries\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setSelectedCountries([]);\n          setActiveRegions([]);\n        },\n        style: {\n          backgroundColor: '#f44336',\n          color: 'white',\n          border: 'none',\n          padding: '8px',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: \"Reset Selections\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexShrink: 0,\n          paddingLeft: '16px'\n        },\n        children: selectedCountries.length > 0 && /*#__PURE__*/_jsxDEV(MultiTrendCharts, {\n          selectedCountries: selectedCountries,\n          trendMap: countryTrendMap,\n          regionColorMap: regionColorMap\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), !zoomMode && hoveredCountry && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          left: `${hoverPos.x}px`,\n          top: `${hoverPos.y}px`,\n          background: '#fff',\n          padding: '10px',\n          border: '1px solid #ccc',\n          borderRadius: '6px',\n          boxShadow: '0 2px 6px rgba(0,0,0,0.15)',\n          zIndex: 100,\n          pointerEvents: 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: hoveredCountry.entity\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 53\n        }, this), \"Year: \", hoveredCountry.year, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 40\n        }, this), \"GDP per capita: $\", Math.round(hoveredCountry.gdp_per_capita), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 73\n        }, this), \"CO\\u2082 per capita: \", hoveredCountry.co2_emissions_per_capita.toFixed(2), \" t\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 83\n        }, this), \"Population: \", hoveredCountry.population.toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), showCountrySelector && /*#__PURE__*/_jsxDEV(CountrySelector, {\n      data: data,\n      selectedCountries: selectedCountries,\n      toggleCountry: toggleCountry,\n      close: () => setShowCountrySelector(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"RwYEHf7ZiuV+P2pZTRFTSaDr//4=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","axios","ScatterPlot","CountrySelector","MultiTrendCharts","d3","jsxDEV","_jsxDEV","regionList","regionColorMap","forEach","region","i","schemeTableau10","Home","_s","data","setData","selectedYear","setSelectedYear","yearRange","setYearRange","min","max","activeRegions","setActiveRegions","selectedCountries","setSelectedCountries","isPlaying","setIsPlaying","intervalId","setIntervalId","showCountrySelector","setShowCountrySelector","zoomMode","setZoomMode","hoveredCountry","setHoveredCountry","hoverPos","setHoverPos","x","y","countryTrendMap","map","d","entity","push","year","co2","co2_emissions_per_capita","gdp","gdp_per_capita","population","startAnimation","id","setInterval","prev","nextYear","clearInterval","stopAnimation","toggleAnimation","get","then","response","catch","error","console","toggleRegion","includes","filter","r","toggleCountry","country","exists","find","c","length","alert","style","padding","position","children","fileName","_jsxFileName","lineNumber","columnNumber","display","flexWrap","gap","marginBottom","alignItems","cursor","type","checked","onChange","appearance","WebkitAppearance","width","height","borderRadius","backgroundColor","border","marginRight","marginTop","flexDirection","onClick","color","flexShrink","paddingLeft","trendMap","left","top","background","boxShadow","zIndex","pointerEvents","Math","round","toFixed","toLocaleString","close","_c","$RefreshReg$"],"sources":["C:/Users/dhruv/OneDrive/Desktop/CS 837 Information Vis/gdp-pollution-app/frontend/src/components/Home.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\r\nimport axios from 'axios';\r\nimport ScatterPlot from './ScatterPlot';\r\nimport CountrySelector from './CountrySelector';\r\nimport MultiTrendCharts from './MultiTrendCharts'; // 👈 NEW\r\nimport * as d3 from 'd3';\r\n\r\nconst regionList = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'];\r\n\r\nconst regionColorMap = {};\r\nregionList.forEach((region, i) => {\r\n  regionColorMap[region] = d3.schemeTableau10[i];\r\n});\r\n\r\nconst Home = () => {\r\n  const [data, setData] = useState([]);\r\n  const [selectedYear, setSelectedYear] = useState(2022);\r\n  const [yearRange, setYearRange] = useState({ min: 1950, max: 2022 });\r\n  const [activeRegions, setActiveRegions] = useState([]);\r\n  const [selectedCountries, setSelectedCountries] = useState([]);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [intervalId, setIntervalId] = useState(null);\r\n  const [showCountrySelector, setShowCountrySelector] = useState(false);\r\n  const [zoomMode, setZoomMode] = useState(false);\r\n  const [hoveredCountry, setHoveredCountry] = useState(null);\r\n  const [hoverPos, setHoverPos] = useState({ x: 0, y: 0 });\r\n\r\n  // Expanded trend map with all 3 metrics\r\n  const countryTrendMap = useMemo(() => {\r\n    const map = {};\r\n    data.forEach(d => {\r\n      if (!map[d.entity]) map[d.entity] = [];\r\n      map[d.entity].push({\r\n        year: d.year,\r\n        co2: d.co2_emissions_per_capita,\r\n        gdp: d.gdp_per_capita,\r\n        population: d.population\r\n      });\r\n    });\r\n    return map;\r\n  }, [data]);\r\n\r\n  const startAnimation = () => {\r\n    if (!isPlaying) {\r\n      const id = setInterval(() => {\r\n        setSelectedYear(prev => {\r\n          const nextYear = prev + 1;\r\n          if (nextYear > yearRange.max) {\r\n            clearInterval(id);\r\n            setIsPlaying(false);\r\n            return yearRange.max;\r\n          }\r\n          return nextYear;\r\n        });\r\n      }, 100);\r\n      setIntervalId(id);\r\n      setIsPlaying(true);\r\n    }\r\n  };\r\n\r\n  const stopAnimation = () => {\r\n    clearInterval(intervalId);\r\n    setIsPlaying(false);\r\n  };\r\n\r\n  const toggleAnimation = () => {\r\n    isPlaying ? stopAnimation() : startAnimation();\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios.get('http://localhost:5000/api/data')\r\n      .then(response => {\r\n        setData(response.data);\r\n        setYearRange({ min: 1800, max: 2022 });\r\n      })\r\n      .catch(error => console.error('Error fetching data:', error));\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  const toggleRegion = (region) => {\r\n    setActiveRegions(prev =>\r\n      prev.includes(region)\r\n        ? prev.filter(r => r !== region)\r\n        : [...prev, region]\r\n    );\r\n  };\r\n  const toggleCountry = (country) => {\r\n    setSelectedCountries(prev => {\r\n      const exists = prev.find(c => c.entity === country.entity);\r\n      \r\n      if (exists) {\r\n        // Deselect country\r\n        return prev.filter(c => c.entity !== country.entity);\r\n      } else if (prev.length < 3) {\r\n        // Select new country (if less than 3)\r\n        return [...prev, country];\r\n      } else {\r\n        // Already 3 selected — block selection\r\n        alert('You can only compare up to 3 countries.');\r\n        return prev; // no change\r\n      }\r\n    });\r\n  };\r\n  \r\n  \r\n\r\n  return (\r\n    <div style={{ padding: '20px', position: 'relative' }}>\r\n      <h1>GDP vs Pollution Visualization</h1>\r\n\r\n      {/* Horizontal Legend */}\r\n      <div style={{\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        gap: '20px',\r\n        marginBottom: '20px'\r\n      }}>\r\n        {regionList.map(region => (\r\n          <label key={region} style={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={activeRegions.includes(region)}\r\n              onChange={() => toggleRegion(region)}\r\n              style={{\r\n                appearance: 'none',\r\n                WebkitAppearance: 'none',\r\n                width: '18px',\r\n                height: '18px',\r\n                borderRadius: '4px',\r\n                backgroundColor: activeRegions.includes(region)\r\n                  ? regionColorMap[region]\r\n                  : '#fff',\r\n                border: `2px solid ${regionColorMap[region]}`,\r\n                marginRight: '8px',\r\n                cursor: 'pointer'\r\n              }}\r\n            />\r\n            <span>{region}</span>\r\n          </label>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Controls */}\r\n      <div style={{ marginTop: '20px', display: 'flex', flexDirection: 'row', gap: '10px' }}>\r\n        <button\r\n          onClick={() => setZoomMode(!zoomMode)}\r\n          style={{\r\n            padding: '8px 12px',\r\n            backgroundColor: zoomMode ? '#007bff' : '#ccc',\r\n            color: '#fff',\r\n            border: 'none',\r\n            borderRadius: '4px',\r\n            cursor: 'pointer'\r\n          }}\r\n        >\r\n          {zoomMode ? '🧭 Zoom Mode: ON' : '🔍 Enable Zoom Mode'}\r\n        </button>\r\n        <button onClick={() => setShowCountrySelector(true)}>+ Select Countries</button>\r\n        <button\r\n          onClick={() => {\r\n            setSelectedCountries([]);\r\n            setActiveRegions([]);\r\n          }}\r\n          style={{\r\n            backgroundColor: '#f44336',\r\n            color: 'white',\r\n            border: 'none',\r\n            padding: '8px',\r\n            borderRadius: '4px',\r\n            cursor: 'pointer'\r\n          }}\r\n        >\r\n          Reset Selections\r\n        </button>\r\n      </div>\r\n\r\n     \r\n      <div style={{ display: 'flex' }}>\r\n        {/* <div style={{ flex: 1 }}>\r\n          <ScatterPlot\r\n            data={data}\r\n            selectedYear={selectedYear}\r\n            regionColorMap={regionColorMap}\r\n            activeRegions={activeRegions}\r\n            selectedCountries={selectedCountries}\r\n            setSelectedCountries={setSelectedCountries}\r\n            zoomMode={zoomMode}\r\n            setHoveredCountry={setHoveredCountry}\r\n            setHoverPos={setHoverPos}\r\n          />\r\n\r\n        \r\n          <div style={{\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            width: '800px',\r\n            margin: '30px auto 20px auto',\r\n            gap: '10px'\r\n          }}>\r\n            <button\r\n              onClick={toggleAnimation}\r\n              style={{\r\n                width: '40px',\r\n                padding: '8px',\r\n                fontSize: '14px',\r\n                color: 'grey',\r\n                border: '1px solid #999',\r\n                borderRadius: '4px',\r\n                cursor: 'pointer'\r\n              }}\r\n            >\r\n              {isPlaying ? '❚❚' : '▶'}\r\n            </button>\r\n\r\n            <input\r\n              type=\"range\"\r\n              min={yearRange.min}\r\n              max={yearRange.max}\r\n              value={selectedYear}\r\n              onChange={(e) => setSelectedYear(parseInt(e.target.value))}\r\n              style={{\r\n                flex: 1,\r\n                height: '6px',\r\n                background: '#ccc',\r\n                borderRadius: '3px',\r\n                appearance: 'none',\r\n                WebkitAppearance: 'none',\r\n                outline: 'none',\r\n                cursor: 'pointer',\r\n                accentColor: 'grey'\r\n              }}\r\n            />\r\n          </div>\r\n\r\n          <div style={{ textAlign: 'center', fontSize: '16px', marginBottom: '10px', color: '#444' }}>\r\n            Year: {selectedYear}\r\n          </div>\r\n        </div> */}\r\n\r\n        {/* Right Panel: Mini Trend Charts */}\r\n        <div style={{ flexShrink: 0, paddingLeft: '16px' }}>\r\n          {selectedCountries.length > 0 && (\r\n            <MultiTrendCharts\r\n              selectedCountries={selectedCountries}\r\n              trendMap={countryTrendMap}\r\n              regionColorMap={regionColorMap}\r\n            />\r\n          )}\r\n        </div>\r\n\r\n        {/* Hover Card */}\r\n        {!zoomMode && hoveredCountry && (\r\n          <div style={{\r\n            position: 'absolute',\r\n            left: `${hoverPos.x}px`,\r\n            top: `${hoverPos.y}px`,\r\n            background: '#fff',\r\n            padding: '10px',\r\n            border: '1px solid #ccc',\r\n            borderRadius: '6px',\r\n            boxShadow: '0 2px 6px rgba(0,0,0,0.15)',\r\n            zIndex: 100,\r\n            pointerEvents: 'none'\r\n          }}>\r\n            <strong>{hoveredCountry.entity}</strong><br />\r\n            Year: {hoveredCountry.year}<br />\r\n            GDP per capita: ${Math.round(hoveredCountry.gdp_per_capita)}<br />\r\n            CO₂ per capita: {hoveredCountry.co2_emissions_per_capita.toFixed(2)} t<br />\r\n            Population: {hoveredCountry.population.toLocaleString()}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Country Selector Panel */}\r\n      {showCountrySelector && (\r\n        <CountrySelector\r\n          data={data}\r\n          selectedCountries={selectedCountries}\r\n          toggleCountry={toggleCountry}\r\n          close={() => setShowCountrySelector(false)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}