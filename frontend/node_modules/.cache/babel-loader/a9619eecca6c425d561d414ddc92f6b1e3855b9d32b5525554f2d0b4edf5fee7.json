{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dhruv\\\\OneDrive\\\\Desktop\\\\CS 837 Information Vis\\\\gdp-pollution-app\\\\frontend\\\\src\\\\components\\\\ScatterPlot.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ScatterPlot = ({\n  data,\n  selectedYear = 2022,\n  regionColorMap,\n  activeRegions,\n  selectedCountries,\n  setSelectedCountries,\n  zoomMode // ← NEW PROP\n}) => {\n  _s();\n  const svgRef = useRef();\n  const [zoomExtent, setZoomExtent] = useState(null);\n  const [hoveredCountry, setHoveredCountry] = useState(null);\n  const [hoverPos, setHoverPos] = useState({\n    x: 0,\n    y: 0\n  });\n  useEffect(() => {\n    if (!data.length) return;\n    const filteredData = data.filter(d => d.year === selectedYear && d.entity !== 'World' && !d.entity.toLowerCase().includes('income') && d.gdp_per_capita > 0 && d.co2_emissions_per_capita > 0 && d.population > 0);\n    const width = 900;\n    const height = 450;\n    const margin = {\n      top: 40,\n      right: 40,\n      bottom: 60,\n      left: 80\n    };\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove();\n    const chart = svg.attr('width', width).attr('height', height).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n\n    // Scales\n    let x = d3.scaleLog().domain([100, d3.max(filteredData, d => d.gdp_per_capita || 100000)]).range([0, innerWidth]);\n    let y = d3.scaleLog().domain([0.1, d3.max(filteredData, d => d.co2_emissions_per_capita || 10)]).range([innerHeight, 0]);\n    if (zoomExtent) {\n      x = d3.scaleLog().domain([x.invert(zoomExtent[0][0]), x.invert(zoomExtent[1][0])]).range([0, innerWidth]);\n      y = d3.scaleLog().domain([y.invert(zoomExtent[1][1]), y.invert(zoomExtent[0][1])]).range([innerHeight, 0]);\n    }\n\n    // Compute tick values for Y (just major log values)\n    const maxY = d3.max(filteredData, d => d.co2_emissions_per_capita || 10);\n    const yTickValues = [0.1, 1, 10, 30].filter(val => val <= maxY);\n\n    // Axes\n    chart.append('g').attr('transform', `translate(0, ${innerHeight})`).call(d3.axisBottom(x).ticks(10, \"~s\")).append('text').attr('x', innerWidth / 2).attr('y', 40).attr('fill', '#000').attr('text-anchor', 'middle').text('GDP per capita (log scale)');\n\n    // Horizontal Grid Lines (Y-axis)\n    chart.append('g').attr('class', 'grid').call(d3.axisLeft(y)\n    // ✅ Only major ticks\n    .tickSize(-innerWidth).tickFormat('') // Hide labels (grid only)\n    ).selectAll('line').attr('stroke', '#ccc').attr('stroke-dasharray', '3 3');\n    chart.append('g').call(d3.axisLeft(y).ticks(10, \"~s\")).append('text').attr('transform', 'rotate(-90)').attr('x', -innerHeight / 2).attr('y', -60).attr('fill', '#000').attr('text-anchor', 'middle').text('CO₂ emissions per capita (log scale)');\n\n    // Bubbles\n    chart.selectAll('circle.bubble').data(filteredData).enter().append('circle').attr('class', 'bubble').attr('cx', d => x(d.gdp_per_capita)).attr('cy', d => y(d.co2_emissions_per_capita)).attr('r', d => {\n      const baseR = Math.sqrt(d.population) / 1000;\n      return selectedCountries.some(c => c.entity === d.entity) ? baseR + 4 : baseR;\n    }).attr('fill', d => {\n      if (selectedCountries.some(c => c.entity === d.entity)) {\n        return d3.color(regionColorMap[d.region]).brighter(0.5);\n      }\n      return activeRegions.includes(d.region) ? regionColorMap[d.region] || '#000' : '#ccc';\n    }).attr('stroke', d => selectedCountries.some(c => c.entity === d.entity) ? regionColorMap[d.region] : 'none').attr('stroke-width', d => selectedCountries.some(c => c.entity === d.entity) ? 3 : 0).attr('opacity', 0.85).on('mouseover', function (event, d) {\n      if (!zoomMode) {\n        setHoveredCountry(d);\n        setHoverPos({\n          x: event.pageX + 10,\n          y: event.pageY - 28\n        });\n        d3.select(this).attr('stroke', regionColorMap[d.region]).attr('stroke-width', 3).attr('fill', d3.color(regionColorMap[d.region]).brighter(0.5)).attr('r', Math.sqrt(d.population) / 1000 + 4);\n      }\n    }).on('mouseout', function (event, d) {\n      setHoveredCountry(null);\n      const baseR = Math.sqrt(d.population) / 1000;\n      const isSelected = selectedCountries.some(c => c.entity === d.entity);\n      d3.select(this).attr('r', isSelected ? baseR + 4 : baseR).attr('stroke', isSelected ? regionColorMap[d.region] : 'none').attr('stroke-width', isSelected ? 3 : 0).attr('fill', () => {\n        if (isSelected) {\n          return d3.color(regionColorMap[d.region]).brighter(0.5);\n        }\n        return activeRegions.includes(d.region) ? regionColorMap[d.region] || '#000' : '#ccc';\n      });\n    }).on('click', function (event, d) {\n      if (!zoomMode) {\n        event.stopPropagation();\n        const isAlreadySelected = selectedCountries.some(c => c.entity === d.entity);\n        const updated = isAlreadySelected ? selectedCountries.filter(c => c.entity !== d.entity) : [...selectedCountries, d];\n        setSelectedCountries(updated);\n      }\n    });\n\n    // Labels\n    chart.selectAll('text.label').remove();\n    chart.selectAll('text.label').data(filteredData.filter(d => activeRegions.includes(d.region) || selectedCountries.some(c => c.entity === d.entity))).enter().append('text').attr('class', 'label').attr('x', d => x(d.gdp_per_capita)).attr('y', d => y(d.co2_emissions_per_capita) - 8).text(d => d.entity).attr('font-size', '10px').attr('fill', d => regionColorMap[d.region] || '#333').attr('font-weight', 'bold').attr('text-anchor', 'middle');\n\n    // Only enable brush if zoom mode is on\n    if (zoomMode) {\n      const brush = d3.brush().extent([[0, 0], [innerWidth, innerHeight]]).on(\"end\", ({\n        selection\n      }) => {\n        if (selection) {\n          setZoomExtent(selection);\n        }\n      });\n      chart.append(\"g\").attr(\"class\", \"brush\").call(brush);\n    }\n  }, [data, selectedYear, activeRegions, regionColorMap, selectedCountries, zoomExtent, zoomMode]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), hoveredCountry && !zoomMode && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        left: `${hoverPos.x}px`,\n        top: `${hoverPos.y}px`,\n        background: '#fff',\n        padding: '10px',\n        border: '1px solid #ccc',\n        borderRadius: '6px',\n        boxShadow: '0 2px 6px rgba(0,0,0,0.15)',\n        zIndex: 100,\n        pointerEvents: 'none'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: hoveredCountry.entity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 51\n      }, this), \"Year: \", hoveredCountry.year, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 38\n      }, this), \"GDP per capita: $\", Math.round(hoveredCountry.gdp_per_capita), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 71\n      }, this), \"CO\\u2082 per capita: \", hoveredCountry.co2_emissions_per_capita.toFixed(2), \" t\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 81\n      }, this), \"Population: \", hoveredCountry.population.toLocaleString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }, this), zoomExtent && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setZoomExtent(null),\n        children: \"\\uD83D\\uDD04 Reset Zoom\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(ScatterPlot, \"7MYxgGK6r1SaN90rfAZ5sEWTaVU=\");\n_c = ScatterPlot;\nexport default ScatterPlot;\nvar _c;\n$RefreshReg$(_c, \"ScatterPlot\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","Fragment","_Fragment","ScatterPlot","data","selectedYear","regionColorMap","activeRegions","selectedCountries","setSelectedCountries","zoomMode","_s","svgRef","zoomExtent","setZoomExtent","hoveredCountry","setHoveredCountry","hoverPos","setHoverPos","x","y","length","filteredData","filter","d","year","entity","toLowerCase","includes","gdp_per_capita","co2_emissions_per_capita","population","width","height","margin","top","right","bottom","left","svg","select","current","selectAll","remove","chart","attr","append","innerWidth","innerHeight","scaleLog","domain","max","range","invert","maxY","yTickValues","val","call","axisBottom","ticks","text","axisLeft","tickSize","tickFormat","enter","baseR","Math","sqrt","some","c","color","region","brighter","on","event","pageX","pageY","isSelected","stopPropagation","isAlreadySelected","updated","brush","extent","selection","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","style","position","background","padding","border","borderRadius","boxShadow","zIndex","pointerEvents","round","toFixed","toLocaleString","marginTop","onClick","_c","$RefreshReg$"],"sources":["C:/Users/dhruv/OneDrive/Desktop/CS 837 Information Vis/gdp-pollution-app/frontend/src/components/ScatterPlot.js"],"sourcesContent":["\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst ScatterPlot = ({\r\n  data,\r\n  selectedYear = 2022,\r\n  regionColorMap,\r\n  activeRegions,\r\n  selectedCountries,\r\n  setSelectedCountries,\r\n  zoomMode // ← NEW PROP\r\n}) => {\r\n  const svgRef = useRef();\r\n  const [zoomExtent, setZoomExtent] = useState(null);\r\n  const [hoveredCountry, setHoveredCountry] = useState(null);\r\n  const [hoverPos, setHoverPos] = useState({ x: 0, y: 0 });\r\n\r\n  useEffect(() => {\r\n    if (!data.length) return;\r\n\r\n    const filteredData = data.filter(d =>\r\n      d.year === selectedYear &&\r\n      d.entity !== 'World' &&\r\n      !d.entity.toLowerCase().includes('income') &&\r\n      d.gdp_per_capita > 0 &&\r\n      d.co2_emissions_per_capita > 0 &&\r\n      d.population > 0\r\n    );\r\n\r\n    const width = 900;\r\n    const height = 450;\r\n    const margin = { top: 40, right: 40, bottom: 60, left: 80 };\r\n\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll('*').remove();\r\n\r\n    const chart = svg\r\n      .attr('width', width)\r\n      .attr('height', height)\r\n      .append('g')\r\n      .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n    const innerWidth = width - margin.left - margin.right;\r\n    const innerHeight = height - margin.top - margin.bottom;\r\n\r\n// Scales\r\nlet x = d3.scaleLog()\r\n  .domain([100, d3.max(filteredData, d => d.gdp_per_capita || 100000)])\r\n  .range([0, innerWidth]);\r\n\r\nlet y = d3.scaleLog()\r\n  .domain([0.1, d3.max(filteredData, d => d.co2_emissions_per_capita || 10)])\r\n  .range([innerHeight, 0]);\r\n\r\nif (zoomExtent) {\r\n  x = d3.scaleLog()\r\n    .domain([x.invert(zoomExtent[0][0]), x.invert(zoomExtent[1][0])])\r\n    .range([0, innerWidth]);\r\n\r\n  y = d3.scaleLog()\r\n    .domain([y.invert(zoomExtent[1][1]), y.invert(zoomExtent[0][1])])\r\n    .range([innerHeight, 0]);\r\n}\r\n\r\n// Compute tick values for Y (just major log values)\r\nconst maxY = d3.max(filteredData, d => d.co2_emissions_per_capita || 10);\r\nconst yTickValues = [0.1, 1, 10, 30].filter(val => val <= maxY);\r\n\r\n// Axes\r\nchart.append('g')\r\n  .attr('transform', `translate(0, ${innerHeight})`)\r\n  .call(d3.axisBottom(x).ticks(10, \"~s\"))\r\n  .append('text')\r\n  .attr('x', innerWidth / 2)\r\n  .attr('y', 40)\r\n  .attr('fill', '#000')\r\n  .attr('text-anchor', 'middle')\r\n  .text('GDP per capita (log scale)');\r\n\r\n// Horizontal Grid Lines (Y-axis)\r\nchart.append('g')\r\n  .attr('class', 'grid')\r\n  .call(d3.axisLeft(y)\r\n        // ✅ Only major ticks\r\n    .tickSize(-innerWidth)\r\n    .tickFormat('')                 // Hide labels (grid only)\r\n  )\r\n  .selectAll('line')\r\n  .attr('stroke', '#ccc')\r\n  .attr('stroke-dasharray', '3 3');\r\n\r\n\r\n    chart.append('g')\r\n      .call(d3.axisLeft(y).ticks(10, \"~s\"))\r\n      .append('text')\r\n      .attr('transform', 'rotate(-90)')\r\n      .attr('x', -innerHeight / 2)\r\n      .attr('y', -60)\r\n      .attr('fill', '#000')\r\n      .attr('text-anchor', 'middle')\r\n      .text('CO₂ emissions per capita (log scale)');\r\n\r\n    // Bubbles\r\n    chart.selectAll('circle.bubble')\r\n      .data(filteredData)\r\n      .enter()\r\n      .append('circle')\r\n      .attr('class', 'bubble')\r\n      .attr('cx', d => x(d.gdp_per_capita))\r\n      .attr('cy', d => y(d.co2_emissions_per_capita))\r\n      .attr('r', d => {\r\n        const baseR = Math.sqrt(d.population) / 1000;\r\n        return selectedCountries.some(c => c.entity === d.entity) ? baseR + 4 : baseR;\r\n      })\r\n      .attr('fill', d => {\r\n        if (selectedCountries.some(c => c.entity === d.entity)) {\r\n          return d3.color(regionColorMap[d.region]).brighter(0.5);\r\n        }\r\n        return activeRegions.includes(d.region)\r\n          ? regionColorMap[d.region] || '#000'\r\n          : '#ccc';\r\n      })\r\n      .attr('stroke', d =>\r\n        selectedCountries.some(c => c.entity === d.entity)\r\n          ? regionColorMap[d.region]\r\n          : 'none'\r\n      )\r\n      .attr('stroke-width', d =>\r\n        selectedCountries.some(c => c.entity === d.entity) ? 3 : 0\r\n      )\r\n      .attr('opacity', 0.85)\r\n      .on('mouseover', function (event, d) {\r\n        if (!zoomMode) {\r\n          setHoveredCountry(d);\r\n          setHoverPos({ x: event.pageX + 10, y: event.pageY - 28 });\r\n\r\n          d3.select(this)\r\n            .attr('stroke', regionColorMap[d.region])\r\n            .attr('stroke-width', 3)\r\n            .attr('fill', d3.color(regionColorMap[d.region]).brighter(0.5))\r\n            .attr('r', Math.sqrt(d.population) / 1000 + 4);\r\n        }\r\n      })\r\n      .on('mouseout', function (event, d) {\r\n        setHoveredCountry(null);\r\n\r\n        const baseR = Math.sqrt(d.population) / 1000;\r\n        const isSelected = selectedCountries.some(c => c.entity === d.entity);\r\n\r\n        d3.select(this)\r\n          .attr('r', isSelected ? baseR + 4 : baseR)\r\n          .attr('stroke', isSelected ? regionColorMap[d.region] : 'none')\r\n          .attr('stroke-width', isSelected ? 3 : 0)\r\n          .attr('fill', () => {\r\n            if (isSelected) {\r\n              return d3.color(regionColorMap[d.region]).brighter(0.5);\r\n            }\r\n            return activeRegions.includes(d.region)\r\n              ? regionColorMap[d.region] || '#000'\r\n              : '#ccc';\r\n          });\r\n      })\r\n      .on('click', function (event, d) {\r\n        if (!zoomMode) {\r\n          event.stopPropagation();\r\n          const isAlreadySelected = selectedCountries.some(c => c.entity === d.entity);\r\n          const updated = isAlreadySelected\r\n            ? selectedCountries.filter(c => c.entity !== d.entity)\r\n            : [...selectedCountries, d];\r\n          setSelectedCountries(updated);\r\n        }\r\n      });\r\n\r\n    // Labels\r\n    chart.selectAll('text.label').remove();\r\n    chart.selectAll('text.label')\r\n      .data(filteredData.filter(d =>\r\n        activeRegions.includes(d.region) ||\r\n        selectedCountries.some(c => c.entity === d.entity)\r\n      ))\r\n      .enter()\r\n      .append('text')\r\n      .attr('class', 'label')\r\n      .attr('x', d => x(d.gdp_per_capita))\r\n      .attr('y', d => y(d.co2_emissions_per_capita) - 8)\r\n      .text(d => d.entity)\r\n      .attr('font-size', '10px')\r\n      .attr('fill', d => regionColorMap[d.region] || '#333')\r\n      .attr('font-weight', 'bold')\r\n      .attr('text-anchor', 'middle');\r\n\r\n    // Only enable brush if zoom mode is on\r\n    if (zoomMode) {\r\n      const brush = d3.brush()\r\n        .extent([[0, 0], [innerWidth, innerHeight]])\r\n        .on(\"end\", ({ selection }) => {\r\n          if (selection) {\r\n            setZoomExtent(selection);\r\n          }\r\n        });\r\n\r\n      chart.append(\"g\")\r\n        .attr(\"class\", \"brush\")\r\n        .call(brush);\r\n    }\r\n\r\n  }, [data, selectedYear, activeRegions, regionColorMap, selectedCountries, zoomExtent, zoomMode]);\r\n\r\n  return (\r\n    <>\r\n      <svg ref={svgRef}></svg>\r\n\r\n      {hoveredCountry && !zoomMode && (\r\n        <div style={{\r\n          position: 'absolute',\r\n          left: `${hoverPos.x}px`,\r\n          top: `${hoverPos.y}px`,\r\n          background: '#fff',\r\n          padding: '10px',\r\n          border: '1px solid #ccc',\r\n          borderRadius: '6px',\r\n          boxShadow: '0 2px 6px rgba(0,0,0,0.15)',\r\n          zIndex: 100,\r\n          pointerEvents: 'none'\r\n        }}>\r\n          <strong>{hoveredCountry.entity}</strong><br />\r\n          Year: {hoveredCountry.year}<br />\r\n          GDP per capita: ${Math.round(hoveredCountry.gdp_per_capita)}<br />\r\n          CO₂ per capita: {hoveredCountry.co2_emissions_per_capita.toFixed(2)} t<br />\r\n          Population: {hoveredCountry.population.toLocaleString()}\r\n        </div>\r\n      )}\r\n\r\n      {zoomExtent && (\r\n        <div style={{ marginTop: '10px' }}>\r\n          <button onClick={() => setZoomExtent(null)}>🔄 Reset Zoom</button>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ScatterPlot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}