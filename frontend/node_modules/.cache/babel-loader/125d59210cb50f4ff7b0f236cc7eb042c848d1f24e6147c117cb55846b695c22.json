{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dhruv\\\\OneDrive\\\\Desktop\\\\CS 837 Information Vis\\\\gdp-pollution-app\\\\frontend\\\\src\\\\components\\\\Home.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import ScatterPlot from './ScatterPlot';\n// import * as d3 from 'd3';\n\n// const regionList = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'];\n\n// const regionColorMap = {};\n// regionList.forEach((region, i) => {\n//   regionColorMap[region] = d3.schemeTableau10[i]; // Use d3 color scheme\n// });\n\n// const Home = () => {\n//   const [data, setData] = useState([]);\n//   const [selectedYear, setSelectedYear] = useState(2022);\n//   const [yearRange, setYearRange] = useState({ min: 1950, max: 2022 });\n//   const [activeRegions, setActiveRegions] = useState([]);\n//   const [isPlaying, setIsPlaying] = useState(false);\n//   const [intervalId, setIntervalId] = useState(null);\n//   const [selectedCountries, setSelectedCountries] = useState([]);\n\n//   const startAnimation = () => {\n//     if (!isPlaying) {\n//       const id = setInterval(() => {\n//         setSelectedYear(prev => {\n//           const nextYear = prev + 1;\n//           return nextYear > yearRange.max ? yearRange.min : nextYear;\n//         });\n//       }, 100);\n//       setIntervalId(id);\n//       setIsPlaying(true);\n//     }\n//   };\n\n//   const stopAnimation = () => {\n//     clearInterval(intervalId);\n//     setIsPlaying(false);\n//   };\n\n//   const toggleAnimation = () => {\n//     isPlaying ? stopAnimation() : startAnimation();\n//   };\n\n//   useEffect(() => {\n//     axios.get('http://localhost:5000/api/data')\n//       .then(response => {\n//         setData(response.data);\n//         const minYear = 1800;\n//         const maxYear = 2022;\n//         setYearRange({ min: minYear, max: maxYear });\n//       })\n//       .catch(error => console.error('Error fetching data:', error));\n\n//     return () => {\n//       clearInterval(intervalId);\n//     };\n//   }, []);\n\n//   const toggleRegion = (region) => {\n//     setActiveRegions(prev =>\n//       prev.includes(region)\n//         ? prev.filter(r => r !== region)\n//         : [...prev, region]\n//     );\n//   };\n\n//   return (\n//     <div style={{ padding: '20px' }}>\n//       <h1>GDP vs Pollution Visualization</h1>\n\n//       <div style={{ maxWidth: '1100px', margin: '0 auto', display: 'flex' }}>\n//         {/* Chart */}\n//         <div style={{ flex: 1 }}>\n//         <ScatterPlot\n//   data={data}\n//   selectedYear={selectedYear}\n//   regionColorMap={regionColorMap}\n//   activeRegions={activeRegions}\n//   selectedCountries={selectedCountries}\n//   setSelectedCountries={setSelectedCountries}\n// />\n\n//         </div>\n\n//         {/* Legend */}\n//         <div style={{ marginLeft: '30px', width: '180px' }}>\n//           <h4 style={{ marginBottom: '12px' }}>Regions</h4>\n//           <form>\n//           {regionList.map(region => (\n//   <label\n//     key={region}\n//     style={{\n//       display: 'flex',\n//       alignItems: 'center',\n//       marginBottom: '10px',\n//       cursor: 'pointer'\n//     }}\n//   >\n//     <input\n//       type=\"checkbox\"\n//       checked={activeRegions.includes(region)}\n//       onChange={() => toggleRegion(region)}\n//       style={{\n//         appearance: 'none',\n//         WebkitAppearance: 'none',\n//         width: '18px',\n//         height: '18px',\n//         borderRadius: '4px',\n//         border: `2px solid ${regionColorMap[region]}`,\n//         backgroundColor: activeRegions.includes(region)\n//           ? regionColorMap[region]\n//           : '#fff',\n//         marginRight: '8px',\n//         cursor: 'pointer'\n//       }}\n//     />\n//     <span\n//       style={{\n//         fontWeight: selectedCountries?.region === region ? 'bold' : 'normal'\n//       }}\n//     >\n//       {region}\n//     </span>\n//   </label>\n// ))}\n\n//           </form>\n//         </div>\n//       </div>\n\n//       {/* Year Slider */}\n//       <div style={{ marginBottom: '30px' }}>\n//         <label htmlFor=\"yearSlider\">Year: {selectedYear}</label><br />\n//         <input\n//           id=\"yearSlider\"\n//           type=\"range\"\n//           min={yearRange.min}\n//           max={yearRange.max}\n//           value={selectedYear}\n//           onChange={(e) => setSelectedYear(parseInt(e.target.value))}\n//           style={{ width: '400px' }}\n//         />\n//       </div>\n\n//       {/* Play/Pause */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <button onClick={toggleAnimation}>\n//           {isPlaying ? 'Pause ⏸️' : 'Play ▶️'}\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Home;\n\n// Home.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport ScatterPlot from './ScatterPlot';\nimport CountrySelector from './CountrySelector';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst regionList = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'];\nconst regionColorMap = {};\nregionList.forEach((region, i) => {\n  regionColorMap[region] = d3.schemeTableau10[i];\n});\nconst Home = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [selectedYear, setSelectedYear] = useState(2022);\n  const [yearRange, setYearRange] = useState({\n    min: 1950,\n    max: 2022\n  });\n  const [activeRegions, setActiveRegions] = useState([]);\n  const [selectedCountries, setSelectedCountries] = useState([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [intervalId, setIntervalId] = useState(null);\n  const [showSelector, setShowSelector] = useState(false);\n  const toggleRegion = region => {\n    setActiveRegions(prev => prev.includes(region) ? prev.filter(r => r !== region) : [...prev, region]);\n  };\n  const toggleCountry = country => {\n    setSelectedCountries(prev => {\n      const isAlready = prev.some(c => c.entity === country.entity);\n      return isAlready ? prev.filter(c => c.entity !== country.entity) : [...prev, country];\n    });\n  };\n  const startAnimation = () => {\n    if (!isPlaying) {\n      const id = setInterval(() => {\n        setSelectedYear(prev => prev + 1 > yearRange.max ? yearRange.min : prev + 1);\n      }, 100);\n      setIntervalId(id);\n      setIsPlaying(true);\n    }\n  };\n  const stopAnimation = () => {\n    clearInterval(intervalId);\n    setIsPlaying(false);\n  };\n  const toggleAnimation = () => {\n    isPlaying ? stopAnimation() : startAnimation();\n  };\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/data').then(response => {\n      setData(response.data);\n      setYearRange({\n        min: 1800,\n        max: 2022\n      });\n    }).catch(error => console.error('Error fetching data:', error));\n    return () => clearInterval(intervalId);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"GDP vs Pollution Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowSelector(true),\n      style: {\n        marginBottom: '10px'\n      },\n      children: \"Select Countries & Regions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), showSelector && /*#__PURE__*/_jsxDEV(CountrySelector, {\n      data: data,\n      activeRegions: activeRegions,\n      selectedCountries: selectedCountries,\n      toggleRegion: toggleRegion,\n      toggleCountry: toggleCountry,\n      regionList: regionList,\n      setShowSelector: setShowSelector\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: '1100px',\n        margin: '0 auto',\n        display: 'flex'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(ScatterPlot, {\n          data: data,\n          selectedYear: selectedYear,\n          regionColorMap: regionColorMap,\n          activeRegions: activeRegions,\n          selectedCountries: selectedCountries,\n          setSelectedCountries: setSelectedCountries\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '30px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"yearSlider\",\n        children: [\"Year: \", selectedYear]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 65\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"yearSlider\",\n        type: \"range\",\n        min: yearRange.min,\n        max: yearRange.max,\n        value: selectedYear,\n        onChange: e => setSelectedYear(parseInt(e.target.value)),\n        style: {\n          width: '400px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleAnimation,\n        children: isPlaying ? 'Pause ⏸️' : 'Play ▶️'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"UWffADAHl2GnmHv9kjIoqfJnzlk=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","axios","ScatterPlot","CountrySelector","d3","jsxDEV","_jsxDEV","regionList","regionColorMap","forEach","region","i","schemeTableau10","Home","_s","data","setData","selectedYear","setSelectedYear","yearRange","setYearRange","min","max","activeRegions","setActiveRegions","selectedCountries","setSelectedCountries","isPlaying","setIsPlaying","intervalId","setIntervalId","showSelector","setShowSelector","toggleRegion","prev","includes","filter","r","toggleCountry","country","isAlready","some","c","entity","startAnimation","id","setInterval","stopAnimation","clearInterval","toggleAnimation","get","then","response","catch","error","console","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","marginBottom","maxWidth","margin","display","flex","htmlFor","type","value","onChange","e","parseInt","target","width","_c","$RefreshReg$"],"sources":["C:/Users/dhruv/OneDrive/Desktop/CS 837 Information Vis/gdp-pollution-app/frontend/src/components/Home.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import ScatterPlot from './ScatterPlot';\r\n// import * as d3 from 'd3';\r\n\r\n// const regionList = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'];\r\n\r\n// const regionColorMap = {};\r\n// regionList.forEach((region, i) => {\r\n//   regionColorMap[region] = d3.schemeTableau10[i]; // Use d3 color scheme\r\n// });\r\n\r\n// const Home = () => {\r\n//   const [data, setData] = useState([]);\r\n//   const [selectedYear, setSelectedYear] = useState(2022);\r\n//   const [yearRange, setYearRange] = useState({ min: 1950, max: 2022 });\r\n//   const [activeRegions, setActiveRegions] = useState([]);\r\n//   const [isPlaying, setIsPlaying] = useState(false);\r\n//   const [intervalId, setIntervalId] = useState(null);\r\n//   const [selectedCountries, setSelectedCountries] = useState([]);\r\n\r\n//   const startAnimation = () => {\r\n//     if (!isPlaying) {\r\n//       const id = setInterval(() => {\r\n//         setSelectedYear(prev => {\r\n//           const nextYear = prev + 1;\r\n//           return nextYear > yearRange.max ? yearRange.min : nextYear;\r\n//         });\r\n//       }, 100);\r\n//       setIntervalId(id);\r\n//       setIsPlaying(true);\r\n//     }\r\n//   };\r\n\r\n//   const stopAnimation = () => {\r\n//     clearInterval(intervalId);\r\n//     setIsPlaying(false);\r\n//   };\r\n\r\n//   const toggleAnimation = () => {\r\n//     isPlaying ? stopAnimation() : startAnimation();\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     axios.get('http://localhost:5000/api/data')\r\n//       .then(response => {\r\n//         setData(response.data);\r\n//         const minYear = 1800;\r\n//         const maxYear = 2022;\r\n//         setYearRange({ min: minYear, max: maxYear });\r\n//       })\r\n//       .catch(error => console.error('Error fetching data:', error));\r\n\r\n//     return () => {\r\n//       clearInterval(intervalId);\r\n//     };\r\n//   }, []);\r\n\r\n//   const toggleRegion = (region) => {\r\n//     setActiveRegions(prev =>\r\n//       prev.includes(region)\r\n//         ? prev.filter(r => r !== region)\r\n//         : [...prev, region]\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ padding: '20px' }}>\r\n//       <h1>GDP vs Pollution Visualization</h1>\r\n\r\n//       <div style={{ maxWidth: '1100px', margin: '0 auto', display: 'flex' }}>\r\n//         {/* Chart */}\r\n//         <div style={{ flex: 1 }}>\r\n//         <ScatterPlot\r\n//   data={data}\r\n//   selectedYear={selectedYear}\r\n//   regionColorMap={regionColorMap}\r\n//   activeRegions={activeRegions}\r\n//   selectedCountries={selectedCountries}\r\n//   setSelectedCountries={setSelectedCountries}\r\n// />\r\n\r\n//         </div>\r\n\r\n//         {/* Legend */}\r\n//         <div style={{ marginLeft: '30px', width: '180px' }}>\r\n//           <h4 style={{ marginBottom: '12px' }}>Regions</h4>\r\n//           <form>\r\n//           {regionList.map(region => (\r\n//   <label\r\n//     key={region}\r\n//     style={{\r\n//       display: 'flex',\r\n//       alignItems: 'center',\r\n//       marginBottom: '10px',\r\n//       cursor: 'pointer'\r\n//     }}\r\n//   >\r\n//     <input\r\n//       type=\"checkbox\"\r\n//       checked={activeRegions.includes(region)}\r\n//       onChange={() => toggleRegion(region)}\r\n//       style={{\r\n//         appearance: 'none',\r\n//         WebkitAppearance: 'none',\r\n//         width: '18px',\r\n//         height: '18px',\r\n//         borderRadius: '4px',\r\n//         border: `2px solid ${regionColorMap[region]}`,\r\n//         backgroundColor: activeRegions.includes(region)\r\n//           ? regionColorMap[region]\r\n//           : '#fff',\r\n//         marginRight: '8px',\r\n//         cursor: 'pointer'\r\n//       }}\r\n//     />\r\n//     <span\r\n//       style={{\r\n//         fontWeight: selectedCountries?.region === region ? 'bold' : 'normal'\r\n//       }}\r\n//     >\r\n//       {region}\r\n//     </span>\r\n//   </label>\r\n// ))}\r\n\r\n\r\n//           </form>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Year Slider */}\r\n//       <div style={{ marginBottom: '30px' }}>\r\n//         <label htmlFor=\"yearSlider\">Year: {selectedYear}</label><br />\r\n//         <input\r\n//           id=\"yearSlider\"\r\n//           type=\"range\"\r\n//           min={yearRange.min}\r\n//           max={yearRange.max}\r\n//           value={selectedYear}\r\n//           onChange={(e) => setSelectedYear(parseInt(e.target.value))}\r\n//           style={{ width: '400px' }}\r\n//         />\r\n//       </div>\r\n\r\n//       {/* Play/Pause */}\r\n//       <div style={{ marginBottom: '20px' }}>\r\n//         <button onClick={toggleAnimation}>\r\n//           {isPlaying ? 'Pause ⏸️' : 'Play ▶️'}\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Home;\r\n\r\n\r\n// Home.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport ScatterPlot from './ScatterPlot';\r\nimport CountrySelector from './CountrySelector';\r\nimport * as d3 from 'd3';\r\n\r\nconst regionList = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'];\r\n\r\nconst regionColorMap = {};\r\nregionList.forEach((region, i) => {\r\n  regionColorMap[region] = d3.schemeTableau10[i];\r\n});\r\n\r\nconst Home = () => {\r\n  const [data, setData] = useState([]);\r\n  const [selectedYear, setSelectedYear] = useState(2022);\r\n  const [yearRange, setYearRange] = useState({ min: 1950, max: 2022 });\r\n  const [activeRegions, setActiveRegions] = useState([]);\r\n  const [selectedCountries, setSelectedCountries] = useState([]);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [intervalId, setIntervalId] = useState(null);\r\n  const [showSelector, setShowSelector] = useState(false);\r\n\r\n  const toggleRegion = (region) => {\r\n    setActiveRegions(prev =>\r\n      prev.includes(region) ? prev.filter(r => r !== region) : [...prev, region]\r\n    );\r\n  };\r\n\r\n  const toggleCountry = (country) => {\r\n    setSelectedCountries(prev => {\r\n      const isAlready = prev.some(c => c.entity === country.entity);\r\n      return isAlready ? prev.filter(c => c.entity !== country.entity) : [...prev, country];\r\n    });\r\n  };\r\n\r\n  const startAnimation = () => {\r\n    if (!isPlaying) {\r\n      const id = setInterval(() => {\r\n        setSelectedYear(prev => prev + 1 > yearRange.max ? yearRange.min : prev + 1);\r\n      }, 100);\r\n      setIntervalId(id);\r\n      setIsPlaying(true);\r\n    }\r\n  };\r\n\r\n  const stopAnimation = () => {\r\n    clearInterval(intervalId);\r\n    setIsPlaying(false);\r\n  };\r\n\r\n  const toggleAnimation = () => {\r\n    isPlaying ? stopAnimation() : startAnimation();\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios.get('http://localhost:5000/api/data')\r\n      .then(response => {\r\n        setData(response.data);\r\n        setYearRange({ min: 1800, max: 2022 });\r\n      })\r\n      .catch(error => console.error('Error fetching data:', error));\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <h1>GDP vs Pollution Visualization</h1>\r\n\r\n      <button onClick={() => setShowSelector(true)} style={{ marginBottom: '10px' }}>\r\n        Select Countries & Regions\r\n      </button>\r\n\r\n      {showSelector && (\r\n        <CountrySelector\r\n          data={data}\r\n          activeRegions={activeRegions}\r\n          selectedCountries={selectedCountries}\r\n          toggleRegion={toggleRegion}\r\n          toggleCountry={toggleCountry}\r\n          regionList={regionList}\r\n          setShowSelector={setShowSelector}\r\n        />\r\n      )}\r\n\r\n      <div style={{ maxWidth: '1100px', margin: '0 auto', display: 'flex' }}>\r\n        <div style={{ flex: 1 }}>\r\n          <ScatterPlot\r\n            data={data}\r\n            selectedYear={selectedYear}\r\n            regionColorMap={regionColorMap}\r\n            activeRegions={activeRegions}\r\n            selectedCountries={selectedCountries}\r\n            setSelectedCountries={setSelectedCountries}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ marginBottom: '30px' }}>\r\n        <label htmlFor=\"yearSlider\">Year: {selectedYear}</label><br />\r\n        <input\r\n          id=\"yearSlider\"\r\n          type=\"range\"\r\n          min={yearRange.min}\r\n          max={yearRange.max}\r\n          value={selectedYear}\r\n          onChange={(e) => setSelectedYear(parseInt(e.target.value))}\r\n          style={{ width: '400px' }}\r\n        />\r\n      </div>\r\n\r\n      <div style={{ marginBottom: '20px' }}>\r\n        <button onClick={toggleAnimation}>\r\n          {isPlaying ? 'Pause ⏸️' : 'Play ▶️'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,UAAU,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,eAAe,EAAE,SAAS,EAAE,eAAe,CAAC;AAE5F,MAAMC,cAAc,GAAG,CAAC,CAAC;AACzBD,UAAU,CAACE,OAAO,CAAC,CAACC,MAAM,EAAEC,CAAC,KAAK;EAChCH,cAAc,CAACE,MAAM,CAAC,GAAGN,EAAE,CAACQ,eAAe,CAACD,CAAC,CAAC;AAChD,CAAC,CAAC;AAEF,MAAME,IAAI,GAAGA,CAAA,KAAM;EAAAC,E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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}