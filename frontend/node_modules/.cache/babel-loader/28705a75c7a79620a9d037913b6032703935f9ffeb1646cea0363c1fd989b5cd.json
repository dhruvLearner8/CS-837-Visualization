{"ast":null,"code":"\n\n// // export default ScatterPlot;\n// import React, { useEffect, useRef, useState } from 'react';\n// import * as d3 from 'd3';\n\n// const ScatterPlot = ({\n//   data,\n//   selectedYear = 2022,\n//   regionColorMap,\n//   activeRegions,\n//   selectedCountries,\n//   setSelectedCountries\n// }) => {\n//   const svgRef = useRef();\n//   const [hoveredCountry, setHoveredCountry] = useState(null);\n//   const [hoverPos, setHoverPos] = useState({ x: 0, y: 0 });\n\n//   useEffect(() => {\n//     if (!data.length) return;\n\n//     const filteredData = data.filter(d =>\n//       d.year === selectedYear &&\n//       d.entity !== 'World' &&\n//       !d.entity.toLowerCase().includes('income') &&\n//       d.gdp_per_capita > 0 &&\n//       d.co2_emissions_per_capita > 0 &&\n//       d.population > 0\n//     );\n\n//     const width = 900;\n//     const height = 550;\n//     const margin = { top: 40, right: 40, bottom: 60, left: 80 };\n\n//     const svg = d3.select(svgRef.current);\n//     svg.selectAll('*').remove();\n\n//     const chart = svg\n//       .attr('width', width)\n//       .attr('height', height)\n//       .append('g')\n//       .attr('transform', `translate(${margin.left},${margin.top})`);\n\n//     const innerWidth = width - margin.left - margin.right;\n//     const innerHeight = height - margin.top - margin.bottom;\n\n//     const xScale = d3.scaleLog()\n//       .domain([100, d3.max(filteredData, d => d.gdp_per_capita || 100000)])\n//       .range([0, innerWidth]);\n\n//     const yScale = d3.scaleLog()\n//       .domain([0.1, d3.max(filteredData, d => d.co2_emissions_per_capita || 10)])\n//       .range([innerHeight, 0]);\n\n//     chart.append('g')\n//       .attr('transform', `translate(0, ${innerHeight})`)\n//       .call(d3.axisBottom(xScale).ticks(10, \"~s\"))\n//       .append('text')\n//       .attr('x', innerWidth / 2)\n//       .attr('y', 40)\n//       .attr('fill', '#000')\n//       .attr('text-anchor', 'middle')\n//       .text('GDP per capita (log scale)');\n\n//     chart.append('g')\n//       .call(d3.axisLeft(yScale).ticks(10, \"~s\"))\n//       .append('text')\n//       .attr('transform', 'rotate(-90)')\n//       .attr('x', -innerHeight / 2)\n//       .attr('y', -60)\n//       .attr('fill', '#000')\n//       .attr('text-anchor', 'middle')\n//       .text('CO₂ emissions per capita (log scale)');\n\n//     // RING CIRCLES\n//     chart.selectAll('circle.ring')\n//       .data(filteredData.filter(d => activeRegions.includes(d.region)))\n//       .enter()\n//       .append('circle')\n//       .attr('class', 'ring')\n//       .attr('cx', d => xScale(d.gdp_per_capita || 100))\n//       .attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1))\n//       .attr('r', d => Math.sqrt(d.population) / 1000 + 4)\n//       .attr('fill', 'none')\n//       .attr('stroke', d => regionColorMap[d.region] || '#000')\n//       .attr('stroke-width', 2)\n//       .attr('opacity', 1);\n\n//     // MAIN CIRCLES\n//     chart.selectAll('circle.bubble')\n//       .data(filteredData)\n//       .enter()\n//       .append('circle')\n//       .attr('class', 'bubble')\n//       .attr('cx', d => xScale(d.gdp_per_capita || 100))\n//       .attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1))\n//       .attr('r', d => {\n//         const baseR = Math.sqrt(d.population) / 1000;\n//         return selectedCountries.some(c => c.entity === d.entity) ? baseR + 4 : baseR;\n//       })\n//       .attr('fill', d => {\n//         if (selectedCountries.some(c => c.entity === d.entity)) {\n//           return d3.color(regionColorMap[d.region]).brighter(0.5);\n//         }\n//         return activeRegions.includes(d.region)\n//           ? regionColorMap[d.region] || '#000'\n//           : '#ccc';\n//       })\n//       .attr('stroke', d =>\n//         selectedCountries.some(c => c.entity === d.entity)\n//           ? regionColorMap[d.region]\n//           : 'none'\n//       )\n//       .attr('stroke-width', d =>\n//         selectedCountries.some(c => c.entity === d.entity) ? 3 : 0\n//       )\n//       .attr('opacity', 0.85)\n//       .on('mouseover', function (event, d) {\n//         setHoveredCountry(d);\n//         setHoverPos({ x: event.pageX + 10, y: event.pageY - 28 });\n\n//         d3.select(this)\n//           .attr('stroke', regionColorMap[d.region] || '#000')\n//           .attr('stroke-width', 3)\n//           .attr('fill', d3.color(regionColorMap[d.region]).brighter(0.5))\n//           .attr('r', Math.sqrt(d.population) / 1000 + 4);\n//       })\n//       .on('mouseout', function (event, d) {\n//         setHoveredCountry(null);\n\n//         const baseR = Math.sqrt(d.population) / 1000;\n//         const isSelected = selectedCountries.some(c => c.entity === d.entity);\n\n//         d3.select(this)\n//           .attr('r', isSelected ? baseR + 4 : baseR)\n//           .attr('stroke', isSelected ? regionColorMap[d.region] : 'none')\n//           .attr('stroke-width', isSelected ? 3 : 0)\n//           .attr('fill', () => {\n//             if (isSelected) {\n//               return d3.color(regionColorMap[d.region]).brighter(0.5);\n//             }\n//             return activeRegions.includes(d.region)\n//               ? regionColorMap[d.region] || '#000'\n//               : '#ccc';\n//           });\n//       })\n//       .on('click', function (event, d) {\n//         event.stopPropagation();\n//         const isAlreadySelected = selectedCountries.some(c => c.entity === d.entity);\n//         const updated = isAlreadySelected\n//           ? selectedCountries.filter(c => c.entity !== d.entity)\n//           : [...selectedCountries, d];\n//         setSelectedCountries(updated);\n//       });\n\n//     // Labels for selected countries only\n//     chart.selectAll('text.label').remove();\n\n//     chart.selectAll('text.label')\n//       .data(filteredData.filter(d =>\n//         activeRegions.includes(d.region) || selectedCountries.some(c => c.entity === d.entity)\n//       ))\n//       .enter()\n//       .append('text')\n//       .attr('class', 'label')\n//       .attr('x', d => xScale(d.gdp_per_capita || 100))\n//       .attr('y', d => yScale(d.co2_emissions_per_capita || 0.1) - 8)\n//       .text(d => d.entity)\n//       .attr('font-size', '10px')\n//       .attr('fill', d => regionColorMap[d.region] || '#333')\n//       .attr('font-weight', 'bold')\n//       .attr('text-anchor', 'middle');\n//   }, [data, selectedYear, activeRegions, regionColorMap, selectedCountries]);\n\n//   return (\n//     <>\n//       <svg ref={svgRef}></svg>\n\n//       {/* Hover-only tooltip card */}\n//       {hoveredCountry && (\n//         <div style={{\n//           position: 'absolute',\n//           left: `${hoverPos.x}px`,\n//           top: `${hoverPos.y}px`,\n//           background: '#fff',\n//           padding: '10px',\n//           border: '1px solid #ccc',\n//           borderRadius: '6px',\n//           boxShadow: '0 2px 6px rgba(0,0,0,0.15)',\n//           zIndex: 100,\n//           pointerEvents: 'none'\n//         }}>\n//           <strong>{hoveredCountry.entity}</strong><br />\n//           Year: {hoveredCountry.year}<br />\n//           GDP per capita: ${Math.round(hoveredCountry.gdp_per_capita)}<br />\n//           CO₂ per capita: {hoveredCountry.co2_emissions_per_capita.toFixed(2)} t<br />\n//           Population: {hoveredCountry.population.toLocaleString()}\n//         </div>\n//       )}\n//     </>\n//   );\n// };\n\n// export default ScatterPlot;","map":{"version":3,"names":[],"sources":["C:/Users/dhruv/OneDrive/Desktop/CS 837 Information Vis/gdp-pollution-app/frontend/src/components/ScatterPlot.js"],"sourcesContent":["\r\n\r\n// // export default ScatterPlot;\r\n// import React, { useEffect, useRef, useState } from 'react';\r\n// import * as d3 from 'd3';\r\n\r\n// const ScatterPlot = ({\r\n//   data,\r\n//   selectedYear = 2022,\r\n//   regionColorMap,\r\n//   activeRegions,\r\n//   selectedCountries,\r\n//   setSelectedCountries\r\n// }) => {\r\n//   const svgRef = useRef();\r\n//   const [hoveredCountry, setHoveredCountry] = useState(null);\r\n//   const [hoverPos, setHoverPos] = useState({ x: 0, y: 0 });\r\n\r\n//   useEffect(() => {\r\n//     if (!data.length) return;\r\n\r\n//     const filteredData = data.filter(d =>\r\n//       d.year === selectedYear &&\r\n//       d.entity !== 'World' &&\r\n//       !d.entity.toLowerCase().includes('income') &&\r\n//       d.gdp_per_capita > 0 &&\r\n//       d.co2_emissions_per_capita > 0 &&\r\n//       d.population > 0\r\n//     );\r\n\r\n//     const width = 900;\r\n//     const height = 550;\r\n//     const margin = { top: 40, right: 40, bottom: 60, left: 80 };\r\n\r\n//     const svg = d3.select(svgRef.current);\r\n//     svg.selectAll('*').remove();\r\n\r\n//     const chart = svg\r\n//       .attr('width', width)\r\n//       .attr('height', height)\r\n//       .append('g')\r\n//       .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n//     const innerWidth = width - margin.left - margin.right;\r\n//     const innerHeight = height - margin.top - margin.bottom;\r\n\r\n//     const xScale = d3.scaleLog()\r\n//       .domain([100, d3.max(filteredData, d => d.gdp_per_capita || 100000)])\r\n//       .range([0, innerWidth]);\r\n\r\n//     const yScale = d3.scaleLog()\r\n//       .domain([0.1, d3.max(filteredData, d => d.co2_emissions_per_capita || 10)])\r\n//       .range([innerHeight, 0]);\r\n\r\n//     chart.append('g')\r\n//       .attr('transform', `translate(0, ${innerHeight})`)\r\n//       .call(d3.axisBottom(xScale).ticks(10, \"~s\"))\r\n//       .append('text')\r\n//       .attr('x', innerWidth / 2)\r\n//       .attr('y', 40)\r\n//       .attr('fill', '#000')\r\n//       .attr('text-anchor', 'middle')\r\n//       .text('GDP per capita (log scale)');\r\n\r\n//     chart.append('g')\r\n//       .call(d3.axisLeft(yScale).ticks(10, \"~s\"))\r\n//       .append('text')\r\n//       .attr('transform', 'rotate(-90)')\r\n//       .attr('x', -innerHeight / 2)\r\n//       .attr('y', -60)\r\n//       .attr('fill', '#000')\r\n//       .attr('text-anchor', 'middle')\r\n//       .text('CO₂ emissions per capita (log scale)');\r\n\r\n//     // RING CIRCLES\r\n//     chart.selectAll('circle.ring')\r\n//       .data(filteredData.filter(d => activeRegions.includes(d.region)))\r\n//       .enter()\r\n//       .append('circle')\r\n//       .attr('class', 'ring')\r\n//       .attr('cx', d => xScale(d.gdp_per_capita || 100))\r\n//       .attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1))\r\n//       .attr('r', d => Math.sqrt(d.population) / 1000 + 4)\r\n//       .attr('fill', 'none')\r\n//       .attr('stroke', d => regionColorMap[d.region] || '#000')\r\n//       .attr('stroke-width', 2)\r\n//       .attr('opacity', 1);\r\n\r\n//     // MAIN CIRCLES\r\n//     chart.selectAll('circle.bubble')\r\n//       .data(filteredData)\r\n//       .enter()\r\n//       .append('circle')\r\n//       .attr('class', 'bubble')\r\n//       .attr('cx', d => xScale(d.gdp_per_capita || 100))\r\n//       .attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1))\r\n//       .attr('r', d => {\r\n//         const baseR = Math.sqrt(d.population) / 1000;\r\n//         return selectedCountries.some(c => c.entity === d.entity) ? baseR + 4 : baseR;\r\n//       })\r\n//       .attr('fill', d => {\r\n//         if (selectedCountries.some(c => c.entity === d.entity)) {\r\n//           return d3.color(regionColorMap[d.region]).brighter(0.5);\r\n//         }\r\n//         return activeRegions.includes(d.region)\r\n//           ? regionColorMap[d.region] || '#000'\r\n//           : '#ccc';\r\n//       })\r\n//       .attr('stroke', d =>\r\n//         selectedCountries.some(c => c.entity === d.entity)\r\n//           ? regionColorMap[d.region]\r\n//           : 'none'\r\n//       )\r\n//       .attr('stroke-width', d =>\r\n//         selectedCountries.some(c => c.entity === d.entity) ? 3 : 0\r\n//       )\r\n//       .attr('opacity', 0.85)\r\n//       .on('mouseover', function (event, d) {\r\n//         setHoveredCountry(d);\r\n//         setHoverPos({ x: event.pageX + 10, y: event.pageY - 28 });\r\n\r\n//         d3.select(this)\r\n//           .attr('stroke', regionColorMap[d.region] || '#000')\r\n//           .attr('stroke-width', 3)\r\n//           .attr('fill', d3.color(regionColorMap[d.region]).brighter(0.5))\r\n//           .attr('r', Math.sqrt(d.population) / 1000 + 4);\r\n//       })\r\n//       .on('mouseout', function (event, d) {\r\n//         setHoveredCountry(null);\r\n\r\n//         const baseR = Math.sqrt(d.population) / 1000;\r\n//         const isSelected = selectedCountries.some(c => c.entity === d.entity);\r\n\r\n//         d3.select(this)\r\n//           .attr('r', isSelected ? baseR + 4 : baseR)\r\n//           .attr('stroke', isSelected ? regionColorMap[d.region] : 'none')\r\n//           .attr('stroke-width', isSelected ? 3 : 0)\r\n//           .attr('fill', () => {\r\n//             if (isSelected) {\r\n//               return d3.color(regionColorMap[d.region]).brighter(0.5);\r\n//             }\r\n//             return activeRegions.includes(d.region)\r\n//               ? regionColorMap[d.region] || '#000'\r\n//               : '#ccc';\r\n//           });\r\n//       })\r\n//       .on('click', function (event, d) {\r\n//         event.stopPropagation();\r\n//         const isAlreadySelected = selectedCountries.some(c => c.entity === d.entity);\r\n//         const updated = isAlreadySelected\r\n//           ? selectedCountries.filter(c => c.entity !== d.entity)\r\n//           : [...selectedCountries, d];\r\n//         setSelectedCountries(updated);\r\n//       });\r\n\r\n//     // Labels for selected countries only\r\n//     chart.selectAll('text.label').remove();\r\n\r\n//     chart.selectAll('text.label')\r\n//       .data(filteredData.filter(d =>\r\n//         activeRegions.includes(d.region) || selectedCountries.some(c => c.entity === d.entity)\r\n//       ))\r\n//       .enter()\r\n//       .append('text')\r\n//       .attr('class', 'label')\r\n//       .attr('x', d => xScale(d.gdp_per_capita || 100))\r\n//       .attr('y', d => yScale(d.co2_emissions_per_capita || 0.1) - 8)\r\n//       .text(d => d.entity)\r\n//       .attr('font-size', '10px')\r\n//       .attr('fill', d => regionColorMap[d.region] || '#333')\r\n//       .attr('font-weight', 'bold')\r\n//       .attr('text-anchor', 'middle');\r\n//   }, [data, selectedYear, activeRegions, regionColorMap, selectedCountries]);\r\n\r\n//   return (\r\n//     <>\r\n//       <svg ref={svgRef}></svg>\r\n\r\n//       {/* Hover-only tooltip card */}\r\n//       {hoveredCountry && (\r\n//         <div style={{\r\n//           position: 'absolute',\r\n//           left: `${hoverPos.x}px`,\r\n//           top: `${hoverPos.y}px`,\r\n//           background: '#fff',\r\n//           padding: '10px',\r\n//           border: '1px solid #ccc',\r\n//           borderRadius: '6px',\r\n//           boxShadow: '0 2px 6px rgba(0,0,0,0.15)',\r\n//           zIndex: 100,\r\n//           pointerEvents: 'none'\r\n//         }}>\r\n//           <strong>{hoveredCountry.entity}</strong><br />\r\n//           Year: {hoveredCountry.year}<br />\r\n//           GDP per capita: ${Math.round(hoveredCountry.gdp_per_capita)}<br />\r\n//           CO₂ per capita: {hoveredCountry.co2_emissions_per_capita.toFixed(2)} t<br />\r\n//           Population: {hoveredCountry.population.toLocaleString()}\r\n//         </div>\r\n//       )}\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default ScatterPlot;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}