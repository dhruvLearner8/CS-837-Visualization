{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dhruv\\\\OneDrive\\\\Desktop\\\\CS 837 Information Vis\\\\gdp-pollution-app\\\\frontend\\\\src\\\\components\\\\ScatterPlot.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from 'react';\n// import * as d3 from 'd3';\n\n// const ScatterPlot = ({\n//   data,\n//   selectedYear = 2022,\n//   regionColorMap,\n//   activeRegions,\n//   selectedCountries,\n//   setSelectedCountries\n// }) => {\n//   const svgRef = useRef();\n//   const [tooltipPos, setTooltipPos] = useState({ x: 0, y: 0 });\n\n//   useEffect(() => {\n//     if (!data.length) return;\n\n//     const filteredData = data.filter(d =>\n//       d.year === selectedYear &&\n//       d.entity !== 'World' &&\n//       !d.entity.toLowerCase().includes('income') &&\n//       d.gdp_per_capita > 0 &&\n//       d.co2_emissions_per_capita > 0 &&\n//       d.population > 0\n//     );\n\n//     const width = 900;\n//     const height = 550;\n//     const margin = { top: 40, right: 40, bottom: 60, left: 80 };\n\n//     const svg = d3.select(svgRef.current);\n//     svg.selectAll('*').remove(); // Clear old content\n\n//     const chart = svg\n//       .attr('width', width)\n//       .attr('height', height)\n//       .append('g')\n//       .attr('transform', `translate(${margin.left},${margin.top})`);\n\n//     const innerWidth = width - margin.left - margin.right;\n//     const innerHeight = height - margin.top - margin.bottom;\n\n//     const xScale = d3.scaleLog()\n//       .domain([100, d3.max(filteredData, d => d.gdp_per_capita || 100000)])\n//       .range([0, innerWidth]);\n\n//     const yScale = d3.scaleLog()\n//       .domain([0.1, d3.max(filteredData, d => d.co2_emissions_per_capita || 10)])\n//       .range([innerHeight, 0]);\n\n//     chart.append('g')\n//       .attr('transform', `translate(0, ${innerHeight})`)\n//       .call(d3.axisBottom(xScale).ticks(10, \"~s\"))\n//       .append('text')\n//       .attr('x', innerWidth / 2)\n//       .attr('y', 40)\n//       .attr('fill', '#000')\n//       .attr('text-anchor', 'middle')\n//       .text('GDP per capita (log scale)');\n\n//     chart.append('g')\n//       .call(d3.axisLeft(yScale).ticks(10, \"~s\"))\n//       .append('text')\n//       .attr('transform', 'rotate(-90)')\n//       .attr('x', -innerHeight / 2)\n//       .attr('y', -60)\n//       .attr('fill', '#000')\n//       .attr('text-anchor', 'middle')\n//       .text('CO₂ emissions per capita (log scale)');\n\n//     // RING CIRCLES (outer)\n//     chart.selectAll('circle.ring')\n//       .data(filteredData.filter(d => activeRegions.includes(d.region)))\n//       .enter()\n//       .append('circle')\n//       .attr('class', 'ring')\n//       .attr('cx', d => xScale(d.gdp_per_capita || 100))\n//       .attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1))\n//       .attr('r', d => Math.sqrt(d.population) / 1000 + 4)\n//       .attr('fill', 'none')\n//       .attr('stroke', d => regionColorMap[d.region] || '#000')\n//       .attr('stroke-width', 2)\n//       .attr('opacity', 1);\n\n//     // MAIN CIRCLES\n//     chart.selectAll('circle.bubble')\n//       .data(filteredData)\n//       .enter()\n//       .append('circle')\n//       .attr('class', 'bubble')\n//       .attr('cx', d => xScale(d.gdp_per_capita || 100))\n//       .attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1))\n//       .attr('r', d => {\n//         const baseR = Math.sqrt(d.population) / 1000;\n//         return selectedCountry?.entity === d.entity ? baseR + 4 : baseR;\n//       })\n//       .attr('fill', d => {\n//         if (selectedCountry?.entity === d.entity) {\n//           return d3.color(regionColorMap[d.region]).brighter(0.5);\n//         }\n//         return activeRegions.includes(d.region)\n//           ? regionColorMap[d.region] || '#000'\n//           : '#ccc';\n//       })\n//       .attr('stroke', d =>\n//         selectedCountry?.entity === d.entity ? regionColorMap[d.region] : 'none'\n//       )\n//       .attr('stroke-width', d =>\n//         selectedCountry?.entity === d.entity ? 3 : 0\n//       )\n//       .attr('opacity', 0.85)\n//       .on('mouseover', function (event, d) {\n//         d3.select(this)\n//           .attr('stroke', regionColorMap[d.region] || '#000')\n//           .attr('stroke-width', 3)\n//           .attr('fill', d3.color(regionColorMap[d.region]).brighter(0.5))\n//           .attr('r', Math.sqrt(d.population) / 1000 + 4);\n//       })\n//       .on('mouseout', function (event, d) {\n//         const baseR = Math.sqrt(d.population) / 1000;\n//         d3.select(this)\n//           .attr('r', selectedCountry?.entity === d.entity ? baseR + 4 : baseR)\n//           .attr('stroke', selectedCountry?.entity === d.entity ? regionColorMap[d.region] : 'none')\n//           .attr('stroke-width', selectedCountry?.entity === d.entity ? 3 : 0)\n//           .attr('fill', d => {\n//             if (selectedCountry?.entity === d.entity) {\n//               return d3.color(regionColorMap[d.region]).brighter(0.5);\n//             }\n//             return activeRegions.includes(d.region)\n//               ? regionColorMap[d.region] || '#000'\n//               : '#ccc';\n//           });\n//       })\n//       .on('click', function (event, d) {\n//         event.stopPropagation();\n//         setTooltipPos({ x: event.pageX + 10, y: event.pageY - 28 });\n//         setSelectedCountry(d);\n//       });\n\n//     // Labels\n//     chart.selectAll('text.label').remove();\n//     chart.selectAll('text.label')\n//       .data(filteredData.filter(d => activeRegions.includes(d.region)))\n//       .enter()\n//       .append('text')\n//       .attr('class', 'label')\n//       .attr('x', d => xScale(d.gdp_per_capita || 100))\n//       .attr('y', d => yScale(d.co2_emissions_per_capita || 0.1) - 8)\n//       .text(d => d.entity)\n//       .attr('font-size', '10px')\n//       .attr('fill', d => regionColorMap[d.region] || '#333')\n//       .attr('font-weight', 'bold')\n//       .attr('text-anchor', 'middle');\n//   }, [data, selectedYear, activeRegions, regionColorMap, selectedCountry]);\n\n//   // Deselect on outside click\n//   useEffect(() => {\n//     const handleClickOutside = () => {\n//       setSelectedCountry(null);\n//     };\n//     document.addEventListener('click', handleClickOutside);\n//     return () => document.removeEventListener('click', handleClickOutside);\n//   }, [setSelectedCountry]);\n\n//   return (\n//     <>\n//       <svg ref={svgRef}></svg>\n//       {selectedCountry && (\n//         <div style={{\n//           position: 'absolute',\n//           left: `${tooltipPos.x}px`,\n//           top: `${tooltipPos.y}px`,\n//           background: '#fff',\n//           padding: '10px',\n//           border: '1px solid #ccc',\n//           borderRadius: '6px',\n//           boxShadow: '0 2px 6px rgba(0,0,0,0.15)',\n//           zIndex: 100,\n//           pointerEvents: 'none'\n//         }}>\n//           <strong>{selectedCountry.entity}</strong><br />\n//           Year: {selectedCountry.year}<br />\n//           GDP per capita: ${Math.round(selectedCountry.gdp_per_capita)}<br />\n//           CO₂ per capita: {selectedCountry.co2_emissions_per_capita.toFixed(2)} t<br />\n//           Population: {selectedCountry.population.toLocaleString()}\n//         </div>\n//       )}\n//     </>\n//   );\n// };\n\n// export default ScatterPlot;\n\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScatterPlot = ({\n  data,\n  selectedYear = 2022,\n  regionColorMap,\n  activeRegions,\n  selectedCountries,\n  setSelectedCountries\n}) => {\n  _s();\n  const svgRef = useRef();\n  useEffect(() => {\n    if (!data.length) return;\n    const filteredData = data.filter(d => d.year === selectedYear && d.entity !== 'World' && !d.entity.toLowerCase().includes('income') && d.gdp_per_capita > 0 && d.co2_emissions_per_capita > 0 && d.population > 0);\n    const width = 900;\n    const height = 550;\n    const margin = {\n      top: 40,\n      right: 40,\n      bottom: 60,\n      left: 80\n    };\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove();\n    const chart = svg.attr('width', width).attr('height', height).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n    const xScale = d3.scaleLog().domain([100, d3.max(filteredData, d => d.gdp_per_capita || 100000)]).range([0, innerWidth]);\n    const yScale = d3.scaleLog().domain([0.1, d3.max(filteredData, d => d.co2_emissions_per_capita || 10)]).range([innerHeight, 0]);\n    chart.append('g').attr('transform', `translate(0, ${innerHeight})`).call(d3.axisBottom(xScale).ticks(10, \"~s\")).append('text').attr('x', innerWidth / 2).attr('y', 40).attr('fill', '#000').attr('text-anchor', 'middle').text('GDP per capita (log scale)');\n    chart.append('g').call(d3.axisLeft(yScale).ticks(10, \"~s\")).append('text').attr('transform', 'rotate(-90)').attr('x', -innerHeight / 2).attr('y', -60).attr('fill', '#000').attr('text-anchor', 'middle').text('CO₂ emissions per capita (log scale)');\n\n    // RING CIRCLES\n    chart.selectAll('circle.ring').data(filteredData.filter(d => activeRegions.includes(d.region))).enter().append('circle').attr('class', 'ring').attr('cx', d => xScale(d.gdp_per_capita || 100)).attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1)).attr('r', d => Math.sqrt(d.population) / 1000 + 4).attr('fill', 'none').attr('stroke', d => regionColorMap[d.region] || '#000').attr('stroke-width', 2).attr('opacity', 1);\n\n    // MAIN CIRCLES\n    chart.selectAll('circle.bubble').data(filteredData).enter().append('circle').attr('class', 'bubble').attr('cx', d => xScale(d.gdp_per_capita || 100)).attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1)).attr('r', d => {\n      const baseR = Math.sqrt(d.population) / 1000;\n      return selectedCountries.some(c => c.entity === d.entity) ? baseR + 4 : baseR;\n    }).attr('fill', d => {\n      if (selectedCountries.some(c => c.entity === d.entity)) {\n        return d3.color(regionColorMap[d.region]).brighter(0.5);\n      }\n      return activeRegions.includes(d.region) ? regionColorMap[d.region] || '#000' : '#ccc';\n    }).attr('stroke', d => selectedCountries.some(c => c.entity === d.entity) ? regionColorMap[d.region] : 'none').attr('stroke-width', d => selectedCountries.some(c => c.entity === d.entity) ? 3 : 0).attr('opacity', 0.85).on('mouseover', function (event, d) {\n      d3.select(this).attr('stroke', regionColorMap[d.region] || '#000').attr('stroke-width', 3).attr('fill', d3.color(regionColorMap[d.region]).brighter(0.5)).attr('r', Math.sqrt(d.population) / 1000 + 4);\n    }).on('mouseout', function (event, d) {\n      const baseR = Math.sqrt(d.population) / 1000;\n      const isSelected = selectedCountries.some(c => c.entity === d.entity);\n      d3.select(this).attr('r', isSelected ? baseR + 4 : baseR).attr('stroke', isSelected ? regionColorMap[d.region] : 'none').attr('stroke-width', isSelected ? 3 : 0).attr('fill', () => {\n        if (isSelected) {\n          return d3.color(regionColorMap[d.region]).brighter(0.5);\n        }\n        return activeRegions.includes(d.region) ? regionColorMap[d.region] || '#000' : '#ccc';\n      });\n    }).on('click', function (event, d) {\n      event.stopPropagation();\n      const isAlreadySelected = selectedCountries.some(c => c.entity === d.entity);\n      const updated = isAlreadySelected ? selectedCountries.filter(c => c.entity !== d.entity) : [...selectedCountries, d];\n      setSelectedCountries(updated);\n    });\n\n    // Labels\n    chart.selectAll('text.label').remove();\n    chart.selectAll('text.label').data(filteredData.filter(d => activeRegions.includes(d.region))).enter().append('text').attr('class', 'label').attr('x', d => xScale(d.gdp_per_capita || 100)).attr('y', d => yScale(d.co2_emissions_per_capita || 0.1) - 8).text(d => d.entity).attr('font-size', '10px').attr('fill', d => regionColorMap[d.region] || '#333').attr('font-weight', 'bold').attr('text-anchor', 'middle');\n  }, [data, selectedYear, activeRegions, regionColorMap, selectedCountries]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svgRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 355,\n    columnNumber: 10\n  }, this);\n};\n_s(ScatterPlot, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = ScatterPlot;\nexport default ScatterPlot;\nvar _c;\n$RefreshReg$(_c, \"ScatterPlot\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","ScatterPlot","data","selectedYear","regionColorMap","activeRegions","selectedCountries","setSelectedCountries","_s","svgRef","length","filteredData","filter","d","year","entity","toLowerCase","includes","gdp_per_capita","co2_emissions_per_capita","population","width","height","margin","top","right","bottom","left","svg","select","current","selectAll","remove","chart","attr","append","innerWidth","innerHeight","xScale","scaleLog","domain","max","range","yScale","call","axisBottom","ticks","text","axisLeft","region","enter","Math","sqrt","baseR","some","c","color","brighter","on","event","isSelected","stopPropagation","isAlreadySelected","updated","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/dhruv/OneDrive/Desktop/CS 837 Information Vis/gdp-pollution-app/frontend/src/components/ScatterPlot.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\r\n// import * as d3 from 'd3';\r\n\r\n// const ScatterPlot = ({\r\n//   data,\r\n//   selectedYear = 2022,\r\n//   regionColorMap,\r\n//   activeRegions,\r\n//   selectedCountries,\r\n//   setSelectedCountries\r\n// }) => {\r\n//   const svgRef = useRef();\r\n//   const [tooltipPos, setTooltipPos] = useState({ x: 0, y: 0 });\r\n\r\n//   useEffect(() => {\r\n//     if (!data.length) return;\r\n\r\n//     const filteredData = data.filter(d =>\r\n//       d.year === selectedYear &&\r\n//       d.entity !== 'World' &&\r\n//       !d.entity.toLowerCase().includes('income') &&\r\n//       d.gdp_per_capita > 0 &&\r\n//       d.co2_emissions_per_capita > 0 &&\r\n//       d.population > 0\r\n//     );\r\n\r\n//     const width = 900;\r\n//     const height = 550;\r\n//     const margin = { top: 40, right: 40, bottom: 60, left: 80 };\r\n\r\n//     const svg = d3.select(svgRef.current);\r\n//     svg.selectAll('*').remove(); // Clear old content\r\n\r\n//     const chart = svg\r\n//       .attr('width', width)\r\n//       .attr('height', height)\r\n//       .append('g')\r\n//       .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n//     const innerWidth = width - margin.left - margin.right;\r\n//     const innerHeight = height - margin.top - margin.bottom;\r\n\r\n//     const xScale = d3.scaleLog()\r\n//       .domain([100, d3.max(filteredData, d => d.gdp_per_capita || 100000)])\r\n//       .range([0, innerWidth]);\r\n\r\n//     const yScale = d3.scaleLog()\r\n//       .domain([0.1, d3.max(filteredData, d => d.co2_emissions_per_capita || 10)])\r\n//       .range([innerHeight, 0]);\r\n\r\n//     chart.append('g')\r\n//       .attr('transform', `translate(0, ${innerHeight})`)\r\n//       .call(d3.axisBottom(xScale).ticks(10, \"~s\"))\r\n//       .append('text')\r\n//       .attr('x', innerWidth / 2)\r\n//       .attr('y', 40)\r\n//       .attr('fill', '#000')\r\n//       .attr('text-anchor', 'middle')\r\n//       .text('GDP per capita (log scale)');\r\n\r\n//     chart.append('g')\r\n//       .call(d3.axisLeft(yScale).ticks(10, \"~s\"))\r\n//       .append('text')\r\n//       .attr('transform', 'rotate(-90)')\r\n//       .attr('x', -innerHeight / 2)\r\n//       .attr('y', -60)\r\n//       .attr('fill', '#000')\r\n//       .attr('text-anchor', 'middle')\r\n//       .text('CO₂ emissions per capita (log scale)');\r\n\r\n//     // RING CIRCLES (outer)\r\n//     chart.selectAll('circle.ring')\r\n//       .data(filteredData.filter(d => activeRegions.includes(d.region)))\r\n//       .enter()\r\n//       .append('circle')\r\n//       .attr('class', 'ring')\r\n//       .attr('cx', d => xScale(d.gdp_per_capita || 100))\r\n//       .attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1))\r\n//       .attr('r', d => Math.sqrt(d.population) / 1000 + 4)\r\n//       .attr('fill', 'none')\r\n//       .attr('stroke', d => regionColorMap[d.region] || '#000')\r\n//       .attr('stroke-width', 2)\r\n//       .attr('opacity', 1);\r\n\r\n//     // MAIN CIRCLES\r\n//     chart.selectAll('circle.bubble')\r\n//       .data(filteredData)\r\n//       .enter()\r\n//       .append('circle')\r\n//       .attr('class', 'bubble')\r\n//       .attr('cx', d => xScale(d.gdp_per_capita || 100))\r\n//       .attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1))\r\n//       .attr('r', d => {\r\n//         const baseR = Math.sqrt(d.population) / 1000;\r\n//         return selectedCountry?.entity === d.entity ? baseR + 4 : baseR;\r\n//       })\r\n//       .attr('fill', d => {\r\n//         if (selectedCountry?.entity === d.entity) {\r\n//           return d3.color(regionColorMap[d.region]).brighter(0.5);\r\n//         }\r\n//         return activeRegions.includes(d.region)\r\n//           ? regionColorMap[d.region] || '#000'\r\n//           : '#ccc';\r\n//       })\r\n//       .attr('stroke', d =>\r\n//         selectedCountry?.entity === d.entity ? regionColorMap[d.region] : 'none'\r\n//       )\r\n//       .attr('stroke-width', d =>\r\n//         selectedCountry?.entity === d.entity ? 3 : 0\r\n//       )\r\n//       .attr('opacity', 0.85)\r\n//       .on('mouseover', function (event, d) {\r\n//         d3.select(this)\r\n//           .attr('stroke', regionColorMap[d.region] || '#000')\r\n//           .attr('stroke-width', 3)\r\n//           .attr('fill', d3.color(regionColorMap[d.region]).brighter(0.5))\r\n//           .attr('r', Math.sqrt(d.population) / 1000 + 4);\r\n//       })\r\n//       .on('mouseout', function (event, d) {\r\n//         const baseR = Math.sqrt(d.population) / 1000;\r\n//         d3.select(this)\r\n//           .attr('r', selectedCountry?.entity === d.entity ? baseR + 4 : baseR)\r\n//           .attr('stroke', selectedCountry?.entity === d.entity ? regionColorMap[d.region] : 'none')\r\n//           .attr('stroke-width', selectedCountry?.entity === d.entity ? 3 : 0)\r\n//           .attr('fill', d => {\r\n//             if (selectedCountry?.entity === d.entity) {\r\n//               return d3.color(regionColorMap[d.region]).brighter(0.5);\r\n//             }\r\n//             return activeRegions.includes(d.region)\r\n//               ? regionColorMap[d.region] || '#000'\r\n//               : '#ccc';\r\n//           });\r\n//       })\r\n//       .on('click', function (event, d) {\r\n//         event.stopPropagation();\r\n//         setTooltipPos({ x: event.pageX + 10, y: event.pageY - 28 });\r\n//         setSelectedCountry(d);\r\n//       });\r\n\r\n//     // Labels\r\n//     chart.selectAll('text.label').remove();\r\n//     chart.selectAll('text.label')\r\n//       .data(filteredData.filter(d => activeRegions.includes(d.region)))\r\n//       .enter()\r\n//       .append('text')\r\n//       .attr('class', 'label')\r\n//       .attr('x', d => xScale(d.gdp_per_capita || 100))\r\n//       .attr('y', d => yScale(d.co2_emissions_per_capita || 0.1) - 8)\r\n//       .text(d => d.entity)\r\n//       .attr('font-size', '10px')\r\n//       .attr('fill', d => regionColorMap[d.region] || '#333')\r\n//       .attr('font-weight', 'bold')\r\n//       .attr('text-anchor', 'middle');\r\n//   }, [data, selectedYear, activeRegions, regionColorMap, selectedCountry]);\r\n\r\n//   // Deselect on outside click\r\n//   useEffect(() => {\r\n//     const handleClickOutside = () => {\r\n//       setSelectedCountry(null);\r\n//     };\r\n//     document.addEventListener('click', handleClickOutside);\r\n//     return () => document.removeEventListener('click', handleClickOutside);\r\n//   }, [setSelectedCountry]);\r\n\r\n//   return (\r\n//     <>\r\n//       <svg ref={svgRef}></svg>\r\n//       {selectedCountry && (\r\n//         <div style={{\r\n//           position: 'absolute',\r\n//           left: `${tooltipPos.x}px`,\r\n//           top: `${tooltipPos.y}px`,\r\n//           background: '#fff',\r\n//           padding: '10px',\r\n//           border: '1px solid #ccc',\r\n//           borderRadius: '6px',\r\n//           boxShadow: '0 2px 6px rgba(0,0,0,0.15)',\r\n//           zIndex: 100,\r\n//           pointerEvents: 'none'\r\n//         }}>\r\n//           <strong>{selectedCountry.entity}</strong><br />\r\n//           Year: {selectedCountry.year}<br />\r\n//           GDP per capita: ${Math.round(selectedCountry.gdp_per_capita)}<br />\r\n//           CO₂ per capita: {selectedCountry.co2_emissions_per_capita.toFixed(2)} t<br />\r\n//           Population: {selectedCountry.population.toLocaleString()}\r\n//         </div>\r\n//       )}\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default ScatterPlot;\r\n\r\nimport React, { useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst ScatterPlot = ({\r\n  data,\r\n  selectedYear = 2022,\r\n  regionColorMap,\r\n  activeRegions,\r\n  selectedCountries,\r\n  setSelectedCountries\r\n}) => {\r\n  const svgRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!data.length) return;\r\n\r\n    const filteredData = data.filter(d =>\r\n      d.year === selectedYear &&\r\n      d.entity !== 'World' &&\r\n      !d.entity.toLowerCase().includes('income') &&\r\n      d.gdp_per_capita > 0 &&\r\n      d.co2_emissions_per_capita > 0 &&\r\n      d.population > 0\r\n    );\r\n\r\n    const width = 900;\r\n    const height = 550;\r\n    const margin = { top: 40, right: 40, bottom: 60, left: 80 };\r\n\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll('*').remove();\r\n\r\n    const chart = svg\r\n      .attr('width', width)\r\n      .attr('height', height)\r\n      .append('g')\r\n      .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n    const innerWidth = width - margin.left - margin.right;\r\n    const innerHeight = height - margin.top - margin.bottom;\r\n\r\n    const xScale = d3.scaleLog()\r\n      .domain([100, d3.max(filteredData, d => d.gdp_per_capita || 100000)])\r\n      .range([0, innerWidth]);\r\n\r\n    const yScale = d3.scaleLog()\r\n      .domain([0.1, d3.max(filteredData, d => d.co2_emissions_per_capita || 10)])\r\n      .range([innerHeight, 0]);\r\n\r\n    chart.append('g')\r\n      .attr('transform', `translate(0, ${innerHeight})`)\r\n      .call(d3.axisBottom(xScale).ticks(10, \"~s\"))\r\n      .append('text')\r\n      .attr('x', innerWidth / 2)\r\n      .attr('y', 40)\r\n      .attr('fill', '#000')\r\n      .attr('text-anchor', 'middle')\r\n      .text('GDP per capita (log scale)');\r\n\r\n    chart.append('g')\r\n      .call(d3.axisLeft(yScale).ticks(10, \"~s\"))\r\n      .append('text')\r\n      .attr('transform', 'rotate(-90)')\r\n      .attr('x', -innerHeight / 2)\r\n      .attr('y', -60)\r\n      .attr('fill', '#000')\r\n      .attr('text-anchor', 'middle')\r\n      .text('CO₂ emissions per capita (log scale)');\r\n\r\n    // RING CIRCLES\r\n    chart.selectAll('circle.ring')\r\n      .data(filteredData.filter(d => activeRegions.includes(d.region)))\r\n      .enter()\r\n      .append('circle')\r\n      .attr('class', 'ring')\r\n      .attr('cx', d => xScale(d.gdp_per_capita || 100))\r\n      .attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1))\r\n      .attr('r', d => Math.sqrt(d.population) / 1000 + 4)\r\n      .attr('fill', 'none')\r\n      .attr('stroke', d => regionColorMap[d.region] || '#000')\r\n      .attr('stroke-width', 2)\r\n      .attr('opacity', 1);\r\n\r\n    // MAIN CIRCLES\r\n    chart.selectAll('circle.bubble')\r\n      .data(filteredData)\r\n      .enter()\r\n      .append('circle')\r\n      .attr('class', 'bubble')\r\n      .attr('cx', d => xScale(d.gdp_per_capita || 100))\r\n      .attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1))\r\n      .attr('r', d => {\r\n        const baseR = Math.sqrt(d.population) / 1000;\r\n        return selectedCountries.some(c => c.entity === d.entity) ? baseR + 4 : baseR;\r\n      })\r\n      .attr('fill', d => {\r\n        if (selectedCountries.some(c => c.entity === d.entity)) {\r\n          return d3.color(regionColorMap[d.region]).brighter(0.5);\r\n        }\r\n        return activeRegions.includes(d.region)\r\n          ? regionColorMap[d.region] || '#000'\r\n          : '#ccc';\r\n      })\r\n      .attr('stroke', d =>\r\n        selectedCountries.some(c => c.entity === d.entity)\r\n          ? regionColorMap[d.region]\r\n          : 'none'\r\n      )\r\n      .attr('stroke-width', d =>\r\n        selectedCountries.some(c => c.entity === d.entity) ? 3 : 0\r\n      )\r\n      .attr('opacity', 0.85)\r\n      .on('mouseover', function (event, d) {\r\n        d3.select(this)\r\n          .attr('stroke', regionColorMap[d.region] || '#000')\r\n          .attr('stroke-width', 3)\r\n          .attr('fill', d3.color(regionColorMap[d.region]).brighter(0.5))\r\n          .attr('r', Math.sqrt(d.population) / 1000 + 4);\r\n      })\r\n      .on('mouseout', function (event, d) {\r\n        const baseR = Math.sqrt(d.population) / 1000;\r\n        const isSelected = selectedCountries.some(c => c.entity === d.entity);\r\n        d3.select(this)\r\n          .attr('r', isSelected ? baseR + 4 : baseR)\r\n          .attr('stroke', isSelected ? regionColorMap[d.region] : 'none')\r\n          .attr('stroke-width', isSelected ? 3 : 0)\r\n          .attr('fill', () => {\r\n            if (isSelected) {\r\n              return d3.color(regionColorMap[d.region]).brighter(0.5);\r\n            }\r\n            return activeRegions.includes(d.region)\r\n              ? regionColorMap[d.region] || '#000'\r\n              : '#ccc';\r\n          });\r\n      })\r\n      .on('click', function (event, d) {\r\n        event.stopPropagation();\r\n        const isAlreadySelected = selectedCountries.some(c => c.entity === d.entity);\r\n        const updated = isAlreadySelected\r\n          ? selectedCountries.filter(c => c.entity !== d.entity)\r\n          : [...selectedCountries, d];\r\n        setSelectedCountries(updated);\r\n      });\r\n\r\n    // Labels\r\n    chart.selectAll('text.label').remove();\r\n    chart.selectAll('text.label')\r\n      .data(filteredData.filter(d => activeRegions.includes(d.region)))\r\n      .enter()\r\n      .append('text')\r\n      .attr('class', 'label')\r\n      .attr('x', d => xScale(d.gdp_per_capita || 100))\r\n      .attr('y', d => yScale(d.co2_emissions_per_capita || 0.1) - 8)\r\n      .text(d => d.entity)\r\n      .attr('font-size', '10px')\r\n      .attr('fill', d => regionColorMap[d.region] || '#333')\r\n      .attr('font-weight', 'bold')\r\n      .attr('text-anchor', 'middle');\r\n\r\n  }, [data, selectedYear, activeRegions, regionColorMap, selectedCountries]);\r\n\r\n  return <svg ref={svgRef}></svg>;\r\n};\r\n\r\nexport default ScatterPlot;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,WAAW,GAAGA,CAAC;EACnBC,IAAI;EACJC,YAAY,GAAG,IAAI;EACnBC,cAAc;EACdC,aAAa;EACbC,iBAAiB;EACjBC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,MAAM,GAAGZ,MAAM,CAAC,CAAC;EAEvBD,SAAS,CAAC,MAAM;IACd,IAAI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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}