{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dhruv\\\\OneDrive\\\\Desktop\\\\CS 837 Information Vis\\\\gdp-pollution-app\\\\frontend\\\\src\\\\components\\\\MultiTrendCharts.js\";\nimport React from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst chartWidth = 200;\nconst chartHeight = 120;\nconst margin = {\n  top: 20,\n  right: 10,\n  bottom: 20,\n  left: 40\n};\nconst metrics = [{\n  key: 'co2',\n  label: 'CO₂ per Capita (t)',\n  format: d3.format('.2f')\n}, {\n  key: 'gdp',\n  label: 'GDP per Capita ($)',\n  format: d3.format(',')\n}, {\n  key: 'population',\n  label: 'Population',\n  format: d3.format(',.0f')\n}];\nconst MultiTrendCharts = ({\n  selectedCountries,\n  trendMap,\n  regionColorMap\n}) => {\n  var _trendMap$selectedCou;\n  if (selectedCountries.length === 0) return null;\n  const allYears = (_trendMap$selectedCou = trendMap[selectedCountries[0].entity]) === null || _trendMap$selectedCou === void 0 ? void 0 : _trendMap$selectedCou.map(d => d.year);\n  const xScale = d3.scaleLinear().domain(d3.extent(allYears)).range([margin.left, chartWidth - margin.right]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      gap: '40px',\n      marginTop: '20px'\n    },\n    children: selectedCountries.map(country => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '6px',\n          fontWeight: 'bold',\n          textAlign: 'center'\n        },\n        children: country.entity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this), metrics.map(metric => {\n        const rawData = trendMap[country.entity] || [];\n        const data = rawData.filter(d => d.year >= 1850 && d[metric.key] !== null && d[metric.key] !== undefined && d[metric.key] > 0);\n        if (data.length === 0) return null;\n        const yMax = d3.max(data, d => d[metric.key]);\n        const yScale = d3.scaleLinear().domain([0, yMax]).nice().range([chartHeight - margin.bottom, margin.top]);\n        const line = d3.line().x(d => xScale(d.year)).y(d => yScale(d[metric.key]));\n        return /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: chartWidth,\n          height: chartHeight,\n          style: {\n            display: 'block',\n            marginBottom: '10px'\n          },\n          children: [yScale.ticks(3).map((tick, i) => /*#__PURE__*/_jsxDEV(\"g\", {\n            children: [/*#__PURE__*/_jsxDEV(\"text\", {\n              x: margin.left - 6,\n              y: yScale(tick),\n              fontSize: \"10\",\n              textAnchor: \"end\",\n              alignmentBaseline: \"middle\",\n              fill: \"#444\",\n              children: metric.format(tick)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n              x1: margin.left,\n              x2: chartWidth - margin.right,\n              y1: yScale(tick),\n              y2: yScale(tick),\n              stroke: \"#ccc\",\n              strokeDasharray: \"2 2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 21\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 19\n          }, this)), /*#__PURE__*/_jsxDEV(\"text\", {\n            x: chartWidth / 2,\n            y: 12,\n            textAnchor: \"middle\",\n            fontSize: \"11\",\n            fill: \"#333\",\n            children: metric.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n            d: line(data),\n            fill: \"none\",\n            stroke: regionColorMap[country.region] || '#000',\n            strokeWidth: 2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this)]\n        }, metric.key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this);\n      })]\n    }, country.entity, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_c = MultiTrendCharts;\nexport default MultiTrendCharts;\nvar _c;\n$RefreshReg$(_c, \"MultiTrendCharts\");","map":{"version":3,"names":["React","d3","jsxDEV","_jsxDEV","chartWidth","chartHeight","margin","top","right","bottom","left","metrics","key","label","format","MultiTrendCharts","selectedCountries","trendMap","regionColorMap","_trendMap$selectedCou","length","allYears","entity","map","d","year","xScale","scaleLinear","domain","extent","range","style","display","gap","marginTop","children","country","marginBottom","fontWeight","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","metric","rawData","data","filter","undefined","yMax","max","yScale","nice","line","x","y","width","height","ticks","tick","i","fontSize","textAnchor","alignmentBaseline","fill","x1","x2","y1","y2","stroke","strokeDasharray","region","strokeWidth","_c","$RefreshReg$"],"sources":["C:/Users/dhruv/OneDrive/Desktop/CS 837 Information Vis/gdp-pollution-app/frontend/src/components/MultiTrendCharts.js"],"sourcesContent":["import React from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst chartWidth = 200;\r\nconst chartHeight = 120;\r\nconst margin = { top: 20, right: 10, bottom: 20, left: 40 };\r\n\r\nconst metrics = [\r\n  { key: 'co2', label: 'CO₂ per Capita (t)', format: d3.format('.2f') },\r\n  { key: 'gdp', label: 'GDP per Capita ($)', format: d3.format(',') },\r\n  { key: 'population', label: 'Population', format: d3.format(',.0f') }\r\n];\r\n\r\nconst MultiTrendCharts = ({ selectedCountries, trendMap, regionColorMap }) => {\r\n  if (selectedCountries.length === 0) return null;\r\n\r\n  const allYears = trendMap[selectedCountries[0].entity]?.map(d => d.year);\r\n  const xScale = d3.scaleLinear()\r\n    .domain(d3.extent(allYears))\r\n    .range([margin.left, chartWidth - margin.right]);\r\n\r\n  return (\r\n    <div style={{ display: 'flex', gap: '40px', marginTop: '20px' }}>\r\n      {selectedCountries.map((country) => (\r\n        <div key={country.entity}>\r\n          <div style={{ marginBottom: '6px', fontWeight: 'bold', textAlign: 'center' }}>\r\n            {country.entity}\r\n          </div>\r\n\r\n          {metrics.map((metric) => {\r\n            const rawData = trendMap[country.entity] || [];\r\n\r\n            const data = rawData.filter(d =>\r\n              d.year >= 1850 &&\r\n              d[metric.key] !== null &&\r\n              d[metric.key] !== undefined &&\r\n              d[metric.key] > 0\r\n            );\r\n\r\n            if (data.length === 0) return null;\r\n\r\n            const yMax = d3.max(data, d => d[metric.key]);\r\n            const yScale = d3.scaleLinear()\r\n              .domain([0, yMax])\r\n              .nice()\r\n              .range([chartHeight - margin.bottom, margin.top]);\r\n\r\n            const line = d3.line()\r\n              .x(d => xScale(d.year))\r\n              .y(d => yScale(d[metric.key]));\r\n\r\n            return (\r\n              <svg\r\n                key={metric.key}\r\n                width={chartWidth}\r\n                height={chartHeight}\r\n                style={{ display: 'block', marginBottom: '10px' }}\r\n              >\r\n                {/* Y-axis grid + labels */}\r\n                {yScale.ticks(3).map((tick, i) => (\r\n                  <g key={i}>\r\n                    <text\r\n                      x={margin.left - 6}\r\n                      y={yScale(tick)}\r\n                      fontSize=\"10\"\r\n                      textAnchor=\"end\"\r\n                      alignmentBaseline=\"middle\"\r\n                      fill=\"#444\"\r\n                    >\r\n                      {metric.format(tick)}\r\n                    </text>\r\n                    <line\r\n                      x1={margin.left}\r\n                      x2={chartWidth - margin.right}\r\n                      y1={yScale(tick)}\r\n                      y2={yScale(tick)}\r\n                      stroke=\"#ccc\"\r\n                      strokeDasharray=\"2 2\"\r\n                    />\r\n                  </g>\r\n                ))}\r\n\r\n                {/* Metric Label */}\r\n                <text\r\n                  x={chartWidth / 2}\r\n                  y={12}\r\n                  textAnchor=\"middle\"\r\n                  fontSize=\"11\"\r\n                  fill=\"#333\"\r\n                >\r\n                  {metric.label}\r\n                </text>\r\n\r\n                {/* Data Line */}\r\n                <path\r\n                  d={line(data)}\r\n                  fill=\"none\"\r\n                  stroke={regionColorMap[country.region] || '#000'}\r\n                  strokeWidth={2}\r\n                />\r\n              </svg>\r\n            );\r\n          })}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MultiTrendCharts;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}