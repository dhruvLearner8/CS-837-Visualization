{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dhruv\\\\OneDrive\\\\Desktop\\\\CS 837 Information Vis\\\\gdp-pollution-app\\\\frontend\\\\src\\\\components\\\\ScatterPlot.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from 'react';\n// import * as d3 from 'd3';\n\n// const ScatterPlot = ({\n//   data,\n//   selectedYear = 2022,\n//   regionColorMap,\n//   activeRegions,\n//   selectedCountries,\n//   setSelectedCountries,\n//   zoomMode,\n//   setHoveredCountry,         \n//   setHoverTrendData  ,\n//   setHoverPos,\n//   zoomExtent,        // ðŸ‘ˆ NEW\n//   setZoomExtent \n// }) => {\n//   const svgRef = useRef();\n\n//   useEffect(() => {\n//     if (!data.length) return;\n\n//     const filteredData = data.filter(d =>\n//       d.year === selectedYear &&\n//       d.entity !== 'World' &&\n//       !d.entity.toLowerCase().includes('income') &&\n//       d.gdp_per_capita > 0 &&\n//       d.co2_emissions_per_capita > 0 &&\n//       d.population > 0\n//     );\n\n//     const width = 900;\n//     const height = 450;\n//     const margin = { top: 40, right: 40, bottom: 60, left: 80 };\n\n//     const svg = d3.select(svgRef.current);\n//     svg.selectAll('*').remove();\n\n//     const chart = svg\n//       .attr('width', width)\n//       .attr('height', height)\n//       .append('g')\n//       .attr('transform', `translate(${margin.left},${margin.top})`);\n\n//     const innerWidth = width - margin.left - margin.right;\n//     const innerHeight = height - margin.top - margin.bottom;\n\n//     // Define clipping path\n// svg.append(\"defs\").append(\"clipPath\")\n// .attr(\"id\", \"clip\")\n// .append(\"rect\")\n// .attr(\"width\", innerWidth)\n// .attr(\"height\", innerHeight);\n\n// // Scales\n// let x = d3.scaleLog()\n//   .domain([50, d3.max(filteredData, d => d.gdp_per_capita || 100000)])\n//   .range([0, innerWidth]);\n\n// let y = d3.scaleLog()\n//   .domain([0.02, d3.max(filteredData, d => d.co2_emissions_per_capita  || 10)])\n//   .range([innerHeight, 0]);\n\n// // if (zoomExtent) {\n// //   x = d3.scaleLog()\n// //     .domain([x.invert(zoomExtent[0][0]), x.invert(zoomExtent[1][0])])\n// //     .range([0, innerWidth]);\n\n// //   y = d3.scaleLog()\n// //     .domain([y.invert(zoomExtent[1][1]), y.invert(zoomExtent[0][1])])\n// //     .range([innerHeight, 0]);\n// // }\n\n// if (zoomExtent) {\n//   const [x0, y0] = zoomExtent[0];\n//   const [x1, y1] = zoomExtent[1];\n\n//   // Pad pixel extent by 10px\n//   const pad = 20;\n//   const paddedX0 = Math.max(x0 - pad, 0);\n//   const paddedX1 = Math.min(x1 + pad, innerWidth);\n//   const paddedY0 = Math.max(y0 - pad, 0);\n//   const paddedY1 = Math.min(y1 + pad, innerHeight);\n\n//   const xStart = x.invert(paddedX0);\n//   const xEnd = x.invert(paddedX1);\n//   const yStart = y.invert(paddedY1); // y is inverted\n//   const yEnd = y.invert(paddedY0);\n\n//   x = d3.scaleLog()\n//     .domain([xStart, xEnd])\n//     .range([0, innerWidth]);\n\n//   y = d3.scaleLog()\n//     .domain([yStart, yEnd])\n//     .range([innerHeight, 0]);\n// }\n\n// // Compute tick values for Y (just major log values)\n// const maxY = d3.max(filteredData, d => d.co2_emissions_per_capita || 10);\n// const yTickValues = [0.1, 1,5, 10, 30].filter(val => val <= maxY);\n// const xTickValues = [100, 1_000, 5_000, 20_000, 100_000];\n\n// // Axes\n// chart.append('g')\n//   .attr('transform', `translate(0, ${innerHeight})`)\n//   .call(d3.axisBottom(x).ticks(10, \"~s\"))\n//   .append('text')\n//   .attr('x', innerWidth / 2)\n//   .attr('y', 40)\n//   .attr('fill', '#000')\n//   .attr('text-anchor', 'middle')\n//   .style('font-size', '14px')\n//   .text('GDP per capita (log scale)');\n\n// // Horizontal Grid Lines (Y-axis)\n// chart.append('g')\n//   .attr('class', 'grid')\n//   .call(d3.axisLeft(y)\n//     .tickValues(yTickValues)        // âœ… Only major ticks\n//     .tickSize(-innerWidth)\n//     .tickFormat('')                 // Hide labels (grid only)\n//   )\n//   .selectAll('line')\n//   .attr('stroke', '#ccc')\n//   .attr('stroke-dasharray', '3 3');\n\n//     chart.append('g')\n//       //.call(d3.axisLeft(y).ticks(10, \"~s\"))\n//       .call(d3.axisLeft(y)\n//   .tickValues(yTickValues)\n//   .tickFormat(d => d.toString())\n// )\n//       .append('text')\n//       .attr('transform', 'rotate(-90)')\n//       .attr('x', -innerHeight / 2)\n//       .attr('y', -60)\n//       .attr('fill', '#000')\n//       .attr('text-anchor', 'middle')\n//       .style('font-size', '14px')\n//       .text('COâ‚‚ emissions per capita in Tonnes (log scale)');\n\n//       chart.selectAll('.grid path.domain').remove();\n\n//       chart.append('g')\n//   .attr('class', 'x-grid')\n//   .attr('transform', `translate(0, ${innerHeight})`)\n//   .call(\n//     d3.axisBottom(x)\n//     .tickValues(xTickValues)\n//       .tickSize(-innerHeight)   // Full-height vertical lines\n//       .tickFormat('')           // No text labels\n//   )\n//   .selectAll('line')\n\n//   .attr('stroke', '#ccc')\n//   .attr('stroke-dasharray', '3 3');\n//   chart.selectAll('.x-grid path.domain').remove();\n//     // Bubbles\n//     chart.selectAll('circle.bubble')\n//       .data(filteredData)\n//       .enter()\n//       .append('circle')\n//       .attr('class', 'bubble')\n//       .attr('cx', d => x(d.gdp_per_capita))\n//       .attr('cy', d => y(d.co2_emissions_per_capita))\n//       .attr('r', d => {\n//         const baseR = Math.sqrt(d.population) / 1000;\n//         return selectedCountries.some(c => c.entity === d.entity) ? baseR + 4 : baseR;\n//       })\n//       .attr('fill', d => {\n//         if (selectedCountries.some(c => c.entity === d.entity)) {\n//           return d3.color(regionColorMap[d.region]).brighter(0.5);\n//         }\n//         return activeRegions.includes(d.region)\n//           ? regionColorMap[d.region] || '#000'\n//           : '#ccc';\n//       })\n//       .attr('stroke', d =>\n//         selectedCountries.some(c => c.entity === d.entity)\n//           ? regionColorMap[d.region]\n//           : 'none'\n//       )\n//       .attr('stroke-width', d =>\n//         selectedCountries.some(c => c.entity === d.entity) ? 3 : 0\n//       )\n//       .attr('opacity', 0.85)\n//       .on('mouseover', function (event, d) {\n//         if (!zoomMode) {\n//           setHoveredCountry(d);\n//  // setHoverTrendData(d.entity);\n//           setHoveredCountry(d);\n//          // setHoverPos({ x: event.pageX + 10, y: event.pageY - 28 });\n//          const svgRect = svgRef.current.getBoundingClientRect();\n//          setHoverPos({\n//            x: event.clientX - svgRect.left + 10,\n//            y: event.clientY - svgRect.top - 28\n//          });\n//           d3.select(this)\n//             .attr('stroke', regionColorMap[d.region])\n//             .attr('stroke-width', 3)\n//             .attr('fill', d3.color(regionColorMap[d.region]).brighter(0.5))\n//             .attr('r', Math.sqrt(d.population) / 1000 + 4);\n//         }\n//       })\n//       .on('mouseout', function (event, d) {\n//         setHoveredCountry(null);\n\n//         const baseR = Math.sqrt(d.population) / 1000;\n//         const isSelected = selectedCountries.some(c => c.entity === d.entity);\n\n//         d3.select(this)\n//           .attr('r', isSelected ? baseR + 4 : baseR)\n//           .attr('stroke', isSelected ? regionColorMap[d.region] : 'none')\n//           .attr('stroke-width', isSelected ? 3 : 0)\n//           .attr('fill', () => {\n//             if (isSelected) {\n//               return d3.color(regionColorMap[d.region]).brighter(0.5);\n//             }\n//             return activeRegions.includes(d.region)\n//               ? regionColorMap[d.region] || '#000'\n//               : '#ccc';\n//           });\n//       })\n//       .on('click', function (event, d) {\n//         if (!zoomMode) {\n//           event.stopPropagation();\n\n//           const isAlreadySelected = selectedCountries.some(c => c.entity === d.entity);\n\n// if (isAlreadySelected) {\n//   // Deselect country\n//   setSelectedCountries(prev => prev.filter(c => c.entity !== d.entity));\n// } else {\n//   // Select country only if less than 3 selected\n//   if (selectedCountries.length < 3) {\n//     setSelectedCountries(prev => [...prev, d]);\n//   } else {\n//     alert('You can only compare up to 3 countries.');\n//   }\n// }\n\n//         }\n//       });\n\n//     // Labels\n//     chart.selectAll('text.label').remove();\n//     chart.selectAll('text.label')\n//       .data(filteredData.filter(d =>\n//         activeRegions.includes(d.region) ||\n//         selectedCountries.some(c => c.entity === d.entity)\n//       ))\n//       .enter()\n//       .append('text')\n//       .attr('class', 'label')\n//       .attr('x', d => x(d.gdp_per_capita))\n//       .attr('y', d => y(d.co2_emissions_per_capita) - 8)\n//       .text(d => d.entity)\n//       .attr('font-size', '10px')\n//       .attr('fill', d => regionColorMap[d.region] || '#333')\n//       .attr('font-weight', 'bold')\n//       .attr('text-anchor', 'middle');\n\n//     // Only enable brush if zoom mode is on\n//     if (zoomMode) {\n//       const brush = d3.brush()\n//         .extent([[0, 0], [innerWidth, innerHeight]])\n//         .on(\"end\", ({ selection }) => {\n//           if (selection) {\n//             setZoomExtent(selection);\n//           }\n//         });\n\n//       chart.append(\"g\")\n//         .attr(\"class\", \"brush\")\n//         .call(brush);\n//     }\n\n//   }, [data, selectedYear, activeRegions, regionColorMap, selectedCountries, zoomExtent, zoomMode]);\n\n//   return (\n//     <>\n//       <svg ref={svgRef}></svg>\n\n//     </>\n//   );\n// };\n\n// export default ScatterPlot;\n\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScatterPlot = ({\n  data,\n  selectedYear = 2022,\n  regionColorMap,\n  activeRegions,\n  selectedCountries,\n  setSelectedCountries,\n  zoomMode,\n  setHoveredCountry,\n  setHoverPos,\n  zoomExtent,\n  setZoomExtent\n}) => {\n  _s();\n  const svgRef = useRef();\n  useEffect(() => {\n    if (!data.length) return;\n    const filteredData = data.filter(d => d.year === selectedYear && d.entity !== 'World' && !d.entity.toLowerCase().includes('income') && d.gdp_per_capita > 0 && d.co2_emissions_per_capita > 0 && d.population > 0);\n    const width = 900;\n    const height = 450;\n    const margin = {\n      top: 40,\n      right: 40,\n      bottom: 60,\n      left: 80\n    };\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove();\n    const chart = svg.attr('width', width).attr('height', height).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n    svg.append(\"defs\").append(\"clipPath\").attr(\"id\", \"clip\").append(\"rect\").attr(\"width\", innerWidth).attr(\"height\", innerHeight);\n    let x = d3.scaleLog().domain([50, d3.max(filteredData, d => d.gdp_per_capita || 100000)]).range([0, innerWidth]);\n    let y = d3.scaleLog().domain([0.02, d3.max(filteredData, d => d.co2_emissions_per_capita || 10)]).range([innerHeight, 0]);\n    if (zoomExtent) {\n      const [x0, y0] = zoomExtent[0];\n      const [x1, y1] = zoomExtent[1];\n      const pad = 20;\n      const paddedX0 = Math.max(x0 - pad, 0);\n      const paddedX1 = Math.min(x1 + pad, innerWidth);\n      const paddedY0 = Math.max(y0 - pad, 0);\n      const paddedY1 = Math.min(y1 + pad, innerHeight);\n      const xStart = x.invert(paddedX0);\n      const xEnd = x.invert(paddedX1);\n      const yStart = y.invert(paddedY1);\n      const yEnd = y.invert(paddedY0);\n      x = d3.scaleLog().domain([xStart, xEnd]).range([0, innerWidth]);\n      y = d3.scaleLog().domain([yStart, yEnd]).range([innerHeight, 0]);\n    }\n    const yTickValues = [0.1, 1, 5, 10, 30].filter(val => val <= y.domain()[1]);\n    const xTickValues = [50, 100, 1000, 5000, 20000, 100000];\n    chart.append('g').attr('transform', `translate(0, ${innerHeight})`).call(d3.axisBottom(x).tickValues(xTickValues).tickFormat(d3.format(\"~s\")));\n    chart.append('g').call(d3.axisLeft(y).tickValues(yTickValues).tickFormat(d => d.toString())).append('text').attr('transform', 'rotate(-90)').attr('x', -innerHeight / 2).attr('y', -60).attr('fill', '#000').style('font-size', '14px').attr('text-anchor', 'middle').text('COâ‚‚ emissions per capita in Tonnes (log scale)');\n    chart.append('g').attr('class', 'x-grid').attr('transform', `translate(0, ${innerHeight})`).call(d3.axisBottom(x).tickValues(xTickValues).tickSize(-innerHeight).tickFormat('')).selectAll('line').attr('stroke', '#ccc').attr('stroke-dasharray', '3 3');\n    chart.append('g').attr('class', 'grid').call(d3.axisLeft(y).tickValues(yTickValues).tickSize(-innerWidth).tickFormat('')).selectAll('line').attr('stroke', '#ccc').attr('stroke-dasharray', '3 3');\n    chart.selectAll('.x-grid path.domain').remove();\n    chart.selectAll('.grid path.domain').remove();\n\n    // Bubbles\n    chart.selectAll('circle.bubble').data(filteredData).enter().append('circle').attr('class', 'bubble').attr('clip-path', 'url(#clip)').attr('cx', d => x(d.gdp_per_capita)).attr('cy', d => y(d.co2_emissions_per_capita)).attr('r', d => {\n      const baseR = Math.sqrt(d.population) / 1000;\n      return selectedCountries.some(c => c.entity === d.entity) ? baseR + 4 : baseR;\n    }).attr('fill', d => {\n      if (selectedCountries.some(c => c.entity === d.entity)) {\n        return d3.color(regionColorMap[d.region]).brighter(0.5);\n      }\n      return activeRegions.includes(d.region) ? regionColorMap[d.region] || '#000' : '#ccc';\n    }).attr('stroke', d => selectedCountries.some(c => c.entity === d.entity) ? regionColorMap[d.region] : 'none').attr('stroke-width', d => selectedCountries.some(c => c.entity === d.entity) ? 3 : 0).attr('opacity', 0.85).on('mouseover', function (event, d) {\n      if (!zoomMode) {\n        setHoveredCountry(d);\n        const svgRect = svgRef.current.getBoundingClientRect();\n        setHoverPos({\n          x: event.clientX - svgRect.left + 10,\n          y: event.clientY - svgRect.top - 28\n        });\n        d3.select(this).attr('stroke', regionColorMap[d.region]).attr('stroke-width', 3).attr('fill', d3.color(regionColorMap[d.region]).brighter(0.5)).attr('r', Math.sqrt(d.population) / 1000 + 4);\n      }\n    }).on('mouseout', function (event, d) {\n      setHoveredCountry(null);\n      const baseR = Math.sqrt(d.population) / 1000;\n      const isSelected = selectedCountries.some(c => c.entity === d.entity);\n      d3.select(this).attr('r', isSelected ? baseR + 4 : baseR).attr('stroke', isSelected ? regionColorMap[d.region] : 'none').attr('stroke-width', isSelected ? 3 : 0).attr('fill', () => {\n        if (isSelected) {\n          return d3.color(regionColorMap[d.region]).brighter(0.5);\n        }\n        return activeRegions.includes(d.region) ? regionColorMap[d.region] || '#000' : '#ccc';\n      });\n    }).on('click', function (event, d) {\n      if (!zoomMode) {\n        event.stopPropagation();\n        const isAlreadySelected = selectedCountries.some(c => c.entity === d.entity);\n        if (isAlreadySelected) {\n          setSelectedCountries(prev => prev.filter(c => c.entity !== d.entity));\n        } else if (selectedCountries.length < 3) {\n          setSelectedCountries(prev => [...prev, d]);\n        } else {\n          alert('You can only compare up to 3 countries.');\n        }\n      }\n    });\n\n    // Labels\n    chart.selectAll('text.label').data(filteredData.filter(d => activeRegions.includes(d.region) || selectedCountries.some(c => c.entity === d.entity))).enter().append('text').attr('class', 'label').attr('x', d => x(d.gdp_per_capita)).attr('y', d => y(d.co2_emissions_per_capita) - 8).text(d => d.entity).attr('font-size', '10px').attr('fill', d => regionColorMap[d.region] || '#333').attr('font-weight', 'bold').attr('text-anchor', 'middle');\n\n    // Brush zoom logic\n    if (zoomMode) {\n      const brush = d3.brush().extent([[0, 0], [innerWidth, innerHeight]]).on(\"end\", ({\n        selection\n      }) => {\n        if (selection) {\n          setZoomExtent(selection);\n        }\n      });\n      chart.append(\"g\").attr(\"class\", \"brush\").call(brush);\n    }\n  }, [data, selectedYear, activeRegions, regionColorMap, selectedCountries, zoomExtent, zoomMode]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svgRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 532,\n    columnNumber: 10\n  }, this);\n};\n_s(ScatterPlot, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = ScatterPlot;\nexport default ScatterPlot;\nvar _c;\n$RefreshReg$(_c, \"ScatterPlot\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","ScatterPlot","data","selectedYear","regionColorMap","activeRegions","selectedCountries","setSelectedCountries","zoomMode","setHoveredCountry","setHoverPos","zoomExtent","setZoomExtent","_s","svgRef","length","filteredData","filter","d","year","entity","toLowerCase","includes","gdp_per_capita","co2_emissions_per_capita","population","width","height","margin","top","right","bottom","left","svg","select","current","selectAll","remove","chart","attr","append","innerWidth","innerHeight","x","scaleLog","domain","max","range","y","x0","y0","x1","y1","pad","paddedX0","Math","paddedX1","min","paddedY0","paddedY1","xStart","invert","xEnd","yStart","yEnd","yTickValues","val","xTickValues","call","axisBottom","tickValues","tickFormat","format","axisLeft","toString","style","text","tickSize","enter","baseR","sqrt","some","c","color","region","brighter","on","event","svgRect","getBoundingClientRect","clientX","clientY","isSelected","stopPropagation","isAlreadySelected","prev","alert","brush","extent","selection","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/dhruv/OneDrive/Desktop/CS 837 Information Vis/gdp-pollution-app/frontend/src/components/ScatterPlot.js"],"sourcesContent":["\r\n\r\n// import React, { useEffect, useRef, useState } from 'react';\r\n// import * as d3 from 'd3';\r\n\r\n// const ScatterPlot = ({\r\n//   data,\r\n//   selectedYear = 2022,\r\n//   regionColorMap,\r\n//   activeRegions,\r\n//   selectedCountries,\r\n//   setSelectedCountries,\r\n//   zoomMode,\r\n//   setHoveredCountry,         \r\n//   setHoverTrendData  ,\r\n//   setHoverPos,\r\n//   zoomExtent,        // ðŸ‘ˆ NEW\r\n//   setZoomExtent \r\n// }) => {\r\n//   const svgRef = useRef();\r\n  \r\n  \r\n\r\n//   useEffect(() => {\r\n//     if (!data.length) return;\r\n\r\n//     const filteredData = data.filter(d =>\r\n//       d.year === selectedYear &&\r\n//       d.entity !== 'World' &&\r\n//       !d.entity.toLowerCase().includes('income') &&\r\n//       d.gdp_per_capita > 0 &&\r\n//       d.co2_emissions_per_capita > 0 &&\r\n//       d.population > 0\r\n//     );\r\n\r\n//     const width = 900;\r\n//     const height = 450;\r\n//     const margin = { top: 40, right: 40, bottom: 60, left: 80 };\r\n\r\n//     const svg = d3.select(svgRef.current);\r\n//     svg.selectAll('*').remove();\r\n\r\n//     const chart = svg\r\n//       .attr('width', width)\r\n//       .attr('height', height)\r\n//       .append('g')\r\n//       .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n//     const innerWidth = width - margin.left - margin.right;\r\n//     const innerHeight = height - margin.top - margin.bottom;\r\n\r\n//     // Define clipping path\r\n// svg.append(\"defs\").append(\"clipPath\")\r\n// .attr(\"id\", \"clip\")\r\n// .append(\"rect\")\r\n// .attr(\"width\", innerWidth)\r\n// .attr(\"height\", innerHeight);\r\n\r\n\r\n// // Scales\r\n// let x = d3.scaleLog()\r\n//   .domain([50, d3.max(filteredData, d => d.gdp_per_capita || 100000)])\r\n//   .range([0, innerWidth]);\r\n\r\n// let y = d3.scaleLog()\r\n//   .domain([0.02, d3.max(filteredData, d => d.co2_emissions_per_capita  || 10)])\r\n//   .range([innerHeight, 0]);\r\n\r\n// // if (zoomExtent) {\r\n// //   x = d3.scaleLog()\r\n// //     .domain([x.invert(zoomExtent[0][0]), x.invert(zoomExtent[1][0])])\r\n// //     .range([0, innerWidth]);\r\n\r\n// //   y = d3.scaleLog()\r\n// //     .domain([y.invert(zoomExtent[1][1]), y.invert(zoomExtent[0][1])])\r\n// //     .range([innerHeight, 0]);\r\n// // }\r\n\r\n// if (zoomExtent) {\r\n//   const [x0, y0] = zoomExtent[0];\r\n//   const [x1, y1] = zoomExtent[1];\r\n\r\n//   // Pad pixel extent by 10px\r\n//   const pad = 20;\r\n//   const paddedX0 = Math.max(x0 - pad, 0);\r\n//   const paddedX1 = Math.min(x1 + pad, innerWidth);\r\n//   const paddedY0 = Math.max(y0 - pad, 0);\r\n//   const paddedY1 = Math.min(y1 + pad, innerHeight);\r\n\r\n//   const xStart = x.invert(paddedX0);\r\n//   const xEnd = x.invert(paddedX1);\r\n//   const yStart = y.invert(paddedY1); // y is inverted\r\n//   const yEnd = y.invert(paddedY0);\r\n\r\n//   x = d3.scaleLog()\r\n//     .domain([xStart, xEnd])\r\n//     .range([0, innerWidth]);\r\n\r\n//   y = d3.scaleLog()\r\n//     .domain([yStart, yEnd])\r\n//     .range([innerHeight, 0]);\r\n// }\r\n\r\n\r\n// // Compute tick values for Y (just major log values)\r\n// const maxY = d3.max(filteredData, d => d.co2_emissions_per_capita || 10);\r\n// const yTickValues = [0.1, 1,5, 10, 30].filter(val => val <= maxY);\r\n// const xTickValues = [100, 1_000, 5_000, 20_000, 100_000];\r\n\r\n\r\n// // Axes\r\n// chart.append('g')\r\n//   .attr('transform', `translate(0, ${innerHeight})`)\r\n//   .call(d3.axisBottom(x).ticks(10, \"~s\"))\r\n//   .append('text')\r\n//   .attr('x', innerWidth / 2)\r\n//   .attr('y', 40)\r\n//   .attr('fill', '#000')\r\n//   .attr('text-anchor', 'middle')\r\n//   .style('font-size', '14px')\r\n//   .text('GDP per capita (log scale)');\r\n\r\n// // Horizontal Grid Lines (Y-axis)\r\n// chart.append('g')\r\n//   .attr('class', 'grid')\r\n//   .call(d3.axisLeft(y)\r\n//     .tickValues(yTickValues)        // âœ… Only major ticks\r\n//     .tickSize(-innerWidth)\r\n//     .tickFormat('')                 // Hide labels (grid only)\r\n//   )\r\n//   .selectAll('line')\r\n//   .attr('stroke', '#ccc')\r\n//   .attr('stroke-dasharray', '3 3');\r\n\r\n\r\n//     chart.append('g')\r\n//       //.call(d3.axisLeft(y).ticks(10, \"~s\"))\r\n//       .call(d3.axisLeft(y)\r\n//   .tickValues(yTickValues)\r\n//   .tickFormat(d => d.toString())\r\n// )\r\n//       .append('text')\r\n//       .attr('transform', 'rotate(-90)')\r\n//       .attr('x', -innerHeight / 2)\r\n//       .attr('y', -60)\r\n//       .attr('fill', '#000')\r\n//       .attr('text-anchor', 'middle')\r\n//       .style('font-size', '14px')\r\n//       .text('COâ‚‚ emissions per capita in Tonnes (log scale)');\r\n\r\n//       chart.selectAll('.grid path.domain').remove();\r\n\r\n//       chart.append('g')\r\n//   .attr('class', 'x-grid')\r\n//   .attr('transform', `translate(0, ${innerHeight})`)\r\n//   .call(\r\n//     d3.axisBottom(x)\r\n//     .tickValues(xTickValues)\r\n//       .tickSize(-innerHeight)   // Full-height vertical lines\r\n//       .tickFormat('')           // No text labels\r\n//   )\r\n//   .selectAll('line')\r\n  \r\n//   .attr('stroke', '#ccc')\r\n//   .attr('stroke-dasharray', '3 3');\r\n//   chart.selectAll('.x-grid path.domain').remove();\r\n//     // Bubbles\r\n//     chart.selectAll('circle.bubble')\r\n//       .data(filteredData)\r\n//       .enter()\r\n//       .append('circle')\r\n//       .attr('class', 'bubble')\r\n//       .attr('cx', d => x(d.gdp_per_capita))\r\n//       .attr('cy', d => y(d.co2_emissions_per_capita))\r\n//       .attr('r', d => {\r\n//         const baseR = Math.sqrt(d.population) / 1000;\r\n//         return selectedCountries.some(c => c.entity === d.entity) ? baseR + 4 : baseR;\r\n//       })\r\n//       .attr('fill', d => {\r\n//         if (selectedCountries.some(c => c.entity === d.entity)) {\r\n//           return d3.color(regionColorMap[d.region]).brighter(0.5);\r\n//         }\r\n//         return activeRegions.includes(d.region)\r\n//           ? regionColorMap[d.region] || '#000'\r\n//           : '#ccc';\r\n//       })\r\n//       .attr('stroke', d =>\r\n//         selectedCountries.some(c => c.entity === d.entity)\r\n//           ? regionColorMap[d.region]\r\n//           : 'none'\r\n//       )\r\n//       .attr('stroke-width', d =>\r\n//         selectedCountries.some(c => c.entity === d.entity) ? 3 : 0\r\n//       )\r\n//       .attr('opacity', 0.85)\r\n//       .on('mouseover', function (event, d) {\r\n//         if (!zoomMode) {\r\n//           setHoveredCountry(d);\r\n//  // setHoverTrendData(d.entity);\r\n//           setHoveredCountry(d);\r\n//          // setHoverPos({ x: event.pageX + 10, y: event.pageY - 28 });\r\n//          const svgRect = svgRef.current.getBoundingClientRect();\r\n//          setHoverPos({\r\n//            x: event.clientX - svgRect.left + 10,\r\n//            y: event.clientY - svgRect.top - 28\r\n//          });\r\n//           d3.select(this)\r\n//             .attr('stroke', regionColorMap[d.region])\r\n//             .attr('stroke-width', 3)\r\n//             .attr('fill', d3.color(regionColorMap[d.region]).brighter(0.5))\r\n//             .attr('r', Math.sqrt(d.population) / 1000 + 4);\r\n//         }\r\n//       })\r\n//       .on('mouseout', function (event, d) {\r\n//         setHoveredCountry(null);\r\n\r\n//         const baseR = Math.sqrt(d.population) / 1000;\r\n//         const isSelected = selectedCountries.some(c => c.entity === d.entity);\r\n\r\n//         d3.select(this)\r\n//           .attr('r', isSelected ? baseR + 4 : baseR)\r\n//           .attr('stroke', isSelected ? regionColorMap[d.region] : 'none')\r\n//           .attr('stroke-width', isSelected ? 3 : 0)\r\n//           .attr('fill', () => {\r\n//             if (isSelected) {\r\n//               return d3.color(regionColorMap[d.region]).brighter(0.5);\r\n//             }\r\n//             return activeRegions.includes(d.region)\r\n//               ? regionColorMap[d.region] || '#000'\r\n//               : '#ccc';\r\n//           });\r\n//       })\r\n//       .on('click', function (event, d) {\r\n//         if (!zoomMode) {\r\n//           event.stopPropagation();\r\n         \r\n//           const isAlreadySelected = selectedCountries.some(c => c.entity === d.entity);\r\n\r\n// if (isAlreadySelected) {\r\n//   // Deselect country\r\n//   setSelectedCountries(prev => prev.filter(c => c.entity !== d.entity));\r\n// } else {\r\n//   // Select country only if less than 3 selected\r\n//   if (selectedCountries.length < 3) {\r\n//     setSelectedCountries(prev => [...prev, d]);\r\n//   } else {\r\n//     alert('You can only compare up to 3 countries.');\r\n//   }\r\n// }\r\n\r\n//         }\r\n//       });\r\n\r\n//     // Labels\r\n//     chart.selectAll('text.label').remove();\r\n//     chart.selectAll('text.label')\r\n//       .data(filteredData.filter(d =>\r\n//         activeRegions.includes(d.region) ||\r\n//         selectedCountries.some(c => c.entity === d.entity)\r\n//       ))\r\n//       .enter()\r\n//       .append('text')\r\n//       .attr('class', 'label')\r\n//       .attr('x', d => x(d.gdp_per_capita))\r\n//       .attr('y', d => y(d.co2_emissions_per_capita) - 8)\r\n//       .text(d => d.entity)\r\n//       .attr('font-size', '10px')\r\n//       .attr('fill', d => regionColorMap[d.region] || '#333')\r\n//       .attr('font-weight', 'bold')\r\n//       .attr('text-anchor', 'middle');\r\n\r\n//     // Only enable brush if zoom mode is on\r\n//     if (zoomMode) {\r\n//       const brush = d3.brush()\r\n//         .extent([[0, 0], [innerWidth, innerHeight]])\r\n//         .on(\"end\", ({ selection }) => {\r\n//           if (selection) {\r\n//             setZoomExtent(selection);\r\n//           }\r\n//         });\r\n\r\n//       chart.append(\"g\")\r\n//         .attr(\"class\", \"brush\")\r\n//         .call(brush);\r\n//     }\r\n\r\n//   }, [data, selectedYear, activeRegions, regionColorMap, selectedCountries, zoomExtent, zoomMode]);\r\n\r\n//   return (\r\n//     <>\r\n//       <svg ref={svgRef}></svg>\r\n\r\n      \r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default ScatterPlot;\r\n\r\nimport React, { useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst ScatterPlot = ({\r\n  data,\r\n  selectedYear = 2022,\r\n  regionColorMap,\r\n  activeRegions,\r\n  selectedCountries,\r\n  setSelectedCountries,\r\n  zoomMode,\r\n  setHoveredCountry,\r\n  setHoverPos,\r\n  zoomExtent,\r\n  setZoomExtent\r\n}) => {\r\n  const svgRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!data.length) return;\r\n\r\n    const filteredData = data.filter(d =>\r\n      d.year === selectedYear &&\r\n      d.entity !== 'World' &&\r\n      !d.entity.toLowerCase().includes('income') &&\r\n      d.gdp_per_capita > 0 &&\r\n      d.co2_emissions_per_capita > 0 &&\r\n      d.population > 0\r\n    );\r\n\r\n    const width = 900;\r\n    const height = 450;\r\n    const margin = { top: 40, right: 40, bottom: 60, left: 80 };\r\n\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll('*').remove();\r\n\r\n    const chart = svg\r\n      .attr('width', width)\r\n      .attr('height', height)\r\n      .append('g')\r\n      .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n    const innerWidth = width - margin.left - margin.right;\r\n    const innerHeight = height - margin.top - margin.bottom;\r\n\r\n    svg.append(\"defs\").append(\"clipPath\")\r\n      .attr(\"id\", \"clip\")\r\n      .append(\"rect\")\r\n      .attr(\"width\", innerWidth)\r\n      .attr(\"height\", innerHeight);\r\n\r\n    let x = d3.scaleLog()\r\n      .domain([50, d3.max(filteredData, d => d.gdp_per_capita || 100000)])\r\n      .range([0, innerWidth]);\r\n\r\n    let y = d3.scaleLog()\r\n      .domain([0.02, d3.max(filteredData, d => d.co2_emissions_per_capita || 10)])\r\n      .range([innerHeight, 0]);\r\n\r\n    if (zoomExtent) {\r\n      const [x0, y0] = zoomExtent[0];\r\n      const [x1, y1] = zoomExtent[1];\r\n      const pad = 20;\r\n\r\n      const paddedX0 = Math.max(x0 - pad, 0);\r\n      const paddedX1 = Math.min(x1 + pad, innerWidth);\r\n      const paddedY0 = Math.max(y0 - pad, 0);\r\n      const paddedY1 = Math.min(y1 + pad, innerHeight);\r\n\r\n      const xStart = x.invert(paddedX0);\r\n      const xEnd = x.invert(paddedX1);\r\n      const yStart = y.invert(paddedY1);\r\n      const yEnd = y.invert(paddedY0);\r\n\r\n      x = d3.scaleLog().domain([xStart, xEnd]).range([0, innerWidth]);\r\n      y = d3.scaleLog().domain([yStart, yEnd]).range([innerHeight, 0]);\r\n    }\r\n\r\n    const yTickValues = [0.1, 1, 5, 10, 30].filter(val => val <= y.domain()[1]);\r\n    const xTickValues = [50, 100, 1_000, 5_000, 20_000, 100_000];\r\n\r\n    chart.append('g')\r\n      .attr('transform', `translate(0, ${innerHeight})`)\r\n      .call(d3.axisBottom(x).tickValues(xTickValues).tickFormat(d3.format(\"~s\")));\r\n\r\n    chart.append('g')\r\n      .call(d3.axisLeft(y).tickValues(yTickValues).tickFormat(d => d.toString()))\r\n      .append('text')\r\n      .attr('transform', 'rotate(-90)')\r\n      .attr('x', -innerHeight / 2)\r\n      .attr('y', -60)\r\n      .attr('fill', '#000')\r\n      .style('font-size', '14px')\r\n      .attr('text-anchor', 'middle')\r\n      .text('COâ‚‚ emissions per capita in Tonnes (log scale)');\r\n\r\n    chart.append('g')\r\n      .attr('class', 'x-grid')\r\n      .attr('transform', `translate(0, ${innerHeight})`)\r\n      .call(\r\n        d3.axisBottom(x)\r\n          .tickValues(xTickValues)\r\n          .tickSize(-innerHeight)\r\n          .tickFormat('')\r\n      )\r\n      .selectAll('line')\r\n      .attr('stroke', '#ccc')\r\n      .attr('stroke-dasharray', '3 3');\r\n\r\n    chart.append('g')\r\n      .attr('class', 'grid')\r\n      .call(d3.axisLeft(y)\r\n        .tickValues(yTickValues)\r\n        .tickSize(-innerWidth)\r\n        .tickFormat('')\r\n      )\r\n      .selectAll('line')\r\n      .attr('stroke', '#ccc')\r\n      .attr('stroke-dasharray', '3 3');\r\n\r\n    chart.selectAll('.x-grid path.domain').remove();\r\n    chart.selectAll('.grid path.domain').remove();\r\n\r\n    // Bubbles\r\n    chart.selectAll('circle.bubble')\r\n      .data(filteredData)\r\n      .enter()\r\n      .append('circle')\r\n      .attr('class', 'bubble')\r\n      .attr('clip-path', 'url(#clip)')\r\n      .attr('cx', d => x(d.gdp_per_capita))\r\n      .attr('cy', d => y(d.co2_emissions_per_capita))\r\n      .attr('r', d => {\r\n        const baseR = Math.sqrt(d.population) / 1000;\r\n        return selectedCountries.some(c => c.entity === d.entity) ? baseR + 4 : baseR;\r\n      })\r\n      .attr('fill', d => {\r\n        if (selectedCountries.some(c => c.entity === d.entity)) {\r\n          return d3.color(regionColorMap[d.region]).brighter(0.5);\r\n        }\r\n        return activeRegions.includes(d.region) ? regionColorMap[d.region] || '#000' : '#ccc';\r\n      })\r\n      .attr('stroke', d =>\r\n        selectedCountries.some(c => c.entity === d.entity)\r\n          ? regionColorMap[d.region]\r\n          : 'none'\r\n      )\r\n      .attr('stroke-width', d =>\r\n        selectedCountries.some(c => c.entity === d.entity) ? 3 : 0\r\n      )\r\n      .attr('opacity', 0.85)\r\n      .on('mouseover', function (event, d) {\r\n        if (!zoomMode) {\r\n          setHoveredCountry(d);\r\n          const svgRect = svgRef.current.getBoundingClientRect();\r\n          setHoverPos({\r\n            x: event.clientX - svgRect.left + 10,\r\n            y: event.clientY - svgRect.top - 28\r\n          });\r\n          d3.select(this)\r\n            .attr('stroke', regionColorMap[d.region])\r\n            .attr('stroke-width', 3)\r\n            .attr('fill', d3.color(regionColorMap[d.region]).brighter(0.5))\r\n            .attr('r', Math.sqrt(d.population) / 1000 + 4);\r\n        }\r\n      })\r\n      .on('mouseout', function (event, d) {\r\n        setHoveredCountry(null);\r\n        const baseR = Math.sqrt(d.population) / 1000;\r\n        const isSelected = selectedCountries.some(c => c.entity === d.entity);\r\n        d3.select(this)\r\n          .attr('r', isSelected ? baseR + 4 : baseR)\r\n          .attr('stroke', isSelected ? regionColorMap[d.region] : 'none')\r\n          .attr('stroke-width', isSelected ? 3 : 0)\r\n          .attr('fill', () => {\r\n            if (isSelected) {\r\n              return d3.color(regionColorMap[d.region]).brighter(0.5);\r\n            }\r\n            return activeRegions.includes(d.region)\r\n              ? regionColorMap[d.region] || '#000'\r\n              : '#ccc';\r\n          });\r\n      })\r\n      .on('click', function (event, d) {\r\n        if (!zoomMode) {\r\n          event.stopPropagation();\r\n          const isAlreadySelected = selectedCountries.some(c => c.entity === d.entity);\r\n          if (isAlreadySelected) {\r\n            setSelectedCountries(prev => prev.filter(c => c.entity !== d.entity));\r\n          } else if (selectedCountries.length < 3) {\r\n            setSelectedCountries(prev => [...prev, d]);\r\n          } else {\r\n            alert('You can only compare up to 3 countries.');\r\n          }\r\n        }\r\n      });\r\n\r\n    // Labels\r\n    chart.selectAll('text.label')\r\n      .data(filteredData.filter(d =>\r\n        activeRegions.includes(d.region) ||\r\n        selectedCountries.some(c => c.entity === d.entity)\r\n      ))\r\n      .enter()\r\n      .append('text')\r\n      .attr('class', 'label')\r\n      .attr('x', d => x(d.gdp_per_capita))\r\n      .attr('y', d => y(d.co2_emissions_per_capita) - 8)\r\n      .text(d => d.entity)\r\n      .attr('font-size', '10px')\r\n      .attr('fill', d => regionColorMap[d.region] || '#333')\r\n      .attr('font-weight', 'bold')\r\n      .attr('text-anchor', 'middle');\r\n\r\n    // Brush zoom logic\r\n    if (zoomMode) {\r\n      const brush = d3.brush()\r\n        .extent([[0, 0], [innerWidth, innerHeight]])\r\n        .on(\"end\", ({ selection }) => {\r\n          if (selection) {\r\n            setZoomExtent(selection);\r\n          }\r\n        });\r\n\r\n      chart.append(\"g\")\r\n        .attr(\"class\", \"brush\")\r\n        .call(brush);\r\n    }\r\n\r\n  }, [data, selectedYear, activeRegions, regionColorMap, selectedCountries, zoomExtent, zoomMode]);\r\n\r\n  return <svg ref={svgRef}></svg>;\r\n};\r\n\r\nexport default ScatterPlot;\r\n"],"mappings":";;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}