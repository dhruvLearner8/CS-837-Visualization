{"ast":null,"code":"\n// import React, { useState, useEffect, useMemo } from 'react';\n// import axios from 'axios';\n// import ScatterPlot from './ScatterPlot';\n// import CountrySelector from './CountrySelector';\n// import MiniTrendChart from './MiniTrendChart';\n// import * as d3 from 'd3';\n\n// const regionList = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'];\n\n// const regionColorMap = {};\n// regionList.forEach((region, i) => {\n//   regionColorMap[region] = d3.schemeTableau10[i];\n// });\n\n// const Home = () => {\n//   const [data, setData] = useState([]);\n//   const [selectedYear, setSelectedYear] = useState(2022);\n//   const [yearRange, setYearRange] = useState({ min: 1950, max: 2022 });\n//   const [activeRegions, setActiveRegions] = useState([]);\n//   const [selectedCountries, setSelectedCountries] = useState([]);\n//   const [isPlaying, setIsPlaying] = useState(false);\n//   const [intervalId, setIntervalId] = useState(null);\n//   const [showCountrySelector, setShowCountrySelector] = useState(false);\n//   const [zoomMode, setZoomMode] = useState(false);\n\n//   const [hoveredCountry, setHoveredCountry] = useState(null);\n//   const [hoverTrendData, setHoverTrendData] = useState([]);\n//   const [hoverPos, setHoverPos] = useState({ x: 0, y: 0 });\n\n//   const countryTrendMap = useMemo(() => {\n//     const map = {};\n//     data.forEach(d => {\n//       if (!map[d.entity]) map[d.entity] = [];\n//       map[d.entity].push({ year: d.year, co2: d.co2_emissions_per_capita });\n//     });\n//     return map;\n//   }, [data]);\n\n//   const startAnimation = () => {\n//     if (!isPlaying) {\n//       const id = setInterval(() => {\n//         setSelectedYear(prev => {\n//           const nextYear = prev + 1;\n//           if (nextYear > yearRange.max) {\n//             clearInterval(id);\n//             setIsPlaying(false);\n//             return yearRange.max;\n//           }\n//           return nextYear;\n//         });\n//       }, 100);\n//       setIntervalId(id);\n//       setIsPlaying(true);\n//     }\n//   };\n\n//   const stopAnimation = () => {\n//     clearInterval(intervalId);\n//     setIsPlaying(false);\n//   };\n\n//   const toggleAnimation = () => {\n//     isPlaying ? stopAnimation() : startAnimation();\n//   };\n\n//   useEffect(() => {\n//     axios.get('http://localhost:5000/api/data')\n//       .then(response => {\n//         setData(response.data);\n//         setYearRange({ min: 1800, max: 2022 });\n//       })\n//       .catch(error => console.error('Error fetching data:', error));\n\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   const toggleRegion = (region) => {\n//     setActiveRegions(prev =>\n//       prev.includes(region)\n//         ? prev.filter(r => r !== region)\n//         : [...prev, region]\n//     );\n//   };\n\n//   const toggleCountry = (country) => {\n//     const exists = selectedCountries.find(c => c.entity === country.entity);\n//     if (exists) {\n//       setSelectedCountries(prev => prev.filter(c => c.entity !== country.entity));\n//     } else {\n//       setSelectedCountries(prev => [...prev, country]);\n//     }\n//   };\n\n//   return (\n//     <div style={{ padding: '20px', position: 'relative' }}>\n//       <h1>GDP vs Pollution Visualization</h1>\n\n//       {/* Zoom Toggle */}\n//       <div style={{ marginBottom: '12px', display: 'flex', gap: '10px', alignItems: 'center' }}>\n//         <button\n//           onClick={() => setZoomMode(!zoomMode)}\n//           style={{\n//             padding: '8px 12px',\n//             backgroundColor: zoomMode ? '#007bff' : '#ccc',\n//             color: '#fff',\n//             border: 'none',\n//             borderRadius: '4px',\n//             cursor: 'pointer'\n//           }}\n//         >\n//           {zoomMode ? 'üß≠ Zoom Mode: ON' : 'üîç Enable Zoom Mode'}\n//         </button>\n//       </div>\n\n//       <div style={{ maxWidth: '1100px', margin: '0 auto', display: 'flex', position: 'relative' }}>\n//         {/* Chart */}\n//         <div style={{ flex: 1 }}>\n//           <ScatterPlot\n//             data={data}\n//             selectedYear={selectedYear}\n//             regionColorMap={regionColorMap}\n//             activeRegions={activeRegions}\n//             selectedCountries={selectedCountries}\n//             setSelectedCountries={setSelectedCountries}\n//             zoomMode={zoomMode}\n//             setHoveredCountry={setHoveredCountry}\n//             setHoverTrendData={(entity) => setHoverTrendData(countryTrendMap[entity] || [])}\n//             setHoverPos={setHoverPos}\n//           />\n\n//           {/* Timeline */}\n//           <div style={{\n//             display: 'flex',\n//             alignItems: 'center',\n//             justifyContent: 'center',\n//             width: '800px',\n//             margin: '30px auto 20px auto',\n//             gap: '10px'\n//           }}>\n//             <button\n//               onClick={toggleAnimation}\n//               style={{\n//                 width: '40px',\n//                 padding: '8px',\n//                 fontSize: '14px',\n//                 color: 'grey',\n//                 border: '1px solid #999',\n//                 borderRadius: '4px',\n//                 cursor: 'pointer'\n//               }}\n//             >\n//               {isPlaying ? '‚ùö‚ùö' : '‚ñ∂'}\n//             </button>\n\n//             <input\n//               type=\"range\"\n//               min={yearRange.min}\n//               max={yearRange.max}\n//               value={selectedYear}\n//               onChange={(e) => setSelectedYear(parseInt(e.target.value))}\n//               style={{\n//                 flex: 1,\n//                 height: '6px',\n//                 background: '#ccc',\n//                 borderRadius: '3px',\n//                 appearance: 'none',\n//                 WebkitAppearance: 'none',\n//                 outline: 'none',\n//                 cursor: 'pointer',\n//                 accentColor: 'grey'\n//               }}\n//             />\n//           </div>\n//         </div>\n\n//         {/* Right Panel: Region Legend + Mini Chart */}\n//         <div style={{ marginLeft: '30px', width: '180px' }}>\n//           <h4 style={{ marginBottom: '12px' }}>Regions</h4>\n//           <form>\n//             {regionList.map(region => (\n//               <label key={region} style={{ display: 'flex', alignItems: 'center', marginBottom: '10px', cursor: 'pointer' }}>\n//                 <input\n//                   type=\"checkbox\"\n//                   checked={activeRegions.includes(region)}\n//                   onChange={() => toggleRegion(region)}\n//                   style={{\n//                     appearance: 'none',\n//                     WebkitAppearance: 'none',\n//                     width: '18px',\n//                     height: '18px',\n//                     borderRadius: '4px',\n//                     backgroundColor: activeRegions.includes(region)\n//                       ? regionColorMap[region]\n//                       : '#fff',\n//                     border: `2px solid ${regionColorMap[region]}`,\n//                     marginRight: '8px',\n//                     cursor: 'pointer'\n//                   }}\n//                 />\n//                 <span>{region}</span>\n//               </label>\n//             ))}\n//           </form>\n\n//           {/* Country selector + reset */}\n//           <div style={{ marginTop: '20px', display: 'flex', flexDirection: 'column', gap: '10px' }}>\n//             <button onClick={() => setShowCountrySelector(true)}>+ Select Countries</button>\n//             <button\n//               onClick={() => {\n//                 setSelectedCountries([]);\n//                 setActiveRegions([]);\n//               }}\n//               style={{\n//                 backgroundColor: '#f44336',\n//                 color: 'white',\n//                 border: 'none',\n//                 padding: '8px',\n//                 borderRadius: '4px',\n//                 cursor: 'pointer'\n//               }}\n//             >\n//               Reset Selections\n//             </button>\n//           </div>\n\n//           {/* Mini Chart Below Region Legend */}\n//           {hoveredCountry && hoverTrendData.length > 0 && (\n//             <div style={{ marginTop: '30px' }}>\n//               <MiniTrendChart\n//                 country={hoveredCountry.entity}\n//                 data={hoverTrendData}\n//                 color={regionColorMap[hoveredCountry.region] || '#000'}\n//               />\n//             </div>\n//           )}\n//         </div>\n\n//         {/* Floating Hover Card (Moved from ScatterPlot) */}\n//         {!zoomMode && hoveredCountry && (\n//           <div style={{\n//             position: 'absolute',\n//             left: `${hoverPos.x}px`,\n//             top: `${hoverPos.y}px`,\n//             background: '#fff',\n//             padding: '10px',\n//             border: '1px solid #ccc',\n//             borderRadius: '6px',\n//             boxShadow: '0 2px 6px rgba(0,0,0,0.15)',\n//             zIndex: 100,\n//             pointerEvents: 'none'\n//           }}>\n//             <strong>{hoveredCountry.entity}</strong><br />\n//             Year: {hoveredCountry.year}<br />\n//             GDP per capita: ${Math.round(hoveredCountry.gdp_per_capita)}<br />\n//             CO‚ÇÇ per capita: {hoveredCountry.co2_emissions_per_capita.toFixed(2)} t<br />\n//             Population: {hoveredCountry.population.toLocaleString()}\n//           </div>\n//         )}\n//       </div>\n\n//       <div style={{ textAlign: 'center', fontSize: '16px', marginBottom: '10px', color: '#444' }}>\n//         Year: {selectedYear}\n//       </div>\n\n//       {/* Country Selector Panel */}\n//       {showCountrySelector && (\n//         <CountrySelector\n//           data={data}\n//           selectedCountries={selectedCountries}\n//           toggleCountry={toggleCountry}\n//           close={() => setShowCountrySelector(false)}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Home;","map":{"version":3,"names":[],"sources":["C:/Users/dhruv/OneDrive/Desktop/CS 837 Information Vis/gdp-pollution-app/frontend/src/components/Home.js"],"sourcesContent":["\r\n// import React, { useState, useEffect, useMemo } from 'react';\r\n// import axios from 'axios';\r\n// import ScatterPlot from './ScatterPlot';\r\n// import CountrySelector from './CountrySelector';\r\n// import MiniTrendChart from './MiniTrendChart';\r\n// import * as d3 from 'd3';\r\n\r\n// const regionList = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'];\r\n\r\n// const regionColorMap = {};\r\n// regionList.forEach((region, i) => {\r\n//   regionColorMap[region] = d3.schemeTableau10[i];\r\n// });\r\n\r\n// const Home = () => {\r\n//   const [data, setData] = useState([]);\r\n//   const [selectedYear, setSelectedYear] = useState(2022);\r\n//   const [yearRange, setYearRange] = useState({ min: 1950, max: 2022 });\r\n//   const [activeRegions, setActiveRegions] = useState([]);\r\n//   const [selectedCountries, setSelectedCountries] = useState([]);\r\n//   const [isPlaying, setIsPlaying] = useState(false);\r\n//   const [intervalId, setIntervalId] = useState(null);\r\n//   const [showCountrySelector, setShowCountrySelector] = useState(false);\r\n//   const [zoomMode, setZoomMode] = useState(false);\r\n\r\n//   const [hoveredCountry, setHoveredCountry] = useState(null);\r\n//   const [hoverTrendData, setHoverTrendData] = useState([]);\r\n//   const [hoverPos, setHoverPos] = useState({ x: 0, y: 0 });\r\n\r\n//   const countryTrendMap = useMemo(() => {\r\n//     const map = {};\r\n//     data.forEach(d => {\r\n//       if (!map[d.entity]) map[d.entity] = [];\r\n//       map[d.entity].push({ year: d.year, co2: d.co2_emissions_per_capita });\r\n//     });\r\n//     return map;\r\n//   }, [data]);\r\n\r\n//   const startAnimation = () => {\r\n//     if (!isPlaying) {\r\n//       const id = setInterval(() => {\r\n//         setSelectedYear(prev => {\r\n//           const nextYear = prev + 1;\r\n//           if (nextYear > yearRange.max) {\r\n//             clearInterval(id);\r\n//             setIsPlaying(false);\r\n//             return yearRange.max;\r\n//           }\r\n//           return nextYear;\r\n//         });\r\n//       }, 100);\r\n//       setIntervalId(id);\r\n//       setIsPlaying(true);\r\n//     }\r\n//   };\r\n\r\n//   const stopAnimation = () => {\r\n//     clearInterval(intervalId);\r\n//     setIsPlaying(false);\r\n//   };\r\n\r\n//   const toggleAnimation = () => {\r\n//     isPlaying ? stopAnimation() : startAnimation();\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     axios.get('http://localhost:5000/api/data')\r\n//       .then(response => {\r\n//         setData(response.data);\r\n//         setYearRange({ min: 1800, max: 2022 });\r\n//       })\r\n//       .catch(error => console.error('Error fetching data:', error));\r\n\r\n//     return () => clearInterval(intervalId);\r\n//   }, []);\r\n\r\n//   const toggleRegion = (region) => {\r\n//     setActiveRegions(prev =>\r\n//       prev.includes(region)\r\n//         ? prev.filter(r => r !== region)\r\n//         : [...prev, region]\r\n//     );\r\n//   };\r\n\r\n//   const toggleCountry = (country) => {\r\n//     const exists = selectedCountries.find(c => c.entity === country.entity);\r\n//     if (exists) {\r\n//       setSelectedCountries(prev => prev.filter(c => c.entity !== country.entity));\r\n//     } else {\r\n//       setSelectedCountries(prev => [...prev, country]);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ padding: '20px', position: 'relative' }}>\r\n//       <h1>GDP vs Pollution Visualization</h1>\r\n\r\n//       {/* Zoom Toggle */}\r\n//       <div style={{ marginBottom: '12px', display: 'flex', gap: '10px', alignItems: 'center' }}>\r\n//         <button\r\n//           onClick={() => setZoomMode(!zoomMode)}\r\n//           style={{\r\n//             padding: '8px 12px',\r\n//             backgroundColor: zoomMode ? '#007bff' : '#ccc',\r\n//             color: '#fff',\r\n//             border: 'none',\r\n//             borderRadius: '4px',\r\n//             cursor: 'pointer'\r\n//           }}\r\n//         >\r\n//           {zoomMode ? 'üß≠ Zoom Mode: ON' : 'üîç Enable Zoom Mode'}\r\n//         </button>\r\n//       </div>\r\n\r\n//       <div style={{ maxWidth: '1100px', margin: '0 auto', display: 'flex', position: 'relative' }}>\r\n//         {/* Chart */}\r\n//         <div style={{ flex: 1 }}>\r\n//           <ScatterPlot\r\n//             data={data}\r\n//             selectedYear={selectedYear}\r\n//             regionColorMap={regionColorMap}\r\n//             activeRegions={activeRegions}\r\n//             selectedCountries={selectedCountries}\r\n//             setSelectedCountries={setSelectedCountries}\r\n//             zoomMode={zoomMode}\r\n//             setHoveredCountry={setHoveredCountry}\r\n//             setHoverTrendData={(entity) => setHoverTrendData(countryTrendMap[entity] || [])}\r\n//             setHoverPos={setHoverPos}\r\n//           />\r\n\r\n//           {/* Timeline */}\r\n//           <div style={{\r\n//             display: 'flex',\r\n//             alignItems: 'center',\r\n//             justifyContent: 'center',\r\n//             width: '800px',\r\n//             margin: '30px auto 20px auto',\r\n//             gap: '10px'\r\n//           }}>\r\n//             <button\r\n//               onClick={toggleAnimation}\r\n//               style={{\r\n//                 width: '40px',\r\n//                 padding: '8px',\r\n//                 fontSize: '14px',\r\n//                 color: 'grey',\r\n//                 border: '1px solid #999',\r\n//                 borderRadius: '4px',\r\n//                 cursor: 'pointer'\r\n//               }}\r\n//             >\r\n//               {isPlaying ? '‚ùö‚ùö' : '‚ñ∂'}\r\n//             </button>\r\n\r\n//             <input\r\n//               type=\"range\"\r\n//               min={yearRange.min}\r\n//               max={yearRange.max}\r\n//               value={selectedYear}\r\n//               onChange={(e) => setSelectedYear(parseInt(e.target.value))}\r\n//               style={{\r\n//                 flex: 1,\r\n//                 height: '6px',\r\n//                 background: '#ccc',\r\n//                 borderRadius: '3px',\r\n//                 appearance: 'none',\r\n//                 WebkitAppearance: 'none',\r\n//                 outline: 'none',\r\n//                 cursor: 'pointer',\r\n//                 accentColor: 'grey'\r\n//               }}\r\n//             />\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* Right Panel: Region Legend + Mini Chart */}\r\n//         <div style={{ marginLeft: '30px', width: '180px' }}>\r\n//           <h4 style={{ marginBottom: '12px' }}>Regions</h4>\r\n//           <form>\r\n//             {regionList.map(region => (\r\n//               <label key={region} style={{ display: 'flex', alignItems: 'center', marginBottom: '10px', cursor: 'pointer' }}>\r\n//                 <input\r\n//                   type=\"checkbox\"\r\n//                   checked={activeRegions.includes(region)}\r\n//                   onChange={() => toggleRegion(region)}\r\n//                   style={{\r\n//                     appearance: 'none',\r\n//                     WebkitAppearance: 'none',\r\n//                     width: '18px',\r\n//                     height: '18px',\r\n//                     borderRadius: '4px',\r\n//                     backgroundColor: activeRegions.includes(region)\r\n//                       ? regionColorMap[region]\r\n//                       : '#fff',\r\n//                     border: `2px solid ${regionColorMap[region]}`,\r\n//                     marginRight: '8px',\r\n//                     cursor: 'pointer'\r\n//                   }}\r\n//                 />\r\n//                 <span>{region}</span>\r\n//               </label>\r\n//             ))}\r\n//           </form>\r\n\r\n//           {/* Country selector + reset */}\r\n//           <div style={{ marginTop: '20px', display: 'flex', flexDirection: 'column', gap: '10px' }}>\r\n//             <button onClick={() => setShowCountrySelector(true)}>+ Select Countries</button>\r\n//             <button\r\n//               onClick={() => {\r\n//                 setSelectedCountries([]);\r\n//                 setActiveRegions([]);\r\n//               }}\r\n//               style={{\r\n//                 backgroundColor: '#f44336',\r\n//                 color: 'white',\r\n//                 border: 'none',\r\n//                 padding: '8px',\r\n//                 borderRadius: '4px',\r\n//                 cursor: 'pointer'\r\n//               }}\r\n//             >\r\n//               Reset Selections\r\n//             </button>\r\n//           </div>\r\n\r\n//           {/* Mini Chart Below Region Legend */}\r\n//           {hoveredCountry && hoverTrendData.length > 0 && (\r\n//             <div style={{ marginTop: '30px' }}>\r\n//               <MiniTrendChart\r\n//                 country={hoveredCountry.entity}\r\n//                 data={hoverTrendData}\r\n//                 color={regionColorMap[hoveredCountry.region] || '#000'}\r\n//               />\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n\r\n//         {/* Floating Hover Card (Moved from ScatterPlot) */}\r\n//         {!zoomMode && hoveredCountry && (\r\n//           <div style={{\r\n//             position: 'absolute',\r\n//             left: `${hoverPos.x}px`,\r\n//             top: `${hoverPos.y}px`,\r\n//             background: '#fff',\r\n//             padding: '10px',\r\n//             border: '1px solid #ccc',\r\n//             borderRadius: '6px',\r\n//             boxShadow: '0 2px 6px rgba(0,0,0,0.15)',\r\n//             zIndex: 100,\r\n//             pointerEvents: 'none'\r\n//           }}>\r\n//             <strong>{hoveredCountry.entity}</strong><br />\r\n//             Year: {hoveredCountry.year}<br />\r\n//             GDP per capita: ${Math.round(hoveredCountry.gdp_per_capita)}<br />\r\n//             CO‚ÇÇ per capita: {hoveredCountry.co2_emissions_per_capita.toFixed(2)} t<br />\r\n//             Population: {hoveredCountry.population.toLocaleString()}\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n\r\n//       <div style={{ textAlign: 'center', fontSize: '16px', marginBottom: '10px', color: '#444' }}>\r\n//         Year: {selectedYear}\r\n//       </div>\r\n\r\n//       {/* Country Selector Panel */}\r\n//       {showCountrySelector && (\r\n//         <CountrySelector\r\n//           data={data}\r\n//           selectedCountries={selectedCountries}\r\n//           toggleCountry={toggleCountry}\r\n//           close={() => setShowCountrySelector(false)}\r\n//         />\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Home;\r\n\r\n\r\n"],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}