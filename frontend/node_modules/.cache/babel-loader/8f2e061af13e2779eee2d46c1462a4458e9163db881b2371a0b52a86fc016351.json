{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dhruv\\\\OneDrive\\\\Desktop\\\\CS 837 Information Vis\\\\gdp-pollution-app\\\\frontend\\\\src\\\\components\\\\ScatterPlot.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from 'react';\n// import * as d3 from 'd3';\n\n// const ScatterPlot = ({ data }) => {\n//   const svgRef = useRef();\n\n//   useEffect(() => {\n//     if (!data.length) return;\n\n//     const width = 800;\n//     const height = 500;\n//     const margin = { top: 20, right: 30, bottom: 50, left: 70 };\n\n//     const regionColors = d3.scaleOrdinal()\n//   .domain(['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'])\n//   .range(['#8c564b', '#17becf', '#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']);\n\n//     // Select SVG\n//     const svg = d3.select(svgRef.current)\n//       .attr('width', width)\n//       .attr('height', height)\n//       .style('background', '#f9f9f9')\n//       .style('border', '1px solid #ccc')\n//       .append('g')\n//       .attr('transform', `translate(${margin.left},${margin.top})`);\n\n//     // Scales\n//     const xScale = d3.scaleLog()\n//   .domain([100, d3.max(data, d => d.gdp_per_capita || 100000)])\n//   .range([0, width - margin.left - margin.right]);\n\n// const yScale = d3.scaleLog()\n//   .domain([0.1, d3.max(data, d => d.co2_emissions_per_capita || 10)])\n//   .range([height - margin.top - margin.bottom, 0]);\n\n//     // Axes\n//     svg.append('g')\n//       .attr('transform', `translate(0,${height - margin.bottom - margin.top})`)\n//       .call(d3.axisBottom(xScale));\n\n//     svg.append('g')\n//       .call(d3.axisLeft(yScale));\n\n//     // Points\n//     svg.selectAll('circle')\n//       .data(data)\n//       .enter()\n//       .append('circle')\n//       .attr('cx', d => xScale(d.gdp_per_capita || 1))\n//       .attr('cy', d => yScale(d.co2_emissions_per_capita || 1))\n//       .attr('r', d => Math.sqrt(d.population) / 1000) // Optional: size based on population\n//       .attr('fill', d => regionColors(d.region || 'Unknown'))\n\n//       .attr('opacity', 0.7)\n//       .append('title')\n// .text(d => `${d.entity} (${d.year})\n// GDP: $${Math.round(d.gdp_per_capita)}\n// CO₂: ${d.co2_emissions_per_capita} t\n// Population: ${d.population.toLocaleString()}`);\n\n//   }, [data]);\n\n//   return <svg ref={svgRef}></svg>;\n// };\n\n// export default ScatterPlot;\n\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScatterPlot = ({\n  data,\n  selectedYear = 2022\n}) => {\n  _s();\n  const svgRef = useRef();\n  useEffect(() => {\n    if (!data.length) return;\n\n    // const filteredData = data.filter(d => d.year === selectedYear);\n    const filteredData = data.filter(d => d.year === selectedYear && d.entity !== 'World' && !d.entity.toLowerCase().includes('income') && d.gdp_per_capita > 0 && d.co2_emissions_per_capita > 0 && d.population > 0);\n    const width = 900;\n    const height = 550;\n    const margin = {\n      top: 40,\n      right: 40,\n      bottom: 60,\n      left: 80\n    };\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove(); // Clear old content\n\n    const chart = svg.attr('width', width).attr('height', height).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n\n    // Scales\n    const xScale = d3.scaleLog().domain([100, d3.max(filteredData, d => d.gdp_per_capita || 100000)]).range([0, innerWidth]);\n    const yScale = d3.scaleLog().domain([0.1, d3.max(filteredData, d => d.co2_emissions_per_capita || 10)]).range([innerHeight, 0]);\n    const regionColors = d3.scaleOrdinal().domain(['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America']).range(['#8c564b', '#17becf', '#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']);\n\n    // Axes\n    chart.append('g').attr('transform', `translate(0, ${innerHeight})`).call(d3.axisBottom(xScale).ticks(10, \"~s\")).append('text').attr('x', innerWidth / 2).attr('y', 40).attr('fill', '#000').attr('text-anchor', 'middle').text('GDP per capita (log scale)');\n    chart.append('g').call(d3.axisLeft(yScale).ticks(10, \"~s\")).append('text').attr('transform', 'rotate(-90)').attr('x', -innerHeight / 2).attr('y', -60).attr('fill', '#000').attr('text-anchor', 'middle').text('CO₂ emissions per capita (log scale)');\n\n    // Tooltip div\n    const tooltip = d3.select(\"body\").append(\"div\").style(\"position\", \"absolute\").style(\"background\", \"#fff\").style(\"padding\", \"6px 10px\").style(\"border\", \"1px solid #ccc\").style(\"border-radius\", \"4px\").style(\"pointer-events\", \"none\").style(\"opacity\", 0);\n\n    // Circles\n    chart.selectAll('circle').data(filteredData).enter().append('circle').attr('cx', d => xScale(d.gdp_per_capita || 100)).attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1)).attr('r', d => Math.sqrt(d.population) / 1000).attr('fill', d => regionColors(d.region || 'Unknown')).attr('opacity', 0.8).on('mouseover', (event, d) => {\n      tooltip.transition().duration(200).style('opacity', 1);\n      tooltip.html(`\n          <strong>${d.entity}</strong><br/>\n          Year: ${d.year}<br/>\n          GDP per capita: $${Math.round(d.gdp_per_capita)}<br/>\n          CO₂ per capita: ${d.co2_emissions_per_capita.toFixed(2)} t<br/>\n          Population: ${d.population.toLocaleString()}\n        `).style(\"left\", event.pageX + 10 + \"px\").style(\"top\", event.pageY - 28 + \"px\");\n    }).on('mouseout', () => {\n      tooltip.transition().duration(500).style('opacity', 0);\n    });\n  }, [data, selectedYear]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svgRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 10\n  }, this);\n};\n_s(ScatterPlot, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = ScatterPlot;\nexport default ScatterPlot;\nvar _c;\n$RefreshReg$(_c, \"ScatterPlot\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","ScatterPlot","data","selectedYear","_s","svgRef","length","filteredData","filter","d","year","entity","toLowerCase","includes","gdp_per_capita","co2_emissions_per_capita","population","width","height","margin","top","right","bottom","left","svg","select","current","selectAll","remove","chart","attr","append","innerWidth","innerHeight","xScale","scaleLog","domain","max","range","yScale","regionColors","scaleOrdinal","call","axisBottom","ticks","text","axisLeft","tooltip","style","enter","Math","sqrt","region","on","event","transition","duration","html","round","toFixed","toLocaleString","pageX","pageY","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/dhruv/OneDrive/Desktop/CS 837 Information Vis/gdp-pollution-app/frontend/src/components/ScatterPlot.js"],"sourcesContent":["// import React, { useEffect, useRef } from 'react';\r\n// import * as d3 from 'd3';\r\n\r\n// const ScatterPlot = ({ data }) => {\r\n//   const svgRef = useRef();\r\n\r\n\r\n\r\n//   useEffect(() => {\r\n//     if (!data.length) return;\r\n\r\n//     const width = 800;\r\n//     const height = 500;\r\n//     const margin = { top: 20, right: 30, bottom: 50, left: 70 };\r\n\r\n//     const regionColors = d3.scaleOrdinal()\r\n//   .domain(['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'])\r\n//   .range(['#8c564b', '#17becf', '#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']);\r\n\r\n\r\n//     // Select SVG\r\n//     const svg = d3.select(svgRef.current)\r\n//       .attr('width', width)\r\n//       .attr('height', height)\r\n//       .style('background', '#f9f9f9')\r\n//       .style('border', '1px solid #ccc')\r\n//       .append('g')\r\n//       .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n//     // Scales\r\n//     const xScale = d3.scaleLog()\r\n//   .domain([100, d3.max(data, d => d.gdp_per_capita || 100000)])\r\n//   .range([0, width - margin.left - margin.right]);\r\n\r\n// const yScale = d3.scaleLog()\r\n//   .domain([0.1, d3.max(data, d => d.co2_emissions_per_capita || 10)])\r\n//   .range([height - margin.top - margin.bottom, 0]);\r\n\r\n//     // Axes\r\n//     svg.append('g')\r\n//       .attr('transform', `translate(0,${height - margin.bottom - margin.top})`)\r\n//       .call(d3.axisBottom(xScale));\r\n\r\n//     svg.append('g')\r\n//       .call(d3.axisLeft(yScale));\r\n\r\n//     // Points\r\n//     svg.selectAll('circle')\r\n//       .data(data)\r\n//       .enter()\r\n//       .append('circle')\r\n//       .attr('cx', d => xScale(d.gdp_per_capita || 1))\r\n//       .attr('cy', d => yScale(d.co2_emissions_per_capita || 1))\r\n//       .attr('r', d => Math.sqrt(d.population) / 1000) // Optional: size based on population\r\n//       .attr('fill', d => regionColors(d.region || 'Unknown'))\r\n\r\n//       .attr('opacity', 0.7)\r\n//       .append('title')\r\n// .text(d => `${d.entity} (${d.year})\r\n// GDP: $${Math.round(d.gdp_per_capita)}\r\n// CO₂: ${d.co2_emissions_per_capita} t\r\n// Population: ${d.population.toLocaleString()}`);\r\n\r\n\r\n//   }, [data]);\r\n\r\n//   return <svg ref={svgRef}></svg>;\r\n// };\r\n\r\n// export default ScatterPlot;\r\n\r\n\r\nimport React, { useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst ScatterPlot = ({ data, selectedYear = 2022 }) => {\r\n  const svgRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!data.length) return;\r\n\r\n   // const filteredData = data.filter(d => d.year === selectedYear);\r\n   const filteredData = data.filter(d =>\r\n    d.year === selectedYear &&\r\n    d.entity !== 'World' &&\r\n    !d.entity.toLowerCase().includes('income') &&\r\n    d.gdp_per_capita > 0 &&\r\n    d.co2_emissions_per_capita > 0 &&\r\n    d.population > 0\r\n  );\r\n\r\n  \r\n  \r\n  \r\n    const width = 900;\r\n    const height = 550;\r\n    const margin = { top: 40, right: 40, bottom: 60, left: 80 };\r\n\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll('*').remove(); // Clear old content\r\n\r\n    const chart = svg\r\n      .attr('width', width)\r\n      .attr('height', height)\r\n      .append('g')\r\n      .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n    const innerWidth = width - margin.left - margin.right;\r\n    const innerHeight = height - margin.top - margin.bottom;\r\n\r\n    // Scales\r\n    const xScale = d3.scaleLog()\r\n      .domain([100, d3.max(filteredData, d => d.gdp_per_capita || 100000)])\r\n      .range([0, innerWidth]);\r\n\r\n    const yScale = d3.scaleLog()\r\n      .domain([0.1, d3.max(filteredData, d => d.co2_emissions_per_capita || 10)])\r\n      .range([innerHeight, 0]);\r\n\r\n    const regionColors = d3.scaleOrdinal()\r\n      .domain(['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'])\r\n      .range(['#8c564b', '#17becf', '#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']);\r\n\r\n    // Axes\r\n    chart.append('g')\r\n      .attr('transform', `translate(0, ${innerHeight})`)\r\n      .call(d3.axisBottom(xScale).ticks(10, \"~s\"))\r\n      .append('text')\r\n      .attr('x', innerWidth / 2)\r\n      .attr('y', 40)\r\n      .attr('fill', '#000')\r\n      .attr('text-anchor', 'middle')\r\n      .text('GDP per capita (log scale)');\r\n\r\n    chart.append('g')\r\n      .call(d3.axisLeft(yScale).ticks(10, \"~s\"))\r\n      .append('text')\r\n      .attr('transform', 'rotate(-90)')\r\n      .attr('x', -innerHeight / 2)\r\n      .attr('y', -60)\r\n      .attr('fill', '#000')\r\n      .attr('text-anchor', 'middle')\r\n      .text('CO₂ emissions per capita (log scale)');\r\n\r\n    // Tooltip div\r\n    const tooltip = d3.select(\"body\")\r\n      .append(\"div\")\r\n      .style(\"position\", \"absolute\")\r\n      .style(\"background\", \"#fff\")\r\n      .style(\"padding\", \"6px 10px\")\r\n      .style(\"border\", \"1px solid #ccc\")\r\n      .style(\"border-radius\", \"4px\")\r\n      .style(\"pointer-events\", \"none\")\r\n      .style(\"opacity\", 0);\r\n\r\n    // Circles\r\n    chart.selectAll('circle')\r\n      .data(filteredData)\r\n      .enter()\r\n      .append('circle')\r\n      .attr('cx', d => xScale(d.gdp_per_capita || 100))\r\n      .attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1))\r\n      .attr('r', d => Math.sqrt(d.population) / 1000)\r\n      .attr('fill', d => regionColors(d.region || 'Unknown'))\r\n      .attr('opacity', 0.8)\r\n      .on('mouseover', (event, d) => {\r\n        tooltip.transition().duration(200).style('opacity', 1);\r\n        tooltip.html(`\r\n          <strong>${d.entity}</strong><br/>\r\n          Year: ${d.year}<br/>\r\n          GDP per capita: $${Math.round(d.gdp_per_capita)}<br/>\r\n          CO₂ per capita: ${d.co2_emissions_per_capita.toFixed(2)} t<br/>\r\n          Population: ${d.population.toLocaleString()}\r\n        `)\r\n          .style(\"left\", (event.pageX + 10) + \"px\")\r\n          .style(\"top\", (event.pageY - 28) + \"px\");\r\n      })\r\n      .on('mouseout', () => {\r\n        tooltip.transition().duration(500).style('opacity', 0);\r\n      });\r\n\r\n  }, [data, selectedYear]);\r\n\r\n  return <svg ref={svgRef}></svg>;\r\n};\r\n\r\nexport default ScatterPlot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}