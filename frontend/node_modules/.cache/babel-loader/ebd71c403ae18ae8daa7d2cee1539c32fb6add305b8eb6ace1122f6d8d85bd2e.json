{"ast":null,"code":"\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import * as d3 from 'd3';\n\n// const ScatterPlot = ({\n//   data,\n//   selectedYear = 2022,\n//   regionColorMap,\n//   activeRegions,\n//   selectedCountries,\n//   setSelectedCountries,\n//   zoomMode,\n//   setHoveredCountry,         \n//   setHoverTrendData  ,\n//   setHoverPos,\n//   zoomExtent,        // ðŸ‘ˆ NEW\n//   setZoomExtent \n// }) => {\n//   const svgRef = useRef();\n\n//   useEffect(() => {\n//     if (!data.length) return;\n\n//     const filteredData = data.filter(d =>\n//       d.year === selectedYear &&\n//       d.entity !== 'World' &&\n//       !d.entity.toLowerCase().includes('income') &&\n//       d.gdp_per_capita > 0 &&\n//       d.co2_emissions_per_capita > 0 &&\n//       d.population > 0\n//     );\n\n//     const width = 900;\n//     const height = 450;\n//     const margin = { top: 40, right: 40, bottom: 60, left: 80 };\n\n//     const svg = d3.select(svgRef.current);\n//     svg.selectAll('*').remove();\n\n//     const chart = svg\n//       .attr('width', width)\n//       .attr('height', height)\n//       .append('g')\n//       .attr('transform', `translate(${margin.left},${margin.top})`);\n\n//     const innerWidth = width - margin.left - margin.right;\n//     const innerHeight = height - margin.top - margin.bottom;\n\n//     // Define clipping path\n// svg.append(\"defs\").append(\"clipPath\")\n// .attr(\"id\", \"clip\")\n// .append(\"rect\")\n// .attr(\"width\", innerWidth)\n// .attr(\"height\", innerHeight);\n\n// // Scales\n// let x = d3.scaleLog()\n//   .domain([50, d3.max(filteredData, d => d.gdp_per_capita || 100000)])\n//   .range([0, innerWidth]);\n\n// let y = d3.scaleLog()\n//   .domain([0.02, d3.max(filteredData, d => d.co2_emissions_per_capita  || 10)])\n//   .range([innerHeight, 0]);\n\n// // if (zoomExtent) {\n// //   x = d3.scaleLog()\n// //     .domain([x.invert(zoomExtent[0][0]), x.invert(zoomExtent[1][0])])\n// //     .range([0, innerWidth]);\n\n// //   y = d3.scaleLog()\n// //     .domain([y.invert(zoomExtent[1][1]), y.invert(zoomExtent[0][1])])\n// //     .range([innerHeight, 0]);\n// // }\n\n// if (zoomExtent) {\n//   const [x0, y0] = zoomExtent[0];\n//   const [x1, y1] = zoomExtent[1];\n\n//   // Pad pixel extent by 10px\n//   const pad = 20;\n//   const paddedX0 = Math.max(x0 - pad, 0);\n//   const paddedX1 = Math.min(x1 + pad, innerWidth);\n//   const paddedY0 = Math.max(y0 - pad, 0);\n//   const paddedY1 = Math.min(y1 + pad, innerHeight);\n\n//   const xStart = x.invert(paddedX0);\n//   const xEnd = x.invert(paddedX1);\n//   const yStart = y.invert(paddedY1); // y is inverted\n//   const yEnd = y.invert(paddedY0);\n\n//   x = d3.scaleLog()\n//     .domain([xStart, xEnd])\n//     .range([0, innerWidth]);\n\n//   y = d3.scaleLog()\n//     .domain([yStart, yEnd])\n//     .range([innerHeight, 0]);\n// }\n\n// // Compute tick values for Y (just major log values)\n// const maxY = d3.max(filteredData, d => d.co2_emissions_per_capita || 10);\n// const yTickValues = [0.1, 1,5, 10, 30].filter(val => val <= maxY);\n// const xTickValues = [100, 1_000, 5_000, 20_000, 100_000];\n\n// // Axes\n// chart.append('g')\n//   .attr('transform', `translate(0, ${innerHeight})`)\n//   .call(d3.axisBottom(x).ticks(10, \"~s\"))\n//   .append('text')\n//   .attr('x', innerWidth / 2)\n//   .attr('y', 40)\n//   .attr('fill', '#000')\n//   .attr('text-anchor', 'middle')\n//   .style('font-size', '14px')\n//   .text('GDP per capita (log scale)');\n\n// // Horizontal Grid Lines (Y-axis)\n// chart.append('g')\n//   .attr('class', 'grid')\n//   .call(d3.axisLeft(y)\n//     .tickValues(yTickValues)        // âœ… Only major ticks\n//     .tickSize(-innerWidth)\n//     .tickFormat('')                 // Hide labels (grid only)\n//   )\n//   .selectAll('line')\n//   .attr('stroke', '#ccc')\n//   .attr('stroke-dasharray', '3 3');\n\n//     chart.append('g')\n//       //.call(d3.axisLeft(y).ticks(10, \"~s\"))\n//       .call(d3.axisLeft(y)\n//   .tickValues(yTickValues)\n//   .tickFormat(d => d.toString())\n// )\n//       .append('text')\n//       .attr('transform', 'rotate(-90)')\n//       .attr('x', -innerHeight / 2)\n//       .attr('y', -60)\n//       .attr('fill', '#000')\n//       .attr('text-anchor', 'middle')\n//       .style('font-size', '14px')\n//       .text('COâ‚‚ emissions per capita in Tonnes (log scale)');\n\n//       chart.selectAll('.grid path.domain').remove();\n\n//       chart.append('g')\n//   .attr('class', 'x-grid')\n//   .attr('transform', `translate(0, ${innerHeight})`)\n//   .call(\n//     d3.axisBottom(x)\n//     .tickValues(xTickValues)\n//       .tickSize(-innerHeight)   // Full-height vertical lines\n//       .tickFormat('')           // No text labels\n//   )\n//   .selectAll('line')\n\n//   .attr('stroke', '#ccc')\n//   .attr('stroke-dasharray', '3 3');\n//   chart.selectAll('.x-grid path.domain').remove();\n//     // Bubbles\n//     chart.selectAll('circle.bubble')\n//       .data(filteredData)\n//       .enter()\n//       .append('circle')\n//       .attr('class', 'bubble')\n//       .attr('cx', d => x(d.gdp_per_capita))\n//       .attr('cy', d => y(d.co2_emissions_per_capita))\n//       .attr('r', d => {\n//         const baseR = Math.sqrt(d.population) / 1000;\n//         return selectedCountries.some(c => c.entity === d.entity) ? baseR + 4 : baseR;\n//       })\n//       .attr('fill', d => {\n//         if (selectedCountries.some(c => c.entity === d.entity)) {\n//           return d3.color(regionColorMap[d.region]).brighter(0.5);\n//         }\n//         return activeRegions.includes(d.region)\n//           ? regionColorMap[d.region] || '#000'\n//           : '#ccc';\n//       })\n//       .attr('stroke', d =>\n//         selectedCountries.some(c => c.entity === d.entity)\n//           ? regionColorMap[d.region]\n//           : 'none'\n//       )\n//       .attr('stroke-width', d =>\n//         selectedCountries.some(c => c.entity === d.entity) ? 3 : 0\n//       )\n//       .attr('opacity', 0.85)\n//       .on('mouseover', function (event, d) {\n//         if (!zoomMode) {\n//           setHoveredCountry(d);\n//  // setHoverTrendData(d.entity);\n//           setHoveredCountry(d);\n//          // setHoverPos({ x: event.pageX + 10, y: event.pageY - 28 });\n//          const svgRect = svgRef.current.getBoundingClientRect();\n//          setHoverPos({\n//            x: event.clientX - svgRect.left + 10,\n//            y: event.clientY - svgRect.top - 28\n//          });\n//           d3.select(this)\n//             .attr('stroke', regionColorMap[d.region])\n//             .attr('stroke-width', 3)\n//             .attr('fill', d3.color(regionColorMap[d.region]).brighter(0.5))\n//             .attr('r', Math.sqrt(d.population) / 1000 + 4);\n//         }\n//       })\n//       .on('mouseout', function (event, d) {\n//         setHoveredCountry(null);\n\n//         const baseR = Math.sqrt(d.population) / 1000;\n//         const isSelected = selectedCountries.some(c => c.entity === d.entity);\n\n//         d3.select(this)\n//           .attr('r', isSelected ? baseR + 4 : baseR)\n//           .attr('stroke', isSelected ? regionColorMap[d.region] : 'none')\n//           .attr('stroke-width', isSelected ? 3 : 0)\n//           .attr('fill', () => {\n//             if (isSelected) {\n//               return d3.color(regionColorMap[d.region]).brighter(0.5);\n//             }\n//             return activeRegions.includes(d.region)\n//               ? regionColorMap[d.region] || '#000'\n//               : '#ccc';\n//           });\n//       })\n//       .on('click', function (event, d) {\n//         if (!zoomMode) {\n//           event.stopPropagation();\n\n//           const isAlreadySelected = selectedCountries.some(c => c.entity === d.entity);\n\n// if (isAlreadySelected) {\n//   // Deselect country\n//   setSelectedCountries(prev => prev.filter(c => c.entity !== d.entity));\n// } else {\n//   // Select country only if less than 3 selected\n//   if (selectedCountries.length < 3) {\n//     setSelectedCountries(prev => [...prev, d]);\n//   } else {\n//     alert('You can only compare up to 3 countries.');\n//   }\n// }\n\n//         }\n//       });\n\n//     // Labels\n//     chart.selectAll('text.label').remove();\n//     chart.selectAll('text.label')\n//       .data(filteredData.filter(d =>\n//         activeRegions.includes(d.region) ||\n//         selectedCountries.some(c => c.entity === d.entity)\n//       ))\n//       .enter()\n//       .append('text')\n//       .attr('class', 'label')\n//       .attr('x', d => x(d.gdp_per_capita))\n//       .attr('y', d => y(d.co2_emissions_per_capita) - 8)\n//       .text(d => d.entity)\n//       .attr('font-size', '10px')\n//       .attr('fill', d => regionColorMap[d.region] || '#333')\n//       .attr('font-weight', 'bold')\n//       .attr('text-anchor', 'middle');\n\n//     // Only enable brush if zoom mode is on\n//     if (zoomMode) {\n//       const brush = d3.brush()\n//         .extent([[0, 0], [innerWidth, innerHeight]])\n//         .on(\"end\", ({ selection }) => {\n//           if (selection) {\n//             setZoomExtent(selection);\n//           }\n//         });\n\n//       chart.append(\"g\")\n//         .attr(\"class\", \"brush\")\n//         .call(brush);\n//     }\n\n//   }, [data, selectedYear, activeRegions, regionColorMap, selectedCountries, zoomExtent, zoomMode]);\n\n//   return (\n//     <>\n//       <svg ref={svgRef}></svg>\n\n//     </>\n//   );\n// };\n\n// export default ScatterPlot;","map":{"version":3,"names":[],"sources":["C:/Users/dhruv/OneDrive/Desktop/CS 837 Information Vis/gdp-pollution-app/frontend/src/components/ScatterPlot.js"],"sourcesContent":["\r\n\r\n// import React, { useEffect, useRef, useState } from 'react';\r\n// import * as d3 from 'd3';\r\n\r\n// const ScatterPlot = ({\r\n//   data,\r\n//   selectedYear = 2022,\r\n//   regionColorMap,\r\n//   activeRegions,\r\n//   selectedCountries,\r\n//   setSelectedCountries,\r\n//   zoomMode,\r\n//   setHoveredCountry,         \r\n//   setHoverTrendData  ,\r\n//   setHoverPos,\r\n//   zoomExtent,        // ðŸ‘ˆ NEW\r\n//   setZoomExtent \r\n// }) => {\r\n//   const svgRef = useRef();\r\n  \r\n  \r\n\r\n//   useEffect(() => {\r\n//     if (!data.length) return;\r\n\r\n//     const filteredData = data.filter(d =>\r\n//       d.year === selectedYear &&\r\n//       d.entity !== 'World' &&\r\n//       !d.entity.toLowerCase().includes('income') &&\r\n//       d.gdp_per_capita > 0 &&\r\n//       d.co2_emissions_per_capita > 0 &&\r\n//       d.population > 0\r\n//     );\r\n\r\n//     const width = 900;\r\n//     const height = 450;\r\n//     const margin = { top: 40, right: 40, bottom: 60, left: 80 };\r\n\r\n//     const svg = d3.select(svgRef.current);\r\n//     svg.selectAll('*').remove();\r\n\r\n//     const chart = svg\r\n//       .attr('width', width)\r\n//       .attr('height', height)\r\n//       .append('g')\r\n//       .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n//     const innerWidth = width - margin.left - margin.right;\r\n//     const innerHeight = height - margin.top - margin.bottom;\r\n\r\n//     // Define clipping path\r\n// svg.append(\"defs\").append(\"clipPath\")\r\n// .attr(\"id\", \"clip\")\r\n// .append(\"rect\")\r\n// .attr(\"width\", innerWidth)\r\n// .attr(\"height\", innerHeight);\r\n\r\n\r\n// // Scales\r\n// let x = d3.scaleLog()\r\n//   .domain([50, d3.max(filteredData, d => d.gdp_per_capita || 100000)])\r\n//   .range([0, innerWidth]);\r\n\r\n// let y = d3.scaleLog()\r\n//   .domain([0.02, d3.max(filteredData, d => d.co2_emissions_per_capita  || 10)])\r\n//   .range([innerHeight, 0]);\r\n\r\n// // if (zoomExtent) {\r\n// //   x = d3.scaleLog()\r\n// //     .domain([x.invert(zoomExtent[0][0]), x.invert(zoomExtent[1][0])])\r\n// //     .range([0, innerWidth]);\r\n\r\n// //   y = d3.scaleLog()\r\n// //     .domain([y.invert(zoomExtent[1][1]), y.invert(zoomExtent[0][1])])\r\n// //     .range([innerHeight, 0]);\r\n// // }\r\n\r\n// if (zoomExtent) {\r\n//   const [x0, y0] = zoomExtent[0];\r\n//   const [x1, y1] = zoomExtent[1];\r\n\r\n//   // Pad pixel extent by 10px\r\n//   const pad = 20;\r\n//   const paddedX0 = Math.max(x0 - pad, 0);\r\n//   const paddedX1 = Math.min(x1 + pad, innerWidth);\r\n//   const paddedY0 = Math.max(y0 - pad, 0);\r\n//   const paddedY1 = Math.min(y1 + pad, innerHeight);\r\n\r\n//   const xStart = x.invert(paddedX0);\r\n//   const xEnd = x.invert(paddedX1);\r\n//   const yStart = y.invert(paddedY1); // y is inverted\r\n//   const yEnd = y.invert(paddedY0);\r\n\r\n//   x = d3.scaleLog()\r\n//     .domain([xStart, xEnd])\r\n//     .range([0, innerWidth]);\r\n\r\n//   y = d3.scaleLog()\r\n//     .domain([yStart, yEnd])\r\n//     .range([innerHeight, 0]);\r\n// }\r\n\r\n\r\n// // Compute tick values for Y (just major log values)\r\n// const maxY = d3.max(filteredData, d => d.co2_emissions_per_capita || 10);\r\n// const yTickValues = [0.1, 1,5, 10, 30].filter(val => val <= maxY);\r\n// const xTickValues = [100, 1_000, 5_000, 20_000, 100_000];\r\n\r\n\r\n// // Axes\r\n// chart.append('g')\r\n//   .attr('transform', `translate(0, ${innerHeight})`)\r\n//   .call(d3.axisBottom(x).ticks(10, \"~s\"))\r\n//   .append('text')\r\n//   .attr('x', innerWidth / 2)\r\n//   .attr('y', 40)\r\n//   .attr('fill', '#000')\r\n//   .attr('text-anchor', 'middle')\r\n//   .style('font-size', '14px')\r\n//   .text('GDP per capita (log scale)');\r\n\r\n// // Horizontal Grid Lines (Y-axis)\r\n// chart.append('g')\r\n//   .attr('class', 'grid')\r\n//   .call(d3.axisLeft(y)\r\n//     .tickValues(yTickValues)        // âœ… Only major ticks\r\n//     .tickSize(-innerWidth)\r\n//     .tickFormat('')                 // Hide labels (grid only)\r\n//   )\r\n//   .selectAll('line')\r\n//   .attr('stroke', '#ccc')\r\n//   .attr('stroke-dasharray', '3 3');\r\n\r\n\r\n//     chart.append('g')\r\n//       //.call(d3.axisLeft(y).ticks(10, \"~s\"))\r\n//       .call(d3.axisLeft(y)\r\n//   .tickValues(yTickValues)\r\n//   .tickFormat(d => d.toString())\r\n// )\r\n//       .append('text')\r\n//       .attr('transform', 'rotate(-90)')\r\n//       .attr('x', -innerHeight / 2)\r\n//       .attr('y', -60)\r\n//       .attr('fill', '#000')\r\n//       .attr('text-anchor', 'middle')\r\n//       .style('font-size', '14px')\r\n//       .text('COâ‚‚ emissions per capita in Tonnes (log scale)');\r\n\r\n//       chart.selectAll('.grid path.domain').remove();\r\n\r\n//       chart.append('g')\r\n//   .attr('class', 'x-grid')\r\n//   .attr('transform', `translate(0, ${innerHeight})`)\r\n//   .call(\r\n//     d3.axisBottom(x)\r\n//     .tickValues(xTickValues)\r\n//       .tickSize(-innerHeight)   // Full-height vertical lines\r\n//       .tickFormat('')           // No text labels\r\n//   )\r\n//   .selectAll('line')\r\n  \r\n//   .attr('stroke', '#ccc')\r\n//   .attr('stroke-dasharray', '3 3');\r\n//   chart.selectAll('.x-grid path.domain').remove();\r\n//     // Bubbles\r\n//     chart.selectAll('circle.bubble')\r\n//       .data(filteredData)\r\n//       .enter()\r\n//       .append('circle')\r\n//       .attr('class', 'bubble')\r\n//       .attr('cx', d => x(d.gdp_per_capita))\r\n//       .attr('cy', d => y(d.co2_emissions_per_capita))\r\n//       .attr('r', d => {\r\n//         const baseR = Math.sqrt(d.population) / 1000;\r\n//         return selectedCountries.some(c => c.entity === d.entity) ? baseR + 4 : baseR;\r\n//       })\r\n//       .attr('fill', d => {\r\n//         if (selectedCountries.some(c => c.entity === d.entity)) {\r\n//           return d3.color(regionColorMap[d.region]).brighter(0.5);\r\n//         }\r\n//         return activeRegions.includes(d.region)\r\n//           ? regionColorMap[d.region] || '#000'\r\n//           : '#ccc';\r\n//       })\r\n//       .attr('stroke', d =>\r\n//         selectedCountries.some(c => c.entity === d.entity)\r\n//           ? regionColorMap[d.region]\r\n//           : 'none'\r\n//       )\r\n//       .attr('stroke-width', d =>\r\n//         selectedCountries.some(c => c.entity === d.entity) ? 3 : 0\r\n//       )\r\n//       .attr('opacity', 0.85)\r\n//       .on('mouseover', function (event, d) {\r\n//         if (!zoomMode) {\r\n//           setHoveredCountry(d);\r\n//  // setHoverTrendData(d.entity);\r\n//           setHoveredCountry(d);\r\n//          // setHoverPos({ x: event.pageX + 10, y: event.pageY - 28 });\r\n//          const svgRect = svgRef.current.getBoundingClientRect();\r\n//          setHoverPos({\r\n//            x: event.clientX - svgRect.left + 10,\r\n//            y: event.clientY - svgRect.top - 28\r\n//          });\r\n//           d3.select(this)\r\n//             .attr('stroke', regionColorMap[d.region])\r\n//             .attr('stroke-width', 3)\r\n//             .attr('fill', d3.color(regionColorMap[d.region]).brighter(0.5))\r\n//             .attr('r', Math.sqrt(d.population) / 1000 + 4);\r\n//         }\r\n//       })\r\n//       .on('mouseout', function (event, d) {\r\n//         setHoveredCountry(null);\r\n\r\n//         const baseR = Math.sqrt(d.population) / 1000;\r\n//         const isSelected = selectedCountries.some(c => c.entity === d.entity);\r\n\r\n//         d3.select(this)\r\n//           .attr('r', isSelected ? baseR + 4 : baseR)\r\n//           .attr('stroke', isSelected ? regionColorMap[d.region] : 'none')\r\n//           .attr('stroke-width', isSelected ? 3 : 0)\r\n//           .attr('fill', () => {\r\n//             if (isSelected) {\r\n//               return d3.color(regionColorMap[d.region]).brighter(0.5);\r\n//             }\r\n//             return activeRegions.includes(d.region)\r\n//               ? regionColorMap[d.region] || '#000'\r\n//               : '#ccc';\r\n//           });\r\n//       })\r\n//       .on('click', function (event, d) {\r\n//         if (!zoomMode) {\r\n//           event.stopPropagation();\r\n         \r\n//           const isAlreadySelected = selectedCountries.some(c => c.entity === d.entity);\r\n\r\n// if (isAlreadySelected) {\r\n//   // Deselect country\r\n//   setSelectedCountries(prev => prev.filter(c => c.entity !== d.entity));\r\n// } else {\r\n//   // Select country only if less than 3 selected\r\n//   if (selectedCountries.length < 3) {\r\n//     setSelectedCountries(prev => [...prev, d]);\r\n//   } else {\r\n//     alert('You can only compare up to 3 countries.');\r\n//   }\r\n// }\r\n\r\n//         }\r\n//       });\r\n\r\n//     // Labels\r\n//     chart.selectAll('text.label').remove();\r\n//     chart.selectAll('text.label')\r\n//       .data(filteredData.filter(d =>\r\n//         activeRegions.includes(d.region) ||\r\n//         selectedCountries.some(c => c.entity === d.entity)\r\n//       ))\r\n//       .enter()\r\n//       .append('text')\r\n//       .attr('class', 'label')\r\n//       .attr('x', d => x(d.gdp_per_capita))\r\n//       .attr('y', d => y(d.co2_emissions_per_capita) - 8)\r\n//       .text(d => d.entity)\r\n//       .attr('font-size', '10px')\r\n//       .attr('fill', d => regionColorMap[d.region] || '#333')\r\n//       .attr('font-weight', 'bold')\r\n//       .attr('text-anchor', 'middle');\r\n\r\n//     // Only enable brush if zoom mode is on\r\n//     if (zoomMode) {\r\n//       const brush = d3.brush()\r\n//         .extent([[0, 0], [innerWidth, innerHeight]])\r\n//         .on(\"end\", ({ selection }) => {\r\n//           if (selection) {\r\n//             setZoomExtent(selection);\r\n//           }\r\n//         });\r\n\r\n//       chart.append(\"g\")\r\n//         .attr(\"class\", \"brush\")\r\n//         .call(brush);\r\n//     }\r\n\r\n//   }, [data, selectedYear, activeRegions, regionColorMap, selectedCountries, zoomExtent, zoomMode]);\r\n\r\n//   return (\r\n//     <>\r\n//       <svg ref={svgRef}></svg>\r\n\r\n      \r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default ScatterPlot;\r\n"],"mappings":";;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}