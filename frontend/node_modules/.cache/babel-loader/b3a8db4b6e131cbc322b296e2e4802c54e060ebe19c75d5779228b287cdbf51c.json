{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import ScatterPlot from './ScatterPlot';\n// import * as d3 from 'd3';\n\n// const regionList = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'];\n\n// const regionColorMap = {};\n// regionList.forEach((region, i) => {\n//   regionColorMap[region] = d3.schemeTableau10[i]; // Use d3 color scheme\n// });\n\n// const Home = () => {\n//   const [data, setData] = useState([]);\n//   const [selectedYear, setSelectedYear] = useState(2022);\n//   const [yearRange, setYearRange] = useState({ min: 1950, max: 2022 });\n//   const [activeRegions, setActiveRegions] = useState([]);\n//   const [isPlaying, setIsPlaying] = useState(false);\n//   const [intervalId, setIntervalId] = useState(null);\n//   const [selectedCountries, setSelectedCountries] = useState([]);\n\n//   const startAnimation = () => {\n//     if (!isPlaying) {\n//       const id = setInterval(() => {\n//         setSelectedYear(prev => {\n//           const nextYear = prev + 1;\n//           return nextYear > yearRange.max ? yearRange.min : nextYear;\n//         });\n//       }, 100);\n//       setIntervalId(id);\n//       setIsPlaying(true);\n//     }\n//   };\n\n//   const stopAnimation = () => {\n//     clearInterval(intervalId);\n//     setIsPlaying(false);\n//   };\n\n//   const toggleAnimation = () => {\n//     isPlaying ? stopAnimation() : startAnimation();\n//   };\n\n//   useEffect(() => {\n//     axios.get('http://localhost:5000/api/data')\n//       .then(response => {\n//         setData(response.data);\n//         const minYear = 1800;\n//         const maxYear = 2022;\n//         setYearRange({ min: minYear, max: maxYear });\n//       })\n//       .catch(error => console.error('Error fetching data:', error));\n\n//     return () => {\n//       clearInterval(intervalId);\n//     };\n//   }, []);\n\n//   const toggleRegion = (region) => {\n//     setActiveRegions(prev =>\n//       prev.includes(region)\n//         ? prev.filter(r => r !== region)\n//         : [...prev, region]\n//     );\n//   };\n\n//   return (\n//     <div style={{ padding: '20px' }}>\n//       <h1>GDP vs Pollution Visualization</h1>\n\n//       <div style={{ maxWidth: '1100px', margin: '0 auto', display: 'flex' }}>\n//         {/* Chart */}\n//         <div style={{ flex: 1 }}>\n//         <ScatterPlot\n//   data={data}\n//   selectedYear={selectedYear}\n//   regionColorMap={regionColorMap}\n//   activeRegions={activeRegions}\n//   selectedCountries={selectedCountries}\n//   setSelectedCountries={setSelectedCountries}\n// />\n\n//         </div>\n\n//         {/* Legend */}\n//         <div style={{ marginLeft: '30px', width: '180px' }}>\n//           <h4 style={{ marginBottom: '12px' }}>Regions</h4>\n//           <form>\n//           {regionList.map(region => (\n//   <label\n//     key={region}\n//     style={{\n//       display: 'flex',\n//       alignItems: 'center',\n//       marginBottom: '10px',\n//       cursor: 'pointer'\n//     }}\n//   >\n//     <input\n//       type=\"checkbox\"\n//       checked={activeRegions.includes(region)}\n//       onChange={() => toggleRegion(region)}\n//       style={{\n//         appearance: 'none',\n//         WebkitAppearance: 'none',\n//         width: '18px',\n//         height: '18px',\n//         borderRadius: '4px',\n//         border: `2px solid ${regionColorMap[region]}`,\n//         backgroundColor: activeRegions.includes(region)\n//           ? regionColorMap[region]\n//           : '#fff',\n//         marginRight: '8px',\n//         cursor: 'pointer'\n//       }}\n//     />\n//     <span\n//       style={{\n//         fontWeight: selectedCountries?.region === region ? 'bold' : 'normal'\n//       }}\n//     >\n//       {region}\n//     </span>\n//   </label>\n// ))}\n\n//           </form>\n//         </div>\n//       </div>\n\n//       {/* Year Slider */}\n//       <div style={{ marginBottom: '30px' }}>\n//         <label htmlFor=\"yearSlider\">Year: {selectedYear}</label><br />\n//         <input\n//           id=\"yearSlider\"\n//           type=\"range\"\n//           min={yearRange.min}\n//           max={yearRange.max}\n//           value={selectedYear}\n//           onChange={(e) => setSelectedYear(parseInt(e.target.value))}\n//           style={{ width: '400px' }}\n//         />\n//       </div>\n\n//       {/* Play/Pause */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <button onClick={toggleAnimation}>\n//           {isPlaying ? 'Pause ⏸️' : 'Play ▶️'}\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Home;\n\n// Home.js","map":{"version":3,"names":[],"sources":["C:/Users/dhruv/OneDrive/Desktop/CS 837 Information Vis/gdp-pollution-app/frontend/src/components/Home.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import ScatterPlot from './ScatterPlot';\r\n// import * as d3 from 'd3';\r\n\r\n// const regionList = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'];\r\n\r\n// const regionColorMap = {};\r\n// regionList.forEach((region, i) => {\r\n//   regionColorMap[region] = d3.schemeTableau10[i]; // Use d3 color scheme\r\n// });\r\n\r\n// const Home = () => {\r\n//   const [data, setData] = useState([]);\r\n//   const [selectedYear, setSelectedYear] = useState(2022);\r\n//   const [yearRange, setYearRange] = useState({ min: 1950, max: 2022 });\r\n//   const [activeRegions, setActiveRegions] = useState([]);\r\n//   const [isPlaying, setIsPlaying] = useState(false);\r\n//   const [intervalId, setIntervalId] = useState(null);\r\n//   const [selectedCountries, setSelectedCountries] = useState([]);\r\n\r\n//   const startAnimation = () => {\r\n//     if (!isPlaying) {\r\n//       const id = setInterval(() => {\r\n//         setSelectedYear(prev => {\r\n//           const nextYear = prev + 1;\r\n//           return nextYear > yearRange.max ? yearRange.min : nextYear;\r\n//         });\r\n//       }, 100);\r\n//       setIntervalId(id);\r\n//       setIsPlaying(true);\r\n//     }\r\n//   };\r\n\r\n//   const stopAnimation = () => {\r\n//     clearInterval(intervalId);\r\n//     setIsPlaying(false);\r\n//   };\r\n\r\n//   const toggleAnimation = () => {\r\n//     isPlaying ? stopAnimation() : startAnimation();\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     axios.get('http://localhost:5000/api/data')\r\n//       .then(response => {\r\n//         setData(response.data);\r\n//         const minYear = 1800;\r\n//         const maxYear = 2022;\r\n//         setYearRange({ min: minYear, max: maxYear });\r\n//       })\r\n//       .catch(error => console.error('Error fetching data:', error));\r\n\r\n//     return () => {\r\n//       clearInterval(intervalId);\r\n//     };\r\n//   }, []);\r\n\r\n//   const toggleRegion = (region) => {\r\n//     setActiveRegions(prev =>\r\n//       prev.includes(region)\r\n//         ? prev.filter(r => r !== region)\r\n//         : [...prev, region]\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ padding: '20px' }}>\r\n//       <h1>GDP vs Pollution Visualization</h1>\r\n\r\n//       <div style={{ maxWidth: '1100px', margin: '0 auto', display: 'flex' }}>\r\n//         {/* Chart */}\r\n//         <div style={{ flex: 1 }}>\r\n//         <ScatterPlot\r\n//   data={data}\r\n//   selectedYear={selectedYear}\r\n//   regionColorMap={regionColorMap}\r\n//   activeRegions={activeRegions}\r\n//   selectedCountries={selectedCountries}\r\n//   setSelectedCountries={setSelectedCountries}\r\n// />\r\n\r\n//         </div>\r\n\r\n//         {/* Legend */}\r\n//         <div style={{ marginLeft: '30px', width: '180px' }}>\r\n//           <h4 style={{ marginBottom: '12px' }}>Regions</h4>\r\n//           <form>\r\n//           {regionList.map(region => (\r\n//   <label\r\n//     key={region}\r\n//     style={{\r\n//       display: 'flex',\r\n//       alignItems: 'center',\r\n//       marginBottom: '10px',\r\n//       cursor: 'pointer'\r\n//     }}\r\n//   >\r\n//     <input\r\n//       type=\"checkbox\"\r\n//       checked={activeRegions.includes(region)}\r\n//       onChange={() => toggleRegion(region)}\r\n//       style={{\r\n//         appearance: 'none',\r\n//         WebkitAppearance: 'none',\r\n//         width: '18px',\r\n//         height: '18px',\r\n//         borderRadius: '4px',\r\n//         border: `2px solid ${regionColorMap[region]}`,\r\n//         backgroundColor: activeRegions.includes(region)\r\n//           ? regionColorMap[region]\r\n//           : '#fff',\r\n//         marginRight: '8px',\r\n//         cursor: 'pointer'\r\n//       }}\r\n//     />\r\n//     <span\r\n//       style={{\r\n//         fontWeight: selectedCountries?.region === region ? 'bold' : 'normal'\r\n//       }}\r\n//     >\r\n//       {region}\r\n//     </span>\r\n//   </label>\r\n// ))}\r\n\r\n\r\n//           </form>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Year Slider */}\r\n//       <div style={{ marginBottom: '30px' }}>\r\n//         <label htmlFor=\"yearSlider\">Year: {selectedYear}</label><br />\r\n//         <input\r\n//           id=\"yearSlider\"\r\n//           type=\"range\"\r\n//           min={yearRange.min}\r\n//           max={yearRange.max}\r\n//           value={selectedYear}\r\n//           onChange={(e) => setSelectedYear(parseInt(e.target.value))}\r\n//           style={{ width: '400px' }}\r\n//         />\r\n//       </div>\r\n\r\n//       {/* Play/Pause */}\r\n//       <div style={{ marginBottom: '20px' }}>\r\n//         <button onClick={toggleAnimation}>\r\n//           {isPlaying ? 'Pause ⏸️' : 'Play ▶️'}\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Home;\r\n\r\n\r\n// Home.js\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}