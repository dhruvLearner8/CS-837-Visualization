{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dhruv\\\\OneDrive\\\\Desktop\\\\CS 837 Information Vis\\\\gdp-pollution-app\\\\frontend\\\\src\\\\components\\\\ScatterPlot.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from 'react';\n\n// import * as d3 from 'd3';\n\n// const ScatterPlot = ({ data, selectedYear = 2022, regionColorMap, activeRegions }) => {\n//   const svgRef = useRef();\n\n//   useEffect(() => {\n//     if (!data.length) return;\n\n//    // const filteredData = data.filter(d => d.year === selectedYear);\n//    const filteredData = data.filter(d =>\n//     d.year === selectedYear &&\n//     d.entity !== 'World' &&\n//     !d.entity.toLowerCase().includes('income') &&\n//     d.gdp_per_capita > 0 &&\n//     d.co2_emissions_per_capita > 0 &&\n//     d.population > 0\n//   );\n\n//     const width = 900;\n//     const height = 550;\n//     const margin = { top: 40, right: 40, bottom: 60, left: 80 };\n\n//     const svg = d3.select(svgRef.current);\n//     svg.selectAll('*').remove(); // Clear old content\n\n//     const chart = svg\n//       .attr('width', width)\n//       .attr('height', height)\n//       .append('g')\n//       .attr('transform', `translate(${margin.left},${margin.top})`);\n\n//     const innerWidth = width - margin.left - margin.right;\n//     const innerHeight = height - margin.top - margin.bottom;\n\n//     // Scales\n//     const xScale = d3.scaleLog()\n//       .domain([100, d3.max(filteredData, d => d.gdp_per_capita || 100000)])\n//       .range([0, innerWidth]);\n\n//     const yScale = d3.scaleLog()\n//       .domain([0.1, d3.max(filteredData, d => d.co2_emissions_per_capita || 10)])\n//       .range([innerHeight, 0]);\n\n//     // const regionColors = d3.scaleOrdinal()\n//     //   .domain(['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'])\n//     //   .range(['#8c564b', '#17becf', '#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']);\n\n//     // Axes\n//     chart.append('g')\n//       .attr('transform', `translate(0, ${innerHeight})`)\n//       .call(d3.axisBottom(xScale).ticks(10, \"~s\"))\n//       .append('text')\n//       .attr('x', innerWidth / 2)\n//       .attr('y', 40)\n//       .attr('fill', '#000')\n//       .attr('text-anchor', 'middle')\n//       .text('GDP per capita (log scale)');\n\n//     chart.append('g')\n//       .call(d3.axisLeft(yScale).ticks(10, \"~s\"))\n//       .append('text')\n//       .attr('transform', 'rotate(-90)')\n//       .attr('x', -innerHeight / 2)\n//       .attr('y', -60)\n//       .attr('fill', '#000')\n//       .attr('text-anchor', 'middle')\n//       .text('CO₂ emissions per capita (log scale)');\n\n//     // Tooltip div\n//     const tooltip = d3.select(\"body\")\n//       .append(\"div\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"background\", \"#fff\")\n//       .style(\"padding\", \"6px 10px\")\n//       .style(\"border\", \"1px solid #ccc\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"pointer-events\", \"none\")\n//       .style(\"opacity\", 0)\n//       .on('click', (event) => {\n//         event.stopPropagation(); // Prevent sticky tooltip behavior\n//       });;\n\n//     // Remove previous circles\n// chart.selectAll('circle.bubble').remove();\n// chart.selectAll('circle.ring').remove();\n\n// // RING CIRCLES (outer)\n// chart.selectAll('circle.ring')\n//   .data(filteredData.filter(d => activeRegions.includes(d.region)))\n//   .enter()\n//   .append('circle')\n//   .attr('class', 'ring')\n//   .attr('cx', d => xScale(d.gdp_per_capita || 100))\n//   .attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1))\n//   .attr('r', d => Math.sqrt(d.population) / 1000 + 4) // slightly bigger than main circle\n//   .attr('fill', 'none')\n//   .attr('stroke', d => regionColorMap[d.region] || '#000')\n//   .attr('stroke-width', 2)\n//   .attr('opacity', 1);\n\n// // MAIN CIRCLES (data bubble)\n// chart.selectAll('circle.bubble')\n//   .data(filteredData)\n//   .enter()\n//   .append('circle')\n//   .attr('class', 'bubble')\n//   .attr('cx', d => xScale(d.gdp_per_capita || 100))\n//   .attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1))\n//   .attr('r', d => Math.sqrt(d.population) / 1000)\n//   .attr('fill', d =>\n//     activeRegions.includes(d.region)\n//       ? regionColorMap[d.region] || '#000'\n//       : '#ccc'\n//   )\n//   .attr('opacity', 0.85)\n//   .on('mouseover', function (event, d) {\n//     tooltip.transition().duration(200).style('opacity', 1);\n//     tooltip.html(`\n//       <strong>${d.entity}</strong><br/>\n//       Year: ${d.year}<br/>\n//       GDP per capita: $${Math.round(d.gdp_per_capita)}<br/>\n//       CO₂ per capita: ${d.co2_emissions_per_capita.toFixed(2)} t<br/>\n//       Population: ${d.population.toLocaleString()}\n//     `)\n//       .style(\"left\", (event.pageX + 10) + \"px\")\n//       .style(\"top\", (event.pageY - 28) + \"px\");\n\n//     // Highlight hovered bubble\n//     d3.select(this)\n//       .attr('stroke', regionColorMap[d.region] || '#000')\n//       .attr('stroke-width', 3)\n//       .attr('fill', d3.color(regionColorMap[d.region]).brighter(0.5))\n//       .attr('r', Math.sqrt(d.population) / 1000 + 4); // Slight size increase\n//   })\n\n//   .on('mouseout', function (event, d) {\n//     tooltip.transition().duration(500).style('opacity', 0);\n\n//     // Reset bubble to original state\n//     d3.select(this)\n//       .attr('stroke', 'none')\n//       .attr('r', Math.sqrt(d.population) / 1000)\n//       .attr('fill', d => activeRegions.includes(d.region)\n//   ? regionColorMap[d.region] || '#000'\n//   : '#ccc'\n// );\n\n//   });\n\n//   // .on('mouseover', (event, d) => {\n//   //   tooltip.transition().duration(200).style('opacity', 1);\n//   //   tooltip.html(`\n//   //     <strong>${d.entity}</strong><br/>\n//   //     Year: ${d.year}<br/>\n//   //     GDP per capita: $${Math.round(d.gdp_per_capita)}<br/>\n//   //     CO₂ per capita: ${d.co2_emissions_per_capita.toFixed(2)} t<br/>\n//   //     Population: ${d.population.toLocaleString()}\n//   //   `)\n//   //     .style(\"left\", (event.pageX + 10) + \"px\")\n//   //     .style(\"top\", (event.pageY - 28) + \"px\");\n//   // })\n//   // .on('mouseout', () => {\n//   //   tooltip.transition().duration(500).style('opacity', 0);\n//   // });\n\n//       // --- Country Labels ---\n// // Remove old labels\n// chart.selectAll('text.label').remove();\n\n// // Add country labels\n// chart.selectAll('text.label')\n//   .data(filteredData.filter(d => activeRegions.includes(d.region))) // Only for selected regions\n//   .enter()\n//   .append('text')\n//   .attr('class', 'label')\n//   .attr('x', d => xScale(d.gdp_per_capita || 100))\n//   .attr('y', d => yScale(d.co2_emissions_per_capita || 0.1) - 8) // Above the circle\n//   .text(d => d.entity)\n//   .attr('font-size', '10px')\n//   .attr('fill', d => regionColorMap[d.region] || '#333')\n//   .attr('font-weight', 'bold')\n//   .attr('text-anchor', 'middle');\n\n//   }, [data, selectedYear, activeRegions, regionColorMap]);\n\n//   return <svg ref={svgRef}></svg>;\n// };\n\n// export default ScatterPlot;\n\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScatterPlot = ({\n  data,\n  selectedYear = 2022,\n  regionColorMap,\n  activeRegions,\n  selectedCountry,\n  setSelectedCountry\n}) => {\n  _s();\n  const svgRef = useRef();\n  useEffect(() => {\n    if (!data.length) return;\n    const filteredData = data.filter(d => d.year === selectedYear && d.entity !== 'World' && !d.entity.toLowerCase().includes('income') && d.gdp_per_capita > 0 && d.co2_emissions_per_capita > 0 && d.population > 0);\n    const width = 900;\n    const height = 550;\n    const margin = {\n      top: 40,\n      right: 40,\n      bottom: 60,\n      left: 80\n    };\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove(); // Clear old content\n\n    const chart = svg.attr('width', width).attr('height', height).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n    const xScale = d3.scaleLog().domain([100, d3.max(filteredData, d => d.gdp_per_capita || 100000)]).range([0, innerWidth]);\n    const yScale = d3.scaleLog().domain([0.1, d3.max(filteredData, d => d.co2_emissions_per_capita || 10)]).range([innerHeight, 0]);\n    chart.append('g').attr('transform', `translate(0, ${innerHeight})`).call(d3.axisBottom(xScale).ticks(10, \"~s\")).append('text').attr('x', innerWidth / 2).attr('y', 40).attr('fill', '#000').attr('text-anchor', 'middle').text('GDP per capita (log scale)');\n    chart.append('g').call(d3.axisLeft(yScale).ticks(10, \"~s\")).append('text').attr('transform', 'rotate(-90)').attr('x', -innerHeight / 2).attr('y', -60).attr('fill', '#000').attr('text-anchor', 'middle').text('CO₂ emissions per capita (log scale)');\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"d3-tooltip\").style(\"position\", \"absolute\").style(\"background\", \"#fff\").style(\"padding\", \"6px 10px\").style(\"border\", \"1px solid #ccc\").style(\"border-radius\", \"4px\").style(\"pointer-events\", \"none\").style(\"opacity\", 0).on('click', event => {\n      event.stopPropagation();\n    });\n    chart.selectAll('circle.ring').remove();\n    chart.selectAll('circle.bubble').remove();\n    chart.selectAll('circle.ring').data(filteredData.filter(d => activeRegions.includes(d.region))).enter().append('circle').attr('class', 'ring').attr('cx', d => xScale(d.gdp_per_capita || 100)).attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1)).attr('r', d => Math.sqrt(d.population) / 1000 + 4).attr('fill', 'none').attr('stroke', d => regionColorMap[d.region] || '#000').attr('stroke-width', 2).attr('opacity', 1);\n    chart.selectAll('circle.bubble').data(filteredData).enter().append('circle').attr('class', 'bubble').attr('cx', d => xScale(d.gdp_per_capita || 100)).attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1)).attr('r', d => {\n      const baseR = Math.sqrt(d.population) / 1000;\n      return (selectedCountry === null || selectedCountry === void 0 ? void 0 : selectedCountry.entity) === d.entity ? baseR + 4 : baseR;\n    }).attr('fill', d => activeRegions.includes(d.region) ? regionColorMap[d.region] || '#000' : '#ccc').attr('stroke', d => (selectedCountry === null || selectedCountry === void 0 ? void 0 : selectedCountry.entity) === d.entity ? regionColorMap[d.region] : 'none').attr('stroke-width', d => (selectedCountry === null || selectedCountry === void 0 ? void 0 : selectedCountry.entity) === d.entity ? 3 : 0).attr('opacity', 0.85).on('mouseover', function (event, d) {\n      tooltip.transition().duration(200).style('opacity', 1);\n      tooltip.html(`\n          <strong>${d.entity}</strong><br/>\n          Year: ${d.year}<br/>\n          GDP per capita: $${Math.round(d.gdp_per_capita)}<br/>\n          CO₂ per capita: ${d.co2_emissions_per_capita.toFixed(2)} t<br/>\n          Population: ${d.population.toLocaleString()}\n        `).style(\"left\", event.pageX + 10 + \"px\").style(\"top\", event.pageY - 28 + \"px\");\n      d3.select(this).attr('stroke', regionColorMap[d.region] || '#000').attr('stroke-width', 3).attr('fill', d3.color(regionColorMap[d.region]).brighter(0.5)).attr('r', Math.sqrt(d.population) / 1000 + 4);\n    }).on('mouseout', function (event, d) {\n      tooltip.transition().duration(500).style('opacity', 0);\n      d3.select(this).attr('stroke', (selectedCountry === null || selectedCountry === void 0 ? void 0 : selectedCountry.entity) === d.entity ? regionColorMap[d.region] : 'none').attr('stroke-width', (selectedCountry === null || selectedCountry === void 0 ? void 0 : selectedCountry.entity) === d.entity ? 3 : 0).attr('r', Math.sqrt(d.population) / 1000).attr('fill', d => activeRegions.includes(d.region) ? regionColorMap[d.region] || '#000' : '#ccc');\n    }).on('click', function (event, d) {\n      event.stopPropagation();\n      setSelectedCountry(d);\n    });\n    chart.selectAll('text.label').remove();\n    chart.selectAll('text.label').data(filteredData.filter(d => activeRegions.includes(d.region))).enter().append('text').attr('class', 'label').attr('x', d => xScale(d.gdp_per_capita || 100)).attr('y', d => yScale(d.co2_emissions_per_capita || 0.1) - 8).text(d => d.entity).attr('font-size', '10px').attr('fill', d => regionColorMap[d.region] || '#333').attr('font-weight', 'bold').attr('text-anchor', 'middle');\n  }, [data, selectedYear, activeRegions, regionColorMap, selectedCountry]);\n  useEffect(() => {\n    const handleClickOutside = () => {\n      setSelectedCountry(null);\n    };\n    document.addEventListener('click', handleClickOutside);\n    return () => document.removeEventListener('click', handleClickOutside);\n  }, [setSelectedCountry]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svgRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 383,\n    columnNumber: 10\n  }, this);\n};\n_s(ScatterPlot, \"xZvsc6Dl8WHAXhRrVyhrxei3QC0=\");\n_c = ScatterPlot;\nexport default ScatterPlot;\nvar _c;\n$RefreshReg$(_c, \"ScatterPlot\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","ScatterPlot","data","selectedYear","regionColorMap","activeRegions","selectedCountry","setSelectedCountry","_s","svgRef","length","filteredData","filter","d","year","entity","toLowerCase","includes","gdp_per_capita","co2_emissions_per_capita","population","width","height","margin","top","right","bottom","left","svg","select","current","selectAll","remove","chart","attr","append","innerWidth","innerHeight","xScale","scaleLog","domain","max","range","yScale","call","axisBottom","ticks","text","axisLeft","tooltip","style","on","event","stopPropagation","region","enter","Math","sqrt","baseR","transition","duration","html","round","toFixed","toLocaleString","pageX","pageY","color","brighter","handleClickOutside","document","addEventListener","removeEventListener","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/dhruv/OneDrive/Desktop/CS 837 Information Vis/gdp-pollution-app/frontend/src/components/ScatterPlot.js"],"sourcesContent":["\r\n\r\n// import React, { useEffect, useRef } from 'react';\r\n\r\n\r\n// import * as d3 from 'd3';\r\n\r\n// const ScatterPlot = ({ data, selectedYear = 2022, regionColorMap, activeRegions }) => {\r\n//   const svgRef = useRef();\r\n\r\n//   useEffect(() => {\r\n//     if (!data.length) return;\r\n\r\n//    // const filteredData = data.filter(d => d.year === selectedYear);\r\n//    const filteredData = data.filter(d =>\r\n//     d.year === selectedYear &&\r\n//     d.entity !== 'World' &&\r\n//     !d.entity.toLowerCase().includes('income') &&\r\n//     d.gdp_per_capita > 0 &&\r\n//     d.co2_emissions_per_capita > 0 &&\r\n//     d.population > 0\r\n//   );\r\n\r\n  \r\n  \r\n//     const width = 900;\r\n//     const height = 550;\r\n//     const margin = { top: 40, right: 40, bottom: 60, left: 80 };\r\n\r\n//     const svg = d3.select(svgRef.current);\r\n//     svg.selectAll('*').remove(); // Clear old content\r\n\r\n//     const chart = svg\r\n//       .attr('width', width)\r\n//       .attr('height', height)\r\n//       .append('g')\r\n//       .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n//     const innerWidth = width - margin.left - margin.right;\r\n//     const innerHeight = height - margin.top - margin.bottom;\r\n\r\n//     // Scales\r\n//     const xScale = d3.scaleLog()\r\n//       .domain([100, d3.max(filteredData, d => d.gdp_per_capita || 100000)])\r\n//       .range([0, innerWidth]);\r\n\r\n//     const yScale = d3.scaleLog()\r\n//       .domain([0.1, d3.max(filteredData, d => d.co2_emissions_per_capita || 10)])\r\n//       .range([innerHeight, 0]);\r\n\r\n//     // const regionColors = d3.scaleOrdinal()\r\n//     //   .domain(['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'])\r\n//     //   .range(['#8c564b', '#17becf', '#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']);\r\n\r\n//     // Axes\r\n//     chart.append('g')\r\n//       .attr('transform', `translate(0, ${innerHeight})`)\r\n//       .call(d3.axisBottom(xScale).ticks(10, \"~s\"))\r\n//       .append('text')\r\n//       .attr('x', innerWidth / 2)\r\n//       .attr('y', 40)\r\n//       .attr('fill', '#000')\r\n//       .attr('text-anchor', 'middle')\r\n//       .text('GDP per capita (log scale)');\r\n\r\n//     chart.append('g')\r\n//       .call(d3.axisLeft(yScale).ticks(10, \"~s\"))\r\n//       .append('text')\r\n//       .attr('transform', 'rotate(-90)')\r\n//       .attr('x', -innerHeight / 2)\r\n//       .attr('y', -60)\r\n//       .attr('fill', '#000')\r\n//       .attr('text-anchor', 'middle')\r\n//       .text('CO₂ emissions per capita (log scale)');\r\n\r\n//     // Tooltip div\r\n//     const tooltip = d3.select(\"body\")\r\n//       .append(\"div\")\r\n//       .style(\"position\", \"absolute\")\r\n//       .style(\"background\", \"#fff\")\r\n//       .style(\"padding\", \"6px 10px\")\r\n//       .style(\"border\", \"1px solid #ccc\")\r\n//       .style(\"border-radius\", \"4px\")\r\n//       .style(\"pointer-events\", \"none\")\r\n//       .style(\"opacity\", 0)\r\n//       .on('click', (event) => {\r\n//         event.stopPropagation(); // Prevent sticky tooltip behavior\r\n//       });;\r\n\r\n \r\n\r\n//     // Remove previous circles\r\n// chart.selectAll('circle.bubble').remove();\r\n// chart.selectAll('circle.ring').remove();\r\n\r\n// // RING CIRCLES (outer)\r\n// chart.selectAll('circle.ring')\r\n//   .data(filteredData.filter(d => activeRegions.includes(d.region)))\r\n//   .enter()\r\n//   .append('circle')\r\n//   .attr('class', 'ring')\r\n//   .attr('cx', d => xScale(d.gdp_per_capita || 100))\r\n//   .attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1))\r\n//   .attr('r', d => Math.sqrt(d.population) / 1000 + 4) // slightly bigger than main circle\r\n//   .attr('fill', 'none')\r\n//   .attr('stroke', d => regionColorMap[d.region] || '#000')\r\n//   .attr('stroke-width', 2)\r\n//   .attr('opacity', 1);\r\n\r\n// // MAIN CIRCLES (data bubble)\r\n// chart.selectAll('circle.bubble')\r\n//   .data(filteredData)\r\n//   .enter()\r\n//   .append('circle')\r\n//   .attr('class', 'bubble')\r\n//   .attr('cx', d => xScale(d.gdp_per_capita || 100))\r\n//   .attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1))\r\n//   .attr('r', d => Math.sqrt(d.population) / 1000)\r\n//   .attr('fill', d =>\r\n//     activeRegions.includes(d.region)\r\n//       ? regionColorMap[d.region] || '#000'\r\n//       : '#ccc'\r\n//   )\r\n//   .attr('opacity', 0.85)\r\n//   .on('mouseover', function (event, d) {\r\n//     tooltip.transition().duration(200).style('opacity', 1);\r\n//     tooltip.html(`\r\n//       <strong>${d.entity}</strong><br/>\r\n//       Year: ${d.year}<br/>\r\n//       GDP per capita: $${Math.round(d.gdp_per_capita)}<br/>\r\n//       CO₂ per capita: ${d.co2_emissions_per_capita.toFixed(2)} t<br/>\r\n//       Population: ${d.population.toLocaleString()}\r\n//     `)\r\n//       .style(\"left\", (event.pageX + 10) + \"px\")\r\n//       .style(\"top\", (event.pageY - 28) + \"px\");\r\n  \r\n//     // Highlight hovered bubble\r\n//     d3.select(this)\r\n//       .attr('stroke', regionColorMap[d.region] || '#000')\r\n//       .attr('stroke-width', 3)\r\n//       .attr('fill', d3.color(regionColorMap[d.region]).brighter(0.5))\r\n//       .attr('r', Math.sqrt(d.population) / 1000 + 4); // Slight size increase\r\n//   })\r\n  \r\n//   .on('mouseout', function (event, d) {\r\n//     tooltip.transition().duration(500).style('opacity', 0);\r\n  \r\n//     // Reset bubble to original state\r\n//     d3.select(this)\r\n//       .attr('stroke', 'none')\r\n//       .attr('r', Math.sqrt(d.population) / 1000)\r\n//       .attr('fill', d => activeRegions.includes(d.region)\r\n//   ? regionColorMap[d.region] || '#000'\r\n//   : '#ccc'\r\n// );\r\n\r\n//   });\r\n  \r\n//   // .on('mouseover', (event, d) => {\r\n//   //   tooltip.transition().duration(200).style('opacity', 1);\r\n//   //   tooltip.html(`\r\n//   //     <strong>${d.entity}</strong><br/>\r\n//   //     Year: ${d.year}<br/>\r\n//   //     GDP per capita: $${Math.round(d.gdp_per_capita)}<br/>\r\n//   //     CO₂ per capita: ${d.co2_emissions_per_capita.toFixed(2)} t<br/>\r\n//   //     Population: ${d.population.toLocaleString()}\r\n//   //   `)\r\n//   //     .style(\"left\", (event.pageX + 10) + \"px\")\r\n//   //     .style(\"top\", (event.pageY - 28) + \"px\");\r\n//   // })\r\n//   // .on('mouseout', () => {\r\n//   //   tooltip.transition().duration(500).style('opacity', 0);\r\n//   // });\r\n\r\n\r\n//       // --- Country Labels ---\r\n// // Remove old labels\r\n// chart.selectAll('text.label').remove();\r\n\r\n// // Add country labels\r\n// chart.selectAll('text.label')\r\n//   .data(filteredData.filter(d => activeRegions.includes(d.region))) // Only for selected regions\r\n//   .enter()\r\n//   .append('text')\r\n//   .attr('class', 'label')\r\n//   .attr('x', d => xScale(d.gdp_per_capita || 100))\r\n//   .attr('y', d => yScale(d.co2_emissions_per_capita || 0.1) - 8) // Above the circle\r\n//   .text(d => d.entity)\r\n//   .attr('font-size', '10px')\r\n//   .attr('fill', d => regionColorMap[d.region] || '#333')\r\n//   .attr('font-weight', 'bold')\r\n//   .attr('text-anchor', 'middle');\r\n\r\n\r\n\r\n//   }, [data, selectedYear, activeRegions, regionColorMap]);\r\n\r\n//   return <svg ref={svgRef}></svg>;\r\n// };\r\n\r\n// export default ScatterPlot;\r\n\r\n\r\nimport React, { useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst ScatterPlot = ({\r\n  data,\r\n  selectedYear = 2022,\r\n  regionColorMap,\r\n  activeRegions,\r\n  selectedCountry,\r\n  setSelectedCountry\r\n}) => {\r\n  const svgRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!data.length) return;\r\n\r\n    const filteredData = data.filter(d =>\r\n      d.year === selectedYear &&\r\n      d.entity !== 'World' &&\r\n      !d.entity.toLowerCase().includes('income') &&\r\n      d.gdp_per_capita > 0 &&\r\n      d.co2_emissions_per_capita > 0 &&\r\n      d.population > 0\r\n    );\r\n\r\n    const width = 900;\r\n    const height = 550;\r\n    const margin = { top: 40, right: 40, bottom: 60, left: 80 };\r\n\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll('*').remove(); // Clear old content\r\n\r\n    const chart = svg\r\n      .attr('width', width)\r\n      .attr('height', height)\r\n      .append('g')\r\n      .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n    const innerWidth = width - margin.left - margin.right;\r\n    const innerHeight = height - margin.top - margin.bottom;\r\n\r\n    const xScale = d3.scaleLog()\r\n      .domain([100, d3.max(filteredData, d => d.gdp_per_capita || 100000)])\r\n      .range([0, innerWidth]);\r\n\r\n    const yScale = d3.scaleLog()\r\n      .domain([0.1, d3.max(filteredData, d => d.co2_emissions_per_capita || 10)])\r\n      .range([innerHeight, 0]);\r\n\r\n    chart.append('g')\r\n      .attr('transform', `translate(0, ${innerHeight})`)\r\n      .call(d3.axisBottom(xScale).ticks(10, \"~s\"))\r\n      .append('text')\r\n      .attr('x', innerWidth / 2)\r\n      .attr('y', 40)\r\n      .attr('fill', '#000')\r\n      .attr('text-anchor', 'middle')\r\n      .text('GDP per capita (log scale)');\r\n\r\n    chart.append('g')\r\n      .call(d3.axisLeft(yScale).ticks(10, \"~s\"))\r\n      .append('text')\r\n      .attr('transform', 'rotate(-90)')\r\n      .attr('x', -innerHeight / 2)\r\n      .attr('y', -60)\r\n      .attr('fill', '#000')\r\n      .attr('text-anchor', 'middle')\r\n      .text('CO₂ emissions per capita (log scale)');\r\n\r\n    const tooltip = d3.select(\"body\")\r\n      .append(\"div\")\r\n      .attr(\"class\", \"d3-tooltip\")\r\n      .style(\"position\", \"absolute\")\r\n      .style(\"background\", \"#fff\")\r\n      .style(\"padding\", \"6px 10px\")\r\n      .style(\"border\", \"1px solid #ccc\")\r\n      .style(\"border-radius\", \"4px\")\r\n      .style(\"pointer-events\", \"none\")\r\n      .style(\"opacity\", 0)\r\n      .on('click', (event) => {\r\n        event.stopPropagation();\r\n      });\r\n\r\n    chart.selectAll('circle.ring').remove();\r\n    chart.selectAll('circle.bubble').remove();\r\n\r\n    chart.selectAll('circle.ring')\r\n      .data(filteredData.filter(d => activeRegions.includes(d.region)))\r\n      .enter()\r\n      .append('circle')\r\n      .attr('class', 'ring')\r\n      .attr('cx', d => xScale(d.gdp_per_capita || 100))\r\n      .attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1))\r\n      .attr('r', d => Math.sqrt(d.population) / 1000 + 4)\r\n      .attr('fill', 'none')\r\n      .attr('stroke', d => regionColorMap[d.region] || '#000')\r\n      .attr('stroke-width', 2)\r\n      .attr('opacity', 1);\r\n\r\n    chart.selectAll('circle.bubble')\r\n      .data(filteredData)\r\n      .enter()\r\n      .append('circle')\r\n      .attr('class', 'bubble')\r\n      .attr('cx', d => xScale(d.gdp_per_capita || 100))\r\n      .attr('cy', d => yScale(d.co2_emissions_per_capita || 0.1))\r\n      .attr('r', d => {\r\n        const baseR = Math.sqrt(d.population) / 1000;\r\n        return selectedCountry?.entity === d.entity ? baseR + 4 : baseR;\r\n      })\r\n      .attr('fill', d =>\r\n        activeRegions.includes(d.region)\r\n          ? regionColorMap[d.region] || '#000'\r\n          : '#ccc'\r\n      )\r\n      .attr('stroke', d => selectedCountry?.entity === d.entity ? regionColorMap[d.region] : 'none')\r\n      .attr('stroke-width', d => selectedCountry?.entity === d.entity ? 3 : 0)\r\n      .attr('opacity', 0.85)\r\n      .on('mouseover', function (event, d) {\r\n        tooltip.transition().duration(200).style('opacity', 1);\r\n        tooltip.html(`\r\n          <strong>${d.entity}</strong><br/>\r\n          Year: ${d.year}<br/>\r\n          GDP per capita: $${Math.round(d.gdp_per_capita)}<br/>\r\n          CO₂ per capita: ${d.co2_emissions_per_capita.toFixed(2)} t<br/>\r\n          Population: ${d.population.toLocaleString()}\r\n        `)\r\n          .style(\"left\", (event.pageX + 10) + \"px\")\r\n          .style(\"top\", (event.pageY - 28) + \"px\");\r\n\r\n        d3.select(this)\r\n          .attr('stroke', regionColorMap[d.region] || '#000')\r\n          .attr('stroke-width', 3)\r\n          .attr('fill', d3.color(regionColorMap[d.region]).brighter(0.5))\r\n          .attr('r', Math.sqrt(d.population) / 1000 + 4);\r\n      })\r\n      .on('mouseout', function (event, d) {\r\n        tooltip.transition().duration(500).style('opacity', 0);\r\n\r\n        d3.select(this)\r\n          .attr('stroke', selectedCountry?.entity === d.entity ? regionColorMap[d.region] : 'none')\r\n          .attr('stroke-width', selectedCountry?.entity === d.entity ? 3 : 0)\r\n          .attr('r', Math.sqrt(d.population) / 1000)\r\n          .attr('fill', d =>\r\n            activeRegions.includes(d.region)\r\n              ? regionColorMap[d.region] || '#000'\r\n              : '#ccc'\r\n          );\r\n      })\r\n      .on('click', function (event, d) {\r\n        event.stopPropagation();\r\n        setSelectedCountry(d);\r\n      });\r\n\r\n    chart.selectAll('text.label').remove();\r\n\r\n    chart.selectAll('text.label')\r\n      .data(filteredData.filter(d => activeRegions.includes(d.region)))\r\n      .enter()\r\n      .append('text')\r\n      .attr('class', 'label')\r\n      .attr('x', d => xScale(d.gdp_per_capita || 100))\r\n      .attr('y', d => yScale(d.co2_emissions_per_capita || 0.1) - 8)\r\n      .text(d => d.entity)\r\n      .attr('font-size', '10px')\r\n      .attr('fill', d => regionColorMap[d.region] || '#333')\r\n      .attr('font-weight', 'bold')\r\n      .attr('text-anchor', 'middle');\r\n\r\n  }, [data, selectedYear, activeRegions, regionColorMap, selectedCountry]);\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = () => {\r\n      setSelectedCountry(null);\r\n    };\r\n    document.addEventListener('click', handleClickOutside);\r\n    return () => document.removeEventListener('click', handleClickOutside);\r\n  }, [setSelectedCountry]);\r\n\r\n  return <svg ref={svgRef}></svg>;\r\n};\r\n\r\nexport default ScatterPlot;\r\n"],"mappings":";;AAEA;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAEA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,WAAW,GAAGA,CAAC;EACnBC,IAAI;EACJC,YAAY,GAAG,IAAI;EACnBC,cAAc;EACdC,aAAa;EACbC,eAAe;EACfC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,MAAM,GAAGZ,MAAM,CAAC,CAAC;EAEvBD,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,IAAI,CAACQ,MAAM,EAAE;IAElB,MAAMC,YAAY,GAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}