{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dhruv\\\\OneDrive\\\\Desktop\\\\CS 837 Information Vis\\\\gdp-pollution-app\\\\frontend\\\\src\\\\components\\\\Home.js\",\n  _s = $RefreshSig$();\n// // Home.js\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import ScatterPlot from './ScatterPlot';\n// import CountrySelector from './CountrySelector';\n// import * as d3 from 'd3';\n\n// const regionList = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'];\n\n// const regionColorMap = {};\n// regionList.forEach((region, i) => {\n//   regionColorMap[region] = d3.schemeTableau10[i];\n// });\n\n// const Home = () => {\n//   const [data, setData] = useState([]);\n//   const [selectedYear, setSelectedYear] = useState(2022);\n//   const [yearRange, setYearRange] = useState({ min: 1950, max: 2022 });\n//   const [activeRegions, setActiveRegions] = useState([]);\n//   const [selectedCountries, setSelectedCountries] = useState([]);\n//   const [isPlaying, setIsPlaying] = useState(false);\n//   const [intervalId, setIntervalId] = useState(null);\n//   const [showCountrySelector, setShowCountrySelector] = useState(false);\n\n//   const startAnimation = () => {\n//     if (!isPlaying) {\n//       const id = setInterval(() => {\n//         setSelectedYear(prev => {\n//           const nextYear = prev + 1;\n//           return nextYear > yearRange.max ? yearRange.min : nextYear;\n//         });\n//       }, 100);\n//       setIntervalId(id);\n//       setIsPlaying(true);\n//     }\n//   };\n\n//   const stopAnimation = () => {\n//     clearInterval(intervalId);\n//     setIsPlaying(false);\n//   };\n\n//   const toggleAnimation = () => {\n//     isPlaying ? stopAnimation() : startAnimation();\n//   };\n\n//   useEffect(() => {\n//     axios.get('http://localhost:5000/api/data')\n//       .then(response => {\n//         setData(response.data);\n//         setYearRange({ min: 1800, max: 2022 });\n//       })\n//       .catch(error => console.error('Error fetching data:', error));\n\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   const toggleRegion = (region) => {\n//     setActiveRegions(prev =>\n//       prev.includes(region)\n//         ? prev.filter(r => r !== region)\n//         : [...prev, region]\n//     );\n//   };\n\n//   const toggleCountry = (country) => {\n//     const exists = selectedCountries.find(c => c.entity === country.entity);\n//     if (exists) {\n//       setSelectedCountries(prev => prev.filter(c => c.entity !== country.entity));\n//     } else {\n//       setSelectedCountries(prev => [...prev, country]);\n//     }\n//   };\n\n//   return (\n//     <div style={{ padding: '20px', position: 'relative' }}>\n//       <h1>GDP vs Pollution Visualization</h1>\n\n//       <div style={{ maxWidth: '1100px', margin: '0 auto', display: 'flex' }}>\n//         {/* Chart */}\n//         <div style={{ flex: 1 }}>\n//           <ScatterPlot\n//             data={data}\n//             selectedYear={selectedYear}\n//             regionColorMap={regionColorMap}\n//             activeRegions={activeRegions}\n//             selectedCountries={selectedCountries}\n//             setSelectedCountries={setSelectedCountries}\n//           />\n//         </div>\n\n//         {/* Region Legend */}\n//         <div style={{ marginLeft: '30px', width: '180px' }}>\n//           <h4 style={{ marginBottom: '12px' }}>Regions</h4>\n//           <form>\n//             {regionList.map(region => (\n//               <label key={region} style={{ display: 'flex', alignItems: 'center', marginBottom: '10px', cursor: 'pointer' }}>\n//                 <input\n//                   type=\"checkbox\"\n//                   checked={activeRegions.includes(region)}\n//                   onChange={() => toggleRegion(region)}\n//                   style={{\n//                     appearance: 'none',\n//                     WebkitAppearance: 'none',\n//                     width: '18px',\n//                     height: '18px',\n//                     borderRadius: '4px',\n//                     backgroundColor: activeRegions.includes(region)\n//                       ? regionColorMap[region]\n//                       : '#fff',\n//                     border: `2px solid ${regionColorMap[region]}`,\n//                     marginRight: '8px',\n//                     cursor: 'pointer'\n//                   }}\n//                 />\n//                 <span>{region}</span>\n//               </label>\n//             ))}\n//           </form>\n\n//           {/* Button to open country selector */}\n//          {/* Country selector + reset buttons */}\n// <div style={{ marginTop: '20px', display: 'flex', flexDirection: 'column', gap: '10px' }}>\n//   <button onClick={() => setShowCountrySelector(true)}>\n//     + Select Countries\n//   </button>\n\n//   <button\n//     onClick={() => {\n//       setSelectedCountries([]);\n//       setActiveRegions([]);\n//     }}\n//     style={{\n//       backgroundColor: '#f44336',\n//       color: 'white',\n//       border: 'none',\n//       padding: '8px',\n//       borderRadius: '4px',\n//       cursor: 'pointer'\n//     }}\n//   >\n//     Reset Selections\n//   </button>\n// </div>\n\n//         </div>\n//       </div>\n\n//       {/* Year Slider */}\n//       <div style={{ marginBottom: '30px' }}>\n//         <label htmlFor=\"yearSlider\">Year: {selectedYear}</label><br />\n//         <input\n//           id=\"yearSlider\"\n//           type=\"range\"\n//           min={yearRange.min}\n//           max={yearRange.max}\n//           value={selectedYear}\n//           onChange={(e) => setSelectedYear(parseInt(e.target.value))}\n//           style={{ width: '400px' }}\n//         />\n//       </div>\n\n//       {/* Play/Pause */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <button onClick={toggleAnimation}>\n//           {isPlaying ? 'Pause ‚è∏Ô∏è' : 'Play ‚ñ∂Ô∏è'}\n//         </button>\n//       </div>\n\n//       {/* Country selector panel */}\n//       {showCountrySelector && (\n//         <CountrySelector\n//           data={data}\n//           selectedCountries={selectedCountries}\n//           toggleCountry={toggleCountry}\n//           close={() => setShowCountrySelector(false)}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Home;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport ScatterPlot from './ScatterPlot';\nimport CountrySelector from './CountrySelector';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst regionList = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'];\nconst regionColorMap = {};\nregionList.forEach((region, i) => {\n  regionColorMap[region] = d3.schemeTableau10[i];\n});\nconst Home = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [selectedYear, setSelectedYear] = useState(2022);\n  const [yearRange, setYearRange] = useState({\n    min: 1950,\n    max: 2022\n  });\n  const [activeRegions, setActiveRegions] = useState([]);\n  const [selectedCountries, setSelectedCountries] = useState([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [intervalId, setIntervalId] = useState(null);\n  const [showCountrySelector, setShowCountrySelector] = useState(false);\n  const [zoomMode, setZoomMode] = useState(false); // NEW!\n\n  const startAnimation = () => {\n    if (!isPlaying) {\n      const id = setInterval(() => {\n        setSelectedYear(prev => {\n          const nextYear = prev + 1;\n          if (nextYear > yearRange.max) {\n            clearInterval(id); // Stop the animation\n            setIsPlaying(false); // Update play state\n            return yearRange.max; // Stay on 2022\n          }\n          return nextYear;\n        });\n      }, 100);\n      // const id = setInterval(() => {\n      //   setSelectedYear(prev => {\n      //     const nextYear = prev + 1;\n      //     return nextYear > yearRange.max ? yearRange.min : nextYear;\n      //   });\n      // }, 100);\n      setIntervalId(id);\n      setIsPlaying(true);\n    }\n  };\n  const stopAnimation = () => {\n    clearInterval(intervalId);\n    setIsPlaying(false);\n  };\n  const toggleAnimation = () => {\n    isPlaying ? stopAnimation() : startAnimation();\n  };\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/data').then(response => {\n      setData(response.data);\n      setYearRange({\n        min: 1800,\n        max: 2022\n      });\n    }).catch(error => console.error('Error fetching data:', error));\n    return () => clearInterval(intervalId);\n  }, []);\n  const toggleRegion = region => {\n    setActiveRegions(prev => prev.includes(region) ? prev.filter(r => r !== region) : [...prev, region]);\n  };\n  const toggleCountry = country => {\n    const exists = selectedCountries.find(c => c.entity === country.entity);\n    if (exists) {\n      setSelectedCountries(prev => prev.filter(c => c.entity !== country.entity));\n    } else {\n      setSelectedCountries(prev => [...prev, country]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"GDP vs Pollution Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '12px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setZoomMode(!zoomMode),\n        style: {\n          padding: '8px 12px',\n          backgroundColor: zoomMode ? '#007bff' : '#ccc',\n          color: '#fff',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: zoomMode ? 'üß≠ Zoom Mode: ON' : 'üîç Enable Zoom Mode'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: '1100px',\n        margin: '0 auto',\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(ScatterPlot, {\n          data: data,\n          selectedYear: selectedYear,\n          regionColorMap: regionColorMap,\n          activeRegions: activeRegions,\n          selectedCountries: selectedCountries,\n          setSelectedCountries: setSelectedCountries,\n          zoomMode: zoomMode // NEW!\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginLeft: '30px',\n          width: '180px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            marginBottom: '12px'\n          },\n          children: \"Regions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          children: regionList.map(region => /*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              marginBottom: '10px',\n              cursor: 'pointer'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: activeRegions.includes(region),\n              onChange: () => toggleRegion(region),\n              style: {\n                appearance: 'none',\n                WebkitAppearance: 'none',\n                width: '18px',\n                height: '18px',\n                borderRadius: '4px',\n                backgroundColor: activeRegions.includes(region) ? regionColorMap[region] : '#fff',\n                border: `2px solid ${regionColorMap[region]}`,\n                marginRight: '8px',\n                cursor: 'pointer'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: region\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 17\n            }, this)]\n          }, region, true, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '20px',\n            display: 'flex',\n            flexDirection: 'column',\n            gap: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowCountrySelector(true),\n            children: \"+ Select Countries\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setSelectedCountries([]);\n              setActiveRegions([]);\n            },\n            style: {\n              backgroundColor: '#f44336',\n              color: 'white',\n              border: 'none',\n              padding: '8px',\n              borderRadius: '4px',\n              cursor: 'pointer'\n            },\n            children: \"Reset Selections\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '30px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"yearSlider\",\n        children: [\"Year: \", selectedYear]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 65\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"yearSlider\",\n        type: \"range\",\n        min: yearRange.min,\n        max: yearRange.max,\n        value: selectedYear,\n        onChange: e => setSelectedYear(parseInt(e.target.value)),\n        style: {\n          width: '400px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleAnimation,\n        children: isPlaying ? 'Pause ‚è∏Ô∏è' : 'Play ‚ñ∂Ô∏è'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }, this), showCountrySelector && /*#__PURE__*/_jsxDEV(CountrySelector, {\n      data: data,\n      selectedCountries: selectedCountries,\n      toggleCountry: toggleCountry,\n      close: () => setShowCountrySelector(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"8KlbN/gaIuYQA45nU0zaLXd4xBs=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","axios","ScatterPlot","CountrySelector","d3","jsxDEV","_jsxDEV","regionList","regionColorMap","forEach","region","i","schemeTableau10","Home","_s","data","setData","selectedYear","setSelectedYear","yearRange","setYearRange","min","max","activeRegions","setActiveRegions","selectedCountries","setSelectedCountries","isPlaying","setIsPlaying","intervalId","setIntervalId","showCountrySelector","setShowCountrySelector","zoomMode","setZoomMode","startAnimation","id","setInterval","prev","nextYear","clearInterval","stopAnimation","toggleAnimation","get","then","response","catch","error","console","toggleRegion","includes","filter","r","toggleCountry","country","exists","find","c","entity","style","padding","position","children","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","onClick","backgroundColor","color","border","borderRadius","cursor","maxWidth","margin","display","flex","marginLeft","width","map","alignItems","type","checked","onChange","appearance","WebkitAppearance","height","marginRight","marginTop","flexDirection","gap","htmlFor","value","e","parseInt","target","close","_c","$RefreshReg$"],"sources":["C:/Users/dhruv/OneDrive/Desktop/CS 837 Information Vis/gdp-pollution-app/frontend/src/components/Home.js"],"sourcesContent":["\r\n// // Home.js\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import ScatterPlot from './ScatterPlot';\r\n// import CountrySelector from './CountrySelector';\r\n// import * as d3 from 'd3';\r\n\r\n// const regionList = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'];\r\n\r\n// const regionColorMap = {};\r\n// regionList.forEach((region, i) => {\r\n//   regionColorMap[region] = d3.schemeTableau10[i];\r\n// });\r\n\r\n// const Home = () => {\r\n//   const [data, setData] = useState([]);\r\n//   const [selectedYear, setSelectedYear] = useState(2022);\r\n//   const [yearRange, setYearRange] = useState({ min: 1950, max: 2022 });\r\n//   const [activeRegions, setActiveRegions] = useState([]);\r\n//   const [selectedCountries, setSelectedCountries] = useState([]);\r\n//   const [isPlaying, setIsPlaying] = useState(false);\r\n//   const [intervalId, setIntervalId] = useState(null);\r\n//   const [showCountrySelector, setShowCountrySelector] = useState(false);\r\n\r\n//   const startAnimation = () => {\r\n//     if (!isPlaying) {\r\n//       const id = setInterval(() => {\r\n//         setSelectedYear(prev => {\r\n//           const nextYear = prev + 1;\r\n//           return nextYear > yearRange.max ? yearRange.min : nextYear;\r\n//         });\r\n//       }, 100);\r\n//       setIntervalId(id);\r\n//       setIsPlaying(true);\r\n//     }\r\n//   };\r\n\r\n//   const stopAnimation = () => {\r\n//     clearInterval(intervalId);\r\n//     setIsPlaying(false);\r\n//   };\r\n\r\n//   const toggleAnimation = () => {\r\n//     isPlaying ? stopAnimation() : startAnimation();\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     axios.get('http://localhost:5000/api/data')\r\n//       .then(response => {\r\n//         setData(response.data);\r\n//         setYearRange({ min: 1800, max: 2022 });\r\n//       })\r\n//       .catch(error => console.error('Error fetching data:', error));\r\n\r\n//     return () => clearInterval(intervalId);\r\n//   }, []);\r\n\r\n//   const toggleRegion = (region) => {\r\n//     setActiveRegions(prev =>\r\n//       prev.includes(region)\r\n//         ? prev.filter(r => r !== region)\r\n//         : [...prev, region]\r\n//     );\r\n//   };\r\n\r\n//   const toggleCountry = (country) => {\r\n//     const exists = selectedCountries.find(c => c.entity === country.entity);\r\n//     if (exists) {\r\n//       setSelectedCountries(prev => prev.filter(c => c.entity !== country.entity));\r\n//     } else {\r\n//       setSelectedCountries(prev => [...prev, country]);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ padding: '20px', position: 'relative' }}>\r\n//       <h1>GDP vs Pollution Visualization</h1>\r\n\r\n//       <div style={{ maxWidth: '1100px', margin: '0 auto', display: 'flex' }}>\r\n//         {/* Chart */}\r\n//         <div style={{ flex: 1 }}>\r\n//           <ScatterPlot\r\n//             data={data}\r\n//             selectedYear={selectedYear}\r\n//             regionColorMap={regionColorMap}\r\n//             activeRegions={activeRegions}\r\n//             selectedCountries={selectedCountries}\r\n//             setSelectedCountries={setSelectedCountries}\r\n//           />\r\n//         </div>\r\n\r\n//         {/* Region Legend */}\r\n//         <div style={{ marginLeft: '30px', width: '180px' }}>\r\n//           <h4 style={{ marginBottom: '12px' }}>Regions</h4>\r\n//           <form>\r\n//             {regionList.map(region => (\r\n//               <label key={region} style={{ display: 'flex', alignItems: 'center', marginBottom: '10px', cursor: 'pointer' }}>\r\n//                 <input\r\n//                   type=\"checkbox\"\r\n//                   checked={activeRegions.includes(region)}\r\n//                   onChange={() => toggleRegion(region)}\r\n//                   style={{\r\n//                     appearance: 'none',\r\n//                     WebkitAppearance: 'none',\r\n//                     width: '18px',\r\n//                     height: '18px',\r\n//                     borderRadius: '4px',\r\n//                     backgroundColor: activeRegions.includes(region)\r\n//                       ? regionColorMap[region]\r\n//                       : '#fff',\r\n//                     border: `2px solid ${regionColorMap[region]}`,\r\n//                     marginRight: '8px',\r\n//                     cursor: 'pointer'\r\n//                   }}\r\n//                 />\r\n//                 <span>{region}</span>\r\n//               </label>\r\n//             ))}\r\n//           </form>\r\n\r\n//           {/* Button to open country selector */}\r\n//          {/* Country selector + reset buttons */}\r\n// <div style={{ marginTop: '20px', display: 'flex', flexDirection: 'column', gap: '10px' }}>\r\n//   <button onClick={() => setShowCountrySelector(true)}>\r\n//     + Select Countries\r\n//   </button>\r\n\r\n//   <button\r\n//     onClick={() => {\r\n//       setSelectedCountries([]);\r\n//       setActiveRegions([]);\r\n//     }}\r\n//     style={{\r\n//       backgroundColor: '#f44336',\r\n//       color: 'white',\r\n//       border: 'none',\r\n//       padding: '8px',\r\n//       borderRadius: '4px',\r\n//       cursor: 'pointer'\r\n//     }}\r\n//   >\r\n//     Reset Selections\r\n//   </button>\r\n// </div>\r\n\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Year Slider */}\r\n//       <div style={{ marginBottom: '30px' }}>\r\n//         <label htmlFor=\"yearSlider\">Year: {selectedYear}</label><br />\r\n//         <input\r\n//           id=\"yearSlider\"\r\n//           type=\"range\"\r\n//           min={yearRange.min}\r\n//           max={yearRange.max}\r\n//           value={selectedYear}\r\n//           onChange={(e) => setSelectedYear(parseInt(e.target.value))}\r\n//           style={{ width: '400px' }}\r\n//         />\r\n//       </div>\r\n\r\n//       {/* Play/Pause */}\r\n//       <div style={{ marginBottom: '20px' }}>\r\n//         <button onClick={toggleAnimation}>\r\n//           {isPlaying ? 'Pause ‚è∏Ô∏è' : 'Play ‚ñ∂Ô∏è'}\r\n//         </button>\r\n//       </div>\r\n\r\n//       {/* Country selector panel */}\r\n//       {showCountrySelector && (\r\n//         <CountrySelector\r\n//           data={data}\r\n//           selectedCountries={selectedCountries}\r\n//           toggleCountry={toggleCountry}\r\n//           close={() => setShowCountrySelector(false)}\r\n//         />\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Home;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport ScatterPlot from './ScatterPlot';\r\nimport CountrySelector from './CountrySelector';\r\nimport * as d3 from 'd3';\r\n\r\nconst regionList = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'];\r\n\r\nconst regionColorMap = {};\r\nregionList.forEach((region, i) => {\r\n  regionColorMap[region] = d3.schemeTableau10[i];\r\n});\r\n\r\nconst Home = () => {\r\n  const [data, setData] = useState([]);\r\n  const [selectedYear, setSelectedYear] = useState(2022);\r\n  const [yearRange, setYearRange] = useState({ min: 1950, max: 2022 });\r\n  const [activeRegions, setActiveRegions] = useState([]);\r\n  const [selectedCountries, setSelectedCountries] = useState([]);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [intervalId, setIntervalId] = useState(null);\r\n  const [showCountrySelector, setShowCountrySelector] = useState(false);\r\n  const [zoomMode, setZoomMode] = useState(false); // NEW!\r\n\r\n  const startAnimation = () => {\r\n    if (!isPlaying) {\r\n      const id = setInterval(() => {\r\n        setSelectedYear(prev => {\r\n          const nextYear = prev + 1;\r\n          if (nextYear > yearRange.max) {\r\n            clearInterval(id);          // Stop the animation\r\n            setIsPlaying(false);        // Update play state\r\n            return yearRange.max;       // Stay on 2022\r\n          }\r\n          return nextYear;\r\n        });\r\n      }, 100);\r\n      // const id = setInterval(() => {\r\n      //   setSelectedYear(prev => {\r\n      //     const nextYear = prev + 1;\r\n      //     return nextYear > yearRange.max ? yearRange.min : nextYear;\r\n      //   });\r\n      // }, 100);\r\n      setIntervalId(id);\r\n      setIsPlaying(true);\r\n    }\r\n  };\r\n\r\n  const stopAnimation = () => {\r\n    clearInterval(intervalId);\r\n    setIsPlaying(false);\r\n  };\r\n\r\n  const toggleAnimation = () => {\r\n    isPlaying ? stopAnimation() : startAnimation();\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios.get('http://localhost:5000/api/data')\r\n      .then(response => {\r\n        setData(response.data);\r\n        setYearRange({ min: 1800, max: 2022 });\r\n      })\r\n      .catch(error => console.error('Error fetching data:', error));\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  const toggleRegion = (region) => {\r\n    setActiveRegions(prev =>\r\n      prev.includes(region)\r\n        ? prev.filter(r => r !== region)\r\n        : [...prev, region]\r\n    );\r\n  };\r\n\r\n  const toggleCountry = (country) => {\r\n    const exists = selectedCountries.find(c => c.entity === country.entity);\r\n    if (exists) {\r\n      setSelectedCountries(prev => prev.filter(c => c.entity !== country.entity));\r\n    } else {\r\n      setSelectedCountries(prev => [...prev, country]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: '20px', position: 'relative' }}>\r\n      <h1>GDP vs Pollution Visualization</h1>\r\n\r\n      {/* Zoom Mode Toggle */}\r\n      <div style={{ marginBottom: '12px' }}>\r\n        <button\r\n          onClick={() => setZoomMode(!zoomMode)}\r\n          style={{\r\n            padding: '8px 12px',\r\n            backgroundColor: zoomMode ? '#007bff' : '#ccc',\r\n            color: '#fff',\r\n            border: 'none',\r\n            borderRadius: '4px',\r\n            cursor: 'pointer'\r\n          }}\r\n        >\r\n          {zoomMode ? 'üß≠ Zoom Mode: ON' : 'üîç Enable Zoom Mode'}\r\n        </button>\r\n      </div>\r\n\r\n      <div style={{ maxWidth: '1100px', margin: '0 auto', display: 'flex' }}>\r\n        {/* Chart */}\r\n        <div style={{ flex: 1 }}>\r\n          <ScatterPlot\r\n            data={data}\r\n            selectedYear={selectedYear}\r\n            regionColorMap={regionColorMap}\r\n            activeRegions={activeRegions}\r\n            selectedCountries={selectedCountries}\r\n            setSelectedCountries={setSelectedCountries}\r\n            zoomMode={zoomMode} // NEW!\r\n          />\r\n        </div>\r\n\r\n        {/* Region Legend */}\r\n        <div style={{ marginLeft: '30px', width: '180px' }}>\r\n          <h4 style={{ marginBottom: '12px' }}>Regions</h4>\r\n          <form>\r\n            {regionList.map(region => (\r\n              <label key={region} style={{ display: 'flex', alignItems: 'center', marginBottom: '10px', cursor: 'pointer' }}>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={activeRegions.includes(region)}\r\n                  onChange={() => toggleRegion(region)}\r\n                  style={{\r\n                    appearance: 'none',\r\n                    WebkitAppearance: 'none',\r\n                    width: '18px',\r\n                    height: '18px',\r\n                    borderRadius: '4px',\r\n                    backgroundColor: activeRegions.includes(region)\r\n                      ? regionColorMap[region]\r\n                      : '#fff',\r\n                    border: `2px solid ${regionColorMap[region]}`,\r\n                    marginRight: '8px',\r\n                    cursor: 'pointer'\r\n                  }}\r\n                />\r\n                <span>{region}</span>\r\n              </label>\r\n            ))}\r\n          </form>\r\n\r\n          {/* Country selector + reset buttons */}\r\n          <div style={{ marginTop: '20px', display: 'flex', flexDirection: 'column', gap: '10px' }}>\r\n            <button onClick={() => setShowCountrySelector(true)}>+ Select Countries</button>\r\n            <button\r\n              onClick={() => {\r\n                setSelectedCountries([]);\r\n                setActiveRegions([]);\r\n              }}\r\n              style={{\r\n                backgroundColor: '#f44336',\r\n                color: 'white',\r\n                border: 'none',\r\n                padding: '8px',\r\n                borderRadius: '4px',\r\n                cursor: 'pointer'\r\n              }}\r\n            >\r\n              Reset Selections\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Year Slider */}\r\n      <div style={{ marginBottom: '30px' }}>\r\n        <label htmlFor=\"yearSlider\">Year: {selectedYear}</label><br />\r\n        <input\r\n          id=\"yearSlider\"\r\n          type=\"range\"\r\n          min={yearRange.min}\r\n          max={yearRange.max}\r\n          value={selectedYear}\r\n          onChange={(e) => setSelectedYear(parseInt(e.target.value))}\r\n          style={{ width: '400px' }}\r\n        />\r\n      </div>\r\n\r\n      {/* Play/Pause */}\r\n      <div style={{ marginBottom: '20px' }}>\r\n        <button onClick={toggleAnimation}>\r\n          {isPlaying ? 'Pause ‚è∏Ô∏è' : 'Play ‚ñ∂Ô∏è'}\r\n        </button>\r\n      </div>\r\n\r\n      {/* Country selector panel */}\r\n      {showCountrySelector && (\r\n        <CountrySelector\r\n          data={data}\r\n          selectedCountries={selectedCountries}\r\n          toggleCountry={toggleCountry}\r\n          close={() => setShowCountrySelector(false)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":";;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,UAAU,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,eAAe,EAAE,SAAS,EAAE,eAAe,CAAC;AAE5F,MAAMC,cAAc,GAAG,CAAC,CAAC;AACzBD,UAAU,CAACE,OAAO,CAAC,CAACC,MAAM,EAAEC,CAAC,KA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}