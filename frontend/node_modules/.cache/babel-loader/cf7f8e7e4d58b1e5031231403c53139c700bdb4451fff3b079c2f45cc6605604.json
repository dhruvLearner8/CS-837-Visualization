{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dhruv\\\\OneDrive\\\\Desktop\\\\CS 837 Information Vis\\\\gdp-pollution-app\\\\frontend\\\\src\\\\components\\\\Home.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import ScatterPlot from './ScatterPlot';\n// import CountrySelector from './CountrySelector';\n// import * as d3 from 'd3';\n\n// const regionList = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'];\n\n// const regionColorMap = {};\n// regionList.forEach((region, i) => {\n//   regionColorMap[region] = d3.schemeTableau10[i];\n// });\n\n// const Home = () => {\n//   const [data, setData] = useState([]);\n//   const [selectedYear, setSelectedYear] = useState(2022);\n//   const [yearRange, setYearRange] = useState({ min: 1950, max: 2022 });\n//   const [activeRegions, setActiveRegions] = useState([]);\n//   const [selectedCountries, setSelectedCountries] = useState([]);\n//   const [isPlaying, setIsPlaying] = useState(false);\n//   const [intervalId, setIntervalId] = useState(null);\n//   const [showCountrySelector, setShowCountrySelector] = useState(false);\n//   const [zoomMode, setZoomMode] = useState(false); // NEW!\n\n//   const startAnimation = () => {\n//     if (!isPlaying) {\n//       const id = setInterval(() => {\n//         setSelectedYear(prev => {\n//           const nextYear = prev + 1;\n//           if (nextYear > yearRange.max) {\n//             clearInterval(id);          // Stop the animation\n//             setIsPlaying(false);        // Update play state\n//             return yearRange.max;       // Stay on 2022\n//           }\n//           return nextYear;\n//         });\n//       }, 100);\n\n//       setIntervalId(id);\n//       setIsPlaying(true);\n//     }\n//   };\n\n//   const stopAnimation = () => {\n//     clearInterval(intervalId);\n//     setIsPlaying(false);\n//   };\n\n//   const toggleAnimation = () => {\n//     isPlaying ? stopAnimation() : startAnimation();\n//   };\n\n//   useEffect(() => {\n//     axios.get('http://localhost:5000/api/data')\n//       .then(response => {\n//         setData(response.data);\n//         setYearRange({ min: 1800, max: 2022 });\n//       })\n//       .catch(error => console.error('Error fetching data:', error));\n\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   const toggleRegion = (region) => {\n//     setActiveRegions(prev =>\n//       prev.includes(region)\n//         ? prev.filter(r => r !== region)\n//         : [...prev, region]\n//     );\n//   };\n\n//   const toggleCountry = (country) => {\n//     const exists = selectedCountries.find(c => c.entity === country.entity);\n//     if (exists) {\n//       setSelectedCountries(prev => prev.filter(c => c.entity !== country.entity));\n//     } else {\n//       setSelectedCountries(prev => [...prev, country]);\n//     }\n//   };\n\n//   return (\n//     <div style={{ padding: '20px', position: 'relative' }}>\n//       <h1>GDP vs Pollution Visualization</h1>\n\n//       {/* Zoom Mode Toggle */}\n//       <div style={{ marginBottom: '12px' }}>\n//         <button\n//           onClick={() => setZoomMode(!zoomMode)}\n//           style={{\n//             padding: '8px 12px',\n//             backgroundColor: zoomMode ? '#007bff' : '#ccc',\n//             color: '#fff',\n//             border: 'none',\n//             borderRadius: '4px',\n//             cursor: 'pointer'\n//           }}\n//         >\n//           {zoomMode ? 'üß≠ Zoom Mode: ON' : 'üîç Enable Zoom Mode'}\n//         </button>\n//       </div>\n\n//       <div style={{ maxWidth: '1100px', margin: '0 auto', display: 'flex' }}>\n//         {/* Chart */}\n//         <div style={{ flex: 1 }}>\n//           <ScatterPlot\n//             data={data}\n//             selectedYear={selectedYear}\n//             regionColorMap={regionColorMap}\n//             activeRegions={activeRegions}\n//             selectedCountries={selectedCountries}\n//             setSelectedCountries={setSelectedCountries}\n//             zoomMode={zoomMode} // NEW!\n//           />\n//               <div style={{\n//   display: 'flex',\n//   alignItems: 'center',\n//   justifyContent: 'center',\n//   width: '800px',\n//   margin: '30px auto 20px auto',\n//   gap: '10px'\n// }}>\n//   <button\n//     onClick={toggleAnimation}\n//     style={{\n//       width: '40px',\n//       padding: '8px',\n//       fontSize: '14px',\n//      // backgroundColor: '#000',       // grey\n//       color: 'grey',\n//       border: '1px solid #999',\n//       borderRadius: '4px',\n//       cursor: 'pointer'\n//     }}\n//   >\n//     {isPlaying ? '‚ùö‚ùö' : '‚ñ∂'}\n//   </button>\n\n//   <input\n//   type=\"range\"\n//   min={yearRange.min}\n//   max={yearRange.max}\n//   value={selectedYear}\n//   onChange={(e) => setSelectedYear(parseInt(e.target.value))}\n//   style={{\n//     flex: 1,\n//     height: '6px',\n//     background: '#ccc',                 // Entire track color\n//     borderRadius: '3px',\n//     appearance: 'none',\n//     WebkitAppearance: 'none',\n//     outline: 'none',\n//     cursor: 'pointer',\n//     color: '#ccc',\n//     accentColor: 'grey'\n//   }}\n// />\n// </div>\n//         </div>\n\n//         {/* Region Legend */}\n//         <div style={{ marginLeft: '30px', width: '180px' }}>\n//           <h4 style={{ marginBottom: '12px' }}>Regions</h4>\n//           <form>\n//             {regionList.map(region => (\n//               <label key={region} style={{ display: 'flex', alignItems: 'center', marginBottom: '10px', cursor: 'pointer' }}>\n//                 <input\n//                   type=\"checkbox\"\n//                   checked={activeRegions.includes(region)}\n//                   onChange={() => toggleRegion(region)}\n//                   style={{\n//                     appearance: 'none',\n//                     WebkitAppearance: 'none',\n//                     width: '18px',\n//                     height: '18px',\n//                     borderRadius: '4px',\n//                     backgroundColor: activeRegions.includes(region)\n//                       ? regionColorMap[region]\n//                       : '#fff',\n//                     border: `2px solid ${regionColorMap[region]}`,\n//                     marginRight: '8px',\n//                     cursor: 'pointer'\n//                   }}\n//                 />\n//                 <span>{region}</span>\n//               </label>\n//             ))}\n//           </form>\n\n//           {/* Country selector + reset buttons */}\n//           <div style={{ marginTop: '20px', display: 'flex', flexDirection: 'column', gap: '10px' }}>\n//             <button onClick={() => setShowCountrySelector(true)}>+ Select Countries</button>\n//             <button\n//               onClick={() => {\n//                 setSelectedCountries([]);\n//                 setActiveRegions([]);\n//               }}\n//               style={{\n//                 backgroundColor: '#f44336',\n//                 color: 'white',\n//                 border: 'none',\n//                 padding: '8px',\n//                 borderRadius: '4px',\n//                 cursor: 'pointer'\n//               }}\n//             >\n//               Reset Selections\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n\n//       {/* Year Slider */}\n\n// <div style={{ textAlign: 'center', fontSize: '16px', marginBottom: '10px', color: '#444' }}>\n//   Year: {selectedYear}\n// </div>\n\n//       {/* Country selector panel */}\n//       {showCountrySelector && (\n//         <CountrySelector\n//           data={data}\n//           selectedCountries={selectedCountries}\n//           toggleCountry={toggleCountry}\n//           close={() => setShowCountrySelector(false)}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Home;\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport ScatterPlot from './ScatterPlot';\nimport CountrySelector from './CountrySelector';\nimport MiniTrendChart from './MiniTrendChart'; // ‚¨ÖÔ∏è New component (you'll create this)\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst regionList = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'];\nconst regionColorMap = {};\nregionList.forEach((region, i) => {\n  regionColorMap[region] = d3.schemeTableau10[i];\n});\nconst Home = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [selectedYear, setSelectedYear] = useState(2022);\n  const [yearRange, setYearRange] = useState({\n    min: 1950,\n    max: 2022\n  });\n  const [activeRegions, setActiveRegions] = useState([]);\n  const [selectedCountries, setSelectedCountries] = useState([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [intervalId, setIntervalId] = useState(null);\n  const [showCountrySelector, setShowCountrySelector] = useState(false);\n  const [zoomMode, setZoomMode] = useState(false);\n\n  // ‚¨áÔ∏è NEW STATE\n  const [hoveredCountry, setHoveredCountry] = useState(null);\n  const [hoverTrendData, setHoverTrendData] = useState([]);\n\n  // ‚¨áÔ∏è Build country trend map on data load\n  const countryTrendMap = useMemo(() => {\n    const map = {};\n    data.forEach(d => {\n      if (!map[d.entity]) map[d.entity] = [];\n      map[d.entity].push({\n        year: d.year,\n        co2: d.co2_emissions_per_capita\n      });\n    });\n    return map;\n  }, [data]);\n  const startAnimation = () => {\n    if (!isPlaying) {\n      const id = setInterval(() => {\n        setSelectedYear(prev => {\n          const nextYear = prev + 1;\n          if (nextYear > yearRange.max) {\n            clearInterval(id);\n            setIsPlaying(false);\n            return yearRange.max;\n          }\n          return nextYear;\n        });\n      }, 100);\n      setIntervalId(id);\n      setIsPlaying(true);\n    }\n  };\n  const stopAnimation = () => {\n    clearInterval(intervalId);\n    setIsPlaying(false);\n  };\n  const toggleAnimation = () => {\n    isPlaying ? stopAnimation() : startAnimation();\n  };\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/data').then(response => {\n      setData(response.data);\n      setYearRange({\n        min: 1800,\n        max: 2022\n      });\n    }).catch(error => console.error('Error fetching data:', error));\n    return () => clearInterval(intervalId);\n  }, []);\n  const toggleRegion = region => {\n    setActiveRegions(prev => prev.includes(region) ? prev.filter(r => r !== region) : [...prev, region]);\n  };\n  const toggleCountry = country => {\n    const exists = selectedCountries.find(c => c.entity === country.entity);\n    if (exists) {\n      setSelectedCountries(prev => prev.filter(c => c.entity !== country.entity));\n    } else {\n      setSelectedCountries(prev => [...prev, country]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"GDP vs Pollution Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '12px',\n        display: 'flex',\n        gap: '10px',\n        alignItems: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setZoomMode(!zoomMode),\n        style: {\n          padding: '8px 12px',\n          backgroundColor: zoomMode ? '#007bff' : '#ccc',\n          color: '#fff',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: zoomMode ? 'üß≠ Zoom Mode: ON' : 'üîç Enable Zoom Mode'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: '1100px',\n        margin: '0 auto',\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(ScatterPlot, {\n          data: data,\n          selectedYear: selectedYear,\n          regionColorMap: regionColorMap,\n          activeRegions: activeRegions,\n          selectedCountries: selectedCountries,\n          setSelectedCountries: setSelectedCountries,\n          zoomMode: zoomMode,\n          setHoveredCountry: setHoveredCountry,\n          setHoverTrendData: entity => setHoverTrendData(countryTrendMap[entity] || [])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            width: '800px',\n            margin: '30px auto 20px auto',\n            gap: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleAnimation,\n            style: {\n              width: '40px',\n              padding: '8px',\n              fontSize: '14px',\n              color: 'grey',\n              border: '1px solid #999',\n              borderRadius: '4px',\n              cursor: 'pointer'\n            },\n            children: isPlaying ? '‚ùö‚ùö' : '‚ñ∂'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: yearRange.min,\n            max: yearRange.max,\n            value: selectedYear,\n            onChange: e => setSelectedYear(parseInt(e.target.value)),\n            style: {\n              flex: 1,\n              height: '6px',\n              background: '#ccc',\n              borderRadius: '3px',\n              appearance: 'none',\n              WebkitAppearance: 'none',\n              outline: 'none',\n              cursor: 'pointer',\n              accentColor: 'grey'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginLeft: '30px',\n          width: '180px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            marginBottom: '12px'\n          },\n          children: \"Regions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          children: regionList.map(region => /*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              marginBottom: '10px',\n              cursor: 'pointer'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: activeRegions.includes(region),\n              onChange: () => toggleRegion(region),\n              style: {\n                appearance: 'none',\n                WebkitAppearance: 'none',\n                width: '18px',\n                height: '18px',\n                borderRadius: '4px',\n                backgroundColor: activeRegions.includes(region) ? regionColorMap[region] : '#fff',\n                border: `2px solid ${regionColorMap[region]}`,\n                marginRight: '8px',\n                cursor: 'pointer'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: region\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 17\n            }, this)]\n          }, region, true, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '20px',\n            display: 'flex',\n            flexDirection: 'column',\n            gap: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowCountrySelector(true),\n            children: \"+ Select Countries\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setSelectedCountries([]);\n              setActiveRegions([]);\n            },\n            style: {\n              backgroundColor: '#f44336',\n              color: 'white',\n              border: 'none',\n              padding: '8px',\n              borderRadius: '4px',\n              cursor: 'pointer'\n            },\n            children: \"Reset Selections\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 11\n        }, this), hoveredCountry && hoverTrendData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '30px'\n          },\n          children: /*#__PURE__*/_jsxDEV(MiniTrendChart, {\n            country: hoveredCountry.entity,\n            data: hoverTrendData,\n            color: regionColorMap[hoveredCountry.region] || '#000'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        fontSize: '16px',\n        marginBottom: '10px',\n        color: '#444'\n      },\n      children: [\"Year: \", selectedYear]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 7\n    }, this), showCountrySelector && /*#__PURE__*/_jsxDEV(CountrySelector, {\n      data: data,\n      selectedCountries: selectedCountries,\n      toggleCountry: toggleCountry,\n      close: () => setShowCountrySelector(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 333,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"l4DJbK+vRlZ2Rq0yIeKW2cOus2U=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","axios","ScatterPlot","CountrySelector","MiniTrendChart","d3","jsxDEV","_jsxDEV","regionList","regionColorMap","forEach","region","i","schemeTableau10","Home","_s","data","setData","selectedYear","setSelectedYear","yearRange","setYearRange","min","max","activeRegions","setActiveRegions","selectedCountries","setSelectedCountries","isPlaying","setIsPlaying","intervalId","setIntervalId","showCountrySelector","setShowCountrySelector","zoomMode","setZoomMode","hoveredCountry","setHoveredCountry","hoverTrendData","setHoverTrendData","countryTrendMap","map","d","entity","push","year","co2","co2_emissions_per_capita","startAnimation","id","setInterval","prev","nextYear","clearInterval","stopAnimation","toggleAnimation","get","then","response","catch","error","console","toggleRegion","includes","filter","r","toggleCountry","country","exists","find","c","style","padding","position","children","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","display","gap","alignItems","onClick","backgroundColor","color","border","borderRadius","cursor","maxWidth","margin","flex","justifyContent","width","fontSize","type","value","onChange","e","parseInt","target","height","background","appearance","WebkitAppearance","outline","accentColor","marginLeft","checked","marginRight","marginTop","flexDirection","length","textAlign","close","_c","$RefreshReg$"],"sources":["C:/Users/dhruv/OneDrive/Desktop/CS 837 Information Vis/gdp-pollution-app/frontend/src/components/Home.js"],"sourcesContent":["\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import ScatterPlot from './ScatterPlot';\r\n// import CountrySelector from './CountrySelector';\r\n// import * as d3 from 'd3';\r\n\r\n// const regionList = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'];\r\n\r\n// const regionColorMap = {};\r\n// regionList.forEach((region, i) => {\r\n//   regionColorMap[region] = d3.schemeTableau10[i];\r\n// });\r\n\r\n// const Home = () => {\r\n//   const [data, setData] = useState([]);\r\n//   const [selectedYear, setSelectedYear] = useState(2022);\r\n//   const [yearRange, setYearRange] = useState({ min: 1950, max: 2022 });\r\n//   const [activeRegions, setActiveRegions] = useState([]);\r\n//   const [selectedCountries, setSelectedCountries] = useState([]);\r\n//   const [isPlaying, setIsPlaying] = useState(false);\r\n//   const [intervalId, setIntervalId] = useState(null);\r\n//   const [showCountrySelector, setShowCountrySelector] = useState(false);\r\n//   const [zoomMode, setZoomMode] = useState(false); // NEW!\r\n\r\n//   const startAnimation = () => {\r\n//     if (!isPlaying) {\r\n//       const id = setInterval(() => {\r\n//         setSelectedYear(prev => {\r\n//           const nextYear = prev + 1;\r\n//           if (nextYear > yearRange.max) {\r\n//             clearInterval(id);          // Stop the animation\r\n//             setIsPlaying(false);        // Update play state\r\n//             return yearRange.max;       // Stay on 2022\r\n//           }\r\n//           return nextYear;\r\n//         });\r\n//       }, 100);\r\n    \r\n//       setIntervalId(id);\r\n//       setIsPlaying(true);\r\n//     }\r\n//   };\r\n\r\n//   const stopAnimation = () => {\r\n//     clearInterval(intervalId);\r\n//     setIsPlaying(false);\r\n//   };\r\n\r\n//   const toggleAnimation = () => {\r\n//     isPlaying ? stopAnimation() : startAnimation();\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     axios.get('http://localhost:5000/api/data')\r\n//       .then(response => {\r\n//         setData(response.data);\r\n//         setYearRange({ min: 1800, max: 2022 });\r\n//       })\r\n//       .catch(error => console.error('Error fetching data:', error));\r\n\r\n//     return () => clearInterval(intervalId);\r\n//   }, []);\r\n\r\n//   const toggleRegion = (region) => {\r\n//     setActiveRegions(prev =>\r\n//       prev.includes(region)\r\n//         ? prev.filter(r => r !== region)\r\n//         : [...prev, region]\r\n//     );\r\n//   };\r\n\r\n//   const toggleCountry = (country) => {\r\n//     const exists = selectedCountries.find(c => c.entity === country.entity);\r\n//     if (exists) {\r\n//       setSelectedCountries(prev => prev.filter(c => c.entity !== country.entity));\r\n//     } else {\r\n//       setSelectedCountries(prev => [...prev, country]);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ padding: '20px', position: 'relative' }}>\r\n//       <h1>GDP vs Pollution Visualization</h1>\r\n\r\n//       {/* Zoom Mode Toggle */}\r\n//       <div style={{ marginBottom: '12px' }}>\r\n//         <button\r\n//           onClick={() => setZoomMode(!zoomMode)}\r\n//           style={{\r\n//             padding: '8px 12px',\r\n//             backgroundColor: zoomMode ? '#007bff' : '#ccc',\r\n//             color: '#fff',\r\n//             border: 'none',\r\n//             borderRadius: '4px',\r\n//             cursor: 'pointer'\r\n//           }}\r\n//         >\r\n//           {zoomMode ? 'üß≠ Zoom Mode: ON' : 'üîç Enable Zoom Mode'}\r\n//         </button>\r\n//       </div>\r\n\r\n//       <div style={{ maxWidth: '1100px', margin: '0 auto', display: 'flex' }}>\r\n//         {/* Chart */}\r\n//         <div style={{ flex: 1 }}>\r\n//           <ScatterPlot\r\n//             data={data}\r\n//             selectedYear={selectedYear}\r\n//             regionColorMap={regionColorMap}\r\n//             activeRegions={activeRegions}\r\n//             selectedCountries={selectedCountries}\r\n//             setSelectedCountries={setSelectedCountries}\r\n//             zoomMode={zoomMode} // NEW!\r\n//           />\r\n//               <div style={{\r\n//   display: 'flex',\r\n//   alignItems: 'center',\r\n//   justifyContent: 'center',\r\n//   width: '800px',\r\n//   margin: '30px auto 20px auto',\r\n//   gap: '10px'\r\n// }}>\r\n//   <button\r\n//     onClick={toggleAnimation}\r\n//     style={{\r\n//       width: '40px',\r\n//       padding: '8px',\r\n//       fontSize: '14px',\r\n//      // backgroundColor: '#000',       // grey\r\n//       color: 'grey',\r\n//       border: '1px solid #999',\r\n//       borderRadius: '4px',\r\n//       cursor: 'pointer'\r\n//     }}\r\n//   >\r\n//     {isPlaying ? '‚ùö‚ùö' : '‚ñ∂'}\r\n//   </button>\r\n\r\n//   <input\r\n//   type=\"range\"\r\n//   min={yearRange.min}\r\n//   max={yearRange.max}\r\n//   value={selectedYear}\r\n//   onChange={(e) => setSelectedYear(parseInt(e.target.value))}\r\n//   style={{\r\n//     flex: 1,\r\n//     height: '6px',\r\n//     background: '#ccc',                 // Entire track color\r\n//     borderRadius: '3px',\r\n//     appearance: 'none',\r\n//     WebkitAppearance: 'none',\r\n//     outline: 'none',\r\n//     cursor: 'pointer',\r\n//     color: '#ccc',\r\n//     accentColor: 'grey'\r\n//   }}\r\n// />\r\n// </div>\r\n//         </div>\r\n\r\n//         {/* Region Legend */}\r\n//         <div style={{ marginLeft: '30px', width: '180px' }}>\r\n//           <h4 style={{ marginBottom: '12px' }}>Regions</h4>\r\n//           <form>\r\n//             {regionList.map(region => (\r\n//               <label key={region} style={{ display: 'flex', alignItems: 'center', marginBottom: '10px', cursor: 'pointer' }}>\r\n//                 <input\r\n//                   type=\"checkbox\"\r\n//                   checked={activeRegions.includes(region)}\r\n//                   onChange={() => toggleRegion(region)}\r\n//                   style={{\r\n//                     appearance: 'none',\r\n//                     WebkitAppearance: 'none',\r\n//                     width: '18px',\r\n//                     height: '18px',\r\n//                     borderRadius: '4px',\r\n//                     backgroundColor: activeRegions.includes(region)\r\n//                       ? regionColorMap[region]\r\n//                       : '#fff',\r\n//                     border: `2px solid ${regionColorMap[region]}`,\r\n//                     marginRight: '8px',\r\n//                     cursor: 'pointer'\r\n//                   }}\r\n//                 />\r\n//                 <span>{region}</span>\r\n//               </label>\r\n//             ))}\r\n//           </form>\r\n\r\n//           {/* Country selector + reset buttons */}\r\n//           <div style={{ marginTop: '20px', display: 'flex', flexDirection: 'column', gap: '10px' }}>\r\n//             <button onClick={() => setShowCountrySelector(true)}>+ Select Countries</button>\r\n//             <button\r\n//               onClick={() => {\r\n//                 setSelectedCountries([]);\r\n//                 setActiveRegions([]);\r\n//               }}\r\n//               style={{\r\n//                 backgroundColor: '#f44336',\r\n//                 color: 'white',\r\n//                 border: 'none',\r\n//                 padding: '8px',\r\n//                 borderRadius: '4px',\r\n//                 cursor: 'pointer'\r\n//               }}\r\n//             >\r\n//               Reset Selections\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Year Slider */}\r\n  \r\n\r\n// <div style={{ textAlign: 'center', fontSize: '16px', marginBottom: '10px', color: '#444' }}>\r\n//   Year: {selectedYear}\r\n// </div>\r\n\r\n\r\n//       {/* Country selector panel */}\r\n//       {showCountrySelector && (\r\n//         <CountrySelector\r\n//           data={data}\r\n//           selectedCountries={selectedCountries}\r\n//           toggleCountry={toggleCountry}\r\n//           close={() => setShowCountrySelector(false)}\r\n//         />\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Home;\r\n\r\n\r\nimport React, { useState, useEffect, useMemo } from 'react';\r\nimport axios from 'axios';\r\nimport ScatterPlot from './ScatterPlot';\r\nimport CountrySelector from './CountrySelector';\r\nimport MiniTrendChart from './MiniTrendChart'; // ‚¨ÖÔ∏è New component (you'll create this)\r\nimport * as d3 from 'd3';\r\n\r\nconst regionList = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'];\r\n\r\nconst regionColorMap = {};\r\nregionList.forEach((region, i) => {\r\n  regionColorMap[region] = d3.schemeTableau10[i];\r\n});\r\n\r\nconst Home = () => {\r\n  const [data, setData] = useState([]);\r\n  const [selectedYear, setSelectedYear] = useState(2022);\r\n  const [yearRange, setYearRange] = useState({ min: 1950, max: 2022 });\r\n  const [activeRegions, setActiveRegions] = useState([]);\r\n  const [selectedCountries, setSelectedCountries] = useState([]);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [intervalId, setIntervalId] = useState(null);\r\n  const [showCountrySelector, setShowCountrySelector] = useState(false);\r\n  const [zoomMode, setZoomMode] = useState(false);\r\n\r\n  // ‚¨áÔ∏è NEW STATE\r\n  const [hoveredCountry, setHoveredCountry] = useState(null);\r\n  const [hoverTrendData, setHoverTrendData] = useState([]);\r\n\r\n  // ‚¨áÔ∏è Build country trend map on data load\r\n  const countryTrendMap = useMemo(() => {\r\n    const map = {};\r\n    data.forEach(d => {\r\n      if (!map[d.entity]) map[d.entity] = [];\r\n      map[d.entity].push({ year: d.year, co2: d.co2_emissions_per_capita });\r\n    });\r\n    return map;\r\n  }, [data]);\r\n\r\n  const startAnimation = () => {\r\n    if (!isPlaying) {\r\n      const id = setInterval(() => {\r\n        setSelectedYear(prev => {\r\n          const nextYear = prev + 1;\r\n          if (nextYear > yearRange.max) {\r\n            clearInterval(id);\r\n            setIsPlaying(false);\r\n            return yearRange.max;\r\n          }\r\n          return nextYear;\r\n        });\r\n      }, 100);\r\n      setIntervalId(id);\r\n      setIsPlaying(true);\r\n    }\r\n  };\r\n\r\n  const stopAnimation = () => {\r\n    clearInterval(intervalId);\r\n    setIsPlaying(false);\r\n  };\r\n\r\n  const toggleAnimation = () => {\r\n    isPlaying ? stopAnimation() : startAnimation();\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios.get('http://localhost:5000/api/data')\r\n      .then(response => {\r\n        setData(response.data);\r\n        setYearRange({ min: 1800, max: 2022 });\r\n      })\r\n      .catch(error => console.error('Error fetching data:', error));\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  const toggleRegion = (region) => {\r\n    setActiveRegions(prev =>\r\n      prev.includes(region)\r\n        ? prev.filter(r => r !== region)\r\n        : [...prev, region]\r\n    );\r\n  };\r\n\r\n  const toggleCountry = (country) => {\r\n    const exists = selectedCountries.find(c => c.entity === country.entity);\r\n    if (exists) {\r\n      setSelectedCountries(prev => prev.filter(c => c.entity !== country.entity));\r\n    } else {\r\n      setSelectedCountries(prev => [...prev, country]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: '20px', position: 'relative' }}>\r\n      <h1>GDP vs Pollution Visualization</h1>\r\n\r\n      {/* Zoom Toggle */}\r\n      <div style={{ marginBottom: '12px', display: 'flex', gap: '10px', alignItems: 'center' }}>\r\n        <button\r\n          onClick={() => setZoomMode(!zoomMode)}\r\n          style={{\r\n            padding: '8px 12px',\r\n            backgroundColor: zoomMode ? '#007bff' : '#ccc',\r\n            color: '#fff',\r\n            border: 'none',\r\n            borderRadius: '4px',\r\n            cursor: 'pointer'\r\n          }}\r\n        >\r\n          {zoomMode ? 'üß≠ Zoom Mode: ON' : 'üîç Enable Zoom Mode'}\r\n        </button>\r\n      </div>\r\n\r\n      <div style={{ maxWidth: '1100px', margin: '0 auto', display: 'flex' }}>\r\n        {/* Chart */}\r\n        <div style={{ flex: 1 }}>\r\n          <ScatterPlot\r\n            data={data}\r\n            selectedYear={selectedYear}\r\n            regionColorMap={regionColorMap}\r\n            activeRegions={activeRegions}\r\n            selectedCountries={selectedCountries}\r\n            setSelectedCountries={setSelectedCountries}\r\n            zoomMode={zoomMode}\r\n            setHoveredCountry={setHoveredCountry}\r\n            setHoverTrendData={(entity) => setHoverTrendData(countryTrendMap[entity] || [])}\r\n          />\r\n          \r\n\r\n          {/* Timeline */}\r\n          <div style={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            width: '800px',\r\n            margin: '30px auto 20px auto',\r\n            gap: '10px'\r\n          }}>\r\n            <button\r\n              onClick={toggleAnimation}\r\n              style={{\r\n                width: '40px',\r\n                padding: '8px',\r\n                fontSize: '14px',\r\n                color: 'grey',\r\n                border: '1px solid #999',\r\n                borderRadius: '4px',\r\n                cursor: 'pointer'\r\n              }}\r\n            >\r\n              {isPlaying ? '‚ùö‚ùö' : '‚ñ∂'}\r\n            </button>\r\n\r\n            <input\r\n              type=\"range\"\r\n              min={yearRange.min}\r\n              max={yearRange.max}\r\n              value={selectedYear}\r\n              onChange={(e) => setSelectedYear(parseInt(e.target.value))}\r\n              style={{\r\n                flex: 1,\r\n                height: '6px',\r\n                background: '#ccc',\r\n                borderRadius: '3px',\r\n                appearance: 'none',\r\n                WebkitAppearance: 'none',\r\n                outline: 'none',\r\n                cursor: 'pointer',\r\n                accentColor: 'grey'\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Right Panel: Region Legend + Mini Chart */}\r\n        <div style={{ marginLeft: '30px', width: '180px' }}>\r\n          <h4 style={{ marginBottom: '12px' }}>Regions</h4>\r\n          <form>\r\n            {regionList.map(region => (\r\n              <label key={region} style={{ display: 'flex', alignItems: 'center', marginBottom: '10px', cursor: 'pointer' }}>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={activeRegions.includes(region)}\r\n                  onChange={() => toggleRegion(region)}\r\n                  style={{\r\n                    appearance: 'none',\r\n                    WebkitAppearance: 'none',\r\n                    width: '18px',\r\n                    height: '18px',\r\n                    borderRadius: '4px',\r\n                    backgroundColor: activeRegions.includes(region)\r\n                      ? regionColorMap[region]\r\n                      : '#fff',\r\n                    border: `2px solid ${regionColorMap[region]}`,\r\n                    marginRight: '8px',\r\n                    cursor: 'pointer'\r\n                  }}\r\n                />\r\n                <span>{region}</span>\r\n              </label>\r\n            ))}\r\n          </form>\r\n\r\n          {/* Country selector + reset */}\r\n          <div style={{ marginTop: '20px', display: 'flex', flexDirection: 'column', gap: '10px' }}>\r\n            <button onClick={() => setShowCountrySelector(true)}>+ Select Countries</button>\r\n            <button\r\n              onClick={() => {\r\n                setSelectedCountries([]);\r\n                setActiveRegions([]);\r\n              }}\r\n              style={{\r\n                backgroundColor: '#f44336',\r\n                color: 'white',\r\n                border: 'none',\r\n                padding: '8px',\r\n                borderRadius: '4px',\r\n                cursor: 'pointer'\r\n              }}\r\n            >\r\n              Reset Selections\r\n            </button>\r\n          </div>\r\n\r\n          {/* ‚¨áÔ∏è Mini Trend Chart Below Region Legend */}\r\n          {hoveredCountry && hoverTrendData.length > 0 && (\r\n            <div style={{ marginTop: '30px' }}>\r\n              <MiniTrendChart\r\n                country={hoveredCountry.entity}\r\n                data={hoverTrendData}\r\n                color={regionColorMap[hoveredCountry.region] || '#000'}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ textAlign: 'center', fontSize: '16px', marginBottom: '10px', color: '#444' }}>\r\n        Year: {selectedYear}\r\n      </div>\r\n\r\n      {/* Country Selector */}\r\n      {showCountrySelector && (\r\n        <CountrySelector\r\n          data={data}\r\n          selectedCountries={selectedCountries}\r\n          toggleCountry={toggleCountry}\r\n          close={() => setShowCountrySelector(false)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}